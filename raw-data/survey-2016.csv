Timestamp,How long have you been programming (in any language)?,How would you classify your day job?,Would you say you have a strong academic or theoretical background?,How comfortable are you with functional programming in general?,What are your primary programming languages,How long have you been using F#?,"If you were using F# but have now stopped, please tell us why:",How would you characterize your use of F# today?,Platforms ,Development environment ,F# news and activities,What have been the biggest benefits to you *personally* in using F#? ,What are your favorite features in F#? ,What features in F# do you rarely or never use?,What have you found to be the best way of learning how to use F#?,What kind of training/documentation appeals to you?,What kinds of learning material would you like to see more of?,How can learning F# be made easier?,"What kind of ""published"" code have you created with F#?",In which domain(s) are you using F#?,What kind of data sources are you using F# with?,"If you are deploying code written in F#, which platforms do you target?",What is the status of F# in your workplace?,Biggest benefits of F# at work,What stops your workplace from using F# more than it does now?,What could the F# community do to make it more acceptable to your workplace?,What has been the most frustrating thing for you in *learning* F#?,What has been the most frustrating for you in *developing applications* in F#?,Which other platform(s) would you be interested in using F# on?,What do you think is F#’s most glaring weakness / blind spot / problem?,How could this survey be improved?,Any other comments?,"If you are looking for training or learning materials, what format do you prefer? ",What are the top five F# tools and libraries that have made the most difference to you as a developer?, [Row 1]
12/04/2016 21:56:53,10 or more years,Enterprise development,"Yes, I enjoy computer science and mathematics",Expert,"C#, F#",4 or more years,,I use it at work or for other commercial uses,Windows,Visual Studio 2015 or newer,"Twitter, F# Weekly","Better domain modelling with records and unions, Conciseness of code (I can see more at a glance), Correctness (no nulls, it works first time), Great community","Agents (MailboxProcessor), Algebraic types (inc discriminated unions and tuples), Easy integration with other .NET libraries, Immutability by default, No dependency cycles, The ""piping"" idiom, Type inference, Type providers","Quotations, Static type constraints","Links and instructions from fsharp.org, F# books, F# bloggers, Links posted on social media such as Twitter, Links mentioned in F# Weekly, Answers to Stack Overflow questions",I'm willing to learn advanced concepts but only if they are relevant and practical,"More material with real-world examples and war stories, More short ""live coding"" videos",,Commercial products,Commercial web site/app,SQL databases,"Windows, Azure",It's officially endorsed in my team for critical/production areas,"Domain modelling: making illegal states unrepresentable, Correctness: fewer bugs and less rework, More productive with fewer developers",Nothing. Everyone loves it.,,"Installation process, Not enough real-world code to learn from",Working with C#-centric tooling,,,,,,,
12/04/2016 22:11:02,10 or more years,Data or analytics related,"Yes, I enjoy computer science and mathematics",Expert,"C++, F#, Haskell, R",4 or more years,,I use it at work or for other commercial uses,"Windows, Linux",Visual Studio 2015 or newer,"Twitter, F# Weekly, fsharp channel on Slack","Better domain modelling with records and unions, Conciseness of code (I can see more at a glance), Correctness (no nulls, it works first time), Great community, Speed of development","Active Patterns, Algebraic types (inc discriminated unions and tuples), Computation expressions, Immutability by default, Interactive development, No dependency cycles, Object expressions, Quotations, The ""piping"" idiom, Type inference, Type providers","Agents (MailboxProcessor), Units of measure","F# books, F# bloggers",I like theory -- I'm not afraid of monads and other abstractions,"More material with in-depth tutorials, More material with short ""cookbook"" style information, More interactive tutorials (e.g. like the F# Koans)",,"Internal enterprise projects, Commercial products, Open source projects","Utilities and tools, Algorithm-heavy business applications (non-financial), Machine learning, Data analysis/statistics, Text analysis/language parsing","SQL databases, Analytics","Windows, Linux",It's officially endorsed in my team for critical/production areas,"Domain modelling: making illegal states unrepresentable, Correctness: fewer bugs and less rework, More productive with fewer developers, Faster time to market, Better for solving complex problems","Hiring: They worry about not being able to find F# developers, Training: They are worried about getting non-F# developers up to speed",,,Working with C#-centric tooling,"Javascript, Native",,,,"Books or longer articles explaining full context, Reference works or documentation with API listings or short tutorials",,
12/04/2016 22:13:53,5-10 years,Consulting,"Yes, I enjoy computer science and mathematics",Experienced,F#,3-4 years,,I use it at work or for other commercial uses,Windows,VS Code (with Ionide),"Twitter, F# Weekly, fsharp channel on Slack","Better domain modelling with records and unions, Conciseness of code (I can see more at a glance), Correctness (no nulls, it works first time), Great community, Having fun again, Speed of development","Active Patterns, Agents (MailboxProcessor), Algebraic types (inc discriminated unions and tuples), Async workflows, Computation expressions, Immutability by default, No dependency cycles, Object expressions, Simple ""one liner"" type definitions for records and DUs, The ""piping"" idiom, Type providers",Quotations,"Links and instructions from fsharp.org, F# bloggers, Links posted on social media such as Twitter, Links mentioned in F# Weekly, Videos (e.g. Community for F#)",I like theory -- I'm not afraid of monads and other abstractions,"More material with short ""cookbook"" style information, More material with real-world examples and war stories, More short ""live coding"" videos, More podcasts and other audio-only material",,"Internal enterprise projects, Commercial products, Open source projects","Utilities and tools, Financial services, Mainstream business & enterprise applications","SQL databases, NoSQL database, Event sourcing, Read-only data sources such as feeds","Windows, Azure",It's officially endorsed in my team for critical/production areas,"Domain modelling: making illegal states unrepresentable, Correctness: fewer bugs and less rework, More productive with fewer developers, Faster time to market, Better for solving complex problems",Nothing. Everyone loves it.,,,"Lack of good wrappers for non-F# libraries, Working with C#-centric tooling",Native,,,,"In-person: In-depth trainings (2 or 3 days), In-person: A talks at user groups, In-person: Attending a talks as part of a conference, Books or longer articles explaining full context, Reference works or documentation with API listings or short tutorials","Paket,
FAKE",
12/04/2016 22:14:27,10 or more years,Enterprise development,"Yes, I enjoy computer science and mathematics",Intermediate,C#,1-2 years,,I use it at work or for other commercial uses,Windows,Visual Studio 2015 or newer,"Twitter, F# Weekly, fsharp channel on Slack","Better domain modelling with records and unions, Correctness (no nulls, it works first time), Having fun again","Easy integration with other .NET libraries, Immutability by default, No dependency cycles, Quotations, Type providers","Active Patterns, Object-oriented compatibility","Links and instructions from fsharp.org, F# books, Links posted on social media such as Twitter, Links mentioned in F# Weekly, Videos (e.g. Community for F#)",I'm willing to learn advanced concepts but only if they are relevant and practical,More material with in-depth tutorials,,Internal enterprise projects,Custom development/specialist markets,SQL databases,Windows,It's officially endorsed in my team for critical/production areas,"Domain modelling: making illegal states unrepresentable, Correctness: fewer bugs and less rework, More productive with fewer developers, Faster time to market, Better for solving complex problems",Training: They are worried about getting non-F# developers up to speed,,I can't use my knowledge from C# or other imperative languages,"Lack of F# friendly libraries, Less sophisticated tools for refactoring, etc.",Native,,,,In-person: In-depth trainings (2 or 3 days),,
12/04/2016 22:14:56,2-5 years,Commercial software/web development,"Yes, I enjoy computer science and mathematics",Learner,C#,Less than a year,,Just tinkering,Windows,"Visual Studio 2015 or newer, VS Code (with Ionide)","Twitter, F# Weekly","Having fun again, Learning functional programming in general","Active Patterns, Agents (MailboxProcessor), Algebraic types (inc discriminated unions and tuples), Immutability by default, Type providers","Interactive development, Object-oriented compatibility, Units of measure","Links and instructions from fsharp.org, F# bloggers, Links posted on social media such as Twitter, Links mentioned in F# Weekly, Videos (e.g. Community for F#)",I like theory -- I'm not afraid of monads and other abstractions,"More material with in-depth tutorials, More short ""live coding"" videos, More interactive tutorials (e.g. like the F# Koans)",,Not applicable. None of my F# code is used by other people,None - Just playing around,SQL databases,"Windows, Linux",I don't use F# at work,Domain modelling: making illegal states unrepresentable,"No perceived benefits: They don't understand what benefits F# has over C# or other languages, legacy",,"Lack of good tutorials/documentation, Not enough real-world code to learn from",Not being part of the core .NET distribution,LLVM,,,,"In-person: A talks at user groups, In-person: Attending a talks as part of a conference, Books or longer articles explaining full context, Recorded talks from a conference or user group, In-depth online courses (e.g. Pluralsight)",,
12/04/2016 22:21:29,10 or more years,Commercial software/web development,"Yes, I enjoy computer science and mathematics",Learner,"C#, Javascript",Less than two months,,I use it for hobby or side projects,"Windows, Mac, Linux","Visual Studio 2015 or newer, Xamarin, Atom (with Ionide)","Twitter, F# Weekly","Better domain modelling with records and unions, Conciseness of code (I can see more at a glance), Correctness (no nulls, it works first time), Great community, Having fun again, Learning functional programming in general","Active Patterns, Agents (MailboxProcessor), Algebraic types (inc discriminated unions and tuples), Computation expressions, Easy integration with other .NET libraries, Immutability by default, Interactive development, Simple ""one liner"" type definitions for records and DUs, The ""piping"" idiom, Type inference, Type providers",,"F# books, F# bloggers, Links posted on social media such as Twitter, Links mentioned in F# Weekly, Videos (e.g. Community for F#)",I like theory -- I'm not afraid of monads and other abstractions,"More material with in-depth tutorials, More material with short ""cookbook"" style information, More material with real-world examples and war stories, More short ""live coding"" videos",,Not applicable. None of my F# code is used by other people,Non-commercial web site/app,"NoSQL database, Event sourcing","Windows, Mac, Linux, Azure",It's used unofficially,"Domain modelling: making illegal states unrepresentable, Correctness: fewer bugs and less rework, More productive with fewer developers, Faster time to market, Efficiency/Performance, Easy concurrency with async and agents, Better for solving complex problems","Hiring: They worry about not being able to find F# developers, Money: They worry that good F# developers will cost too much, Training: They are worried about getting non-F# developers up to speed",,,"Working with C#-centric tooling, Less sophisticated tools for refactoring, etc., Difficulty in troubleshooting problems",None -- I'm happy with the CLR/Mono,,,,"Books or longer articles explaining full context, Reference works or documentation with API listings or short tutorials, Recorded talks from a conference or user group, In-depth online courses (e.g. Pluralsight)",,
12/04/2016 22:21:53,10 or more years,Commercial software/web development,"No, I don't know much theory",Learner,"C#, F#",Less than a year,,I use it for hobby or side projects,Windows,"Visual Studio 2015 or newer, Atom (with Ionide), VS Code (with Ionide)","Twitter, F# Weekly","Correctness (no nulls, it works first time), Great community, Learning functional programming in general","Active Patterns, Algebraic types (inc discriminated unions and tuples), Immutability by default, Interactive development, Simple ""one liner"" type definitions for records and DUs, The ""piping"" idiom, Type inference, Type providers","Agents (MailboxProcessor), Units of measure","F# books, F# bloggers, Links posted on social media such as Twitter, Links mentioned in F# Weekly",I'm willing to learn advanced concepts but only if they are relevant and practical,"More material with in-depth tutorials, More material with short ""cookbook"" style information, More material with real-world examples and war stories",,,None - Just playing around,"SQL databases, NoSQL database",,I don't use F# at work,,"No perceived benefits: They don't understand what benefits F# has over C# or other languages, Hiring: They worry about not being able to find F# developers, No buy-in: There is lack of acceptance from other teams",,,"Not being part of the core .NET distribution, Working with C#-centric tooling, Less sophisticated tools for refactoring, etc.","JVM, Javascript",,,,"In-person: Shorter workshops focused on a specific topic (1 day), In-person: A talks at user groups, In-person: Attending a talks as part of a conference, Books or longer articles explaining full context, In-depth online courses (e.g. Pluralsight)","FSharp.Data
Unquote",
12/04/2016 22:26:37,10 or more years,Consulting,"No, I don't know much theory",Experienced,"C#, F#",4 or more years,,I use it for hobby or side projects,Windows,Visual Studio 2015 or newer,"Twitter, F# Weekly, F# bloggers","Better domain modelling with records and unions, Conciseness of code (I can see more at a glance), Correctness (no nulls, it works first time), Great community, Learning functional programming in general, Speed of development","Algebraic types (inc discriminated unions and tuples), Computation expressions, No dependency cycles, Object expressions, Quotations, Simple ""one liner"" type definitions for records and DUs, Type inference, Type providers",Units of measure,"Links and instructions from fsharp.org, F# books, F# bloggers, Links posted on social media such as Twitter, Links mentioned in F# Weekly, Videos (e.g. Community for F#)",I like theory -- I'm not afraid of monads and other abstractions,"More material with in-depth tutorials, More material with short ""cookbook"" style information, More material with real-world examples and war stories",,Internal enterprise projects,"Utilities and tools, Custom development/specialist markets, Data analysis/statistics","SQL databases, NoSQL database, Event sourcing","Windows, Azure",It's used unofficially,"Domain modelling: making illegal states unrepresentable, Correctness: fewer bugs and less rework","Hiring: They worry about not being able to find F# developers, No buy-in: There is lack of acceptance from other teams",,I can't use my knowledge from C# or other imperative languages,Not being part of the core .NET distribution,"LLVM, Native",,,,"Books or longer articles explaining full context, Reference works or documentation with API listings or short tutorials, Recorded talks from a conference or user group, In-depth online courses (e.g. Pluralsight)",,
12/04/2016 22:30:18,10 or more years,Consulting,"No, I don't know much theory",Intermediate,"C#, F#, Javascript, Typescript, Visual Basic",2-3 years,,I use it for hobby or side projects,Windows,"Visual Studio 2015 or newer, Xamarin","Twitter, F# Weekly, Google groups, F# bloggers","Conciseness of code (I can see more at a glance), Correctness (no nulls, it works first time), Great community, Having fun again","Algebraic types (inc discriminated unions and tuples), Easy integration with other .NET libraries, Immutability by default, Simple ""one liner"" type definitions for records and DUs, The ""piping"" idiom","Quotations, Static type constraints, Units of measure","Links and instructions from fsharp.org, F# bloggers, Links posted on social media such as Twitter, Links mentioned in F# Weekly, Answers to Stack Overflow questions, Reading F# code written by experts",I'm willing to learn advanced concepts but only if they are relevant and practical,"More material with in-depth tutorials, More material with real-world examples and war stories, More short ""live coding"" videos, More interactive tutorials (e.g. like the F# Koans)",,Commercial products,Mobile apps,"NoSQL database, Event sourcing","Windows, iOS, Android, WinPhone",I don't use F# at work,,,,Not enough real-world code to learn from,"Not being part of the core .NET distribution, Lack of good wrappers for non-F# libraries, Working with C#-centric tooling, Less sophisticated tools for refactoring, etc.","JVM, LLVM, Native",,,,"Books or longer articles explaining full context, Recorded talks from a conference or user group, In-depth online courses (e.g. Pluralsight)",,
12/04/2016 22:35:59,10 or more years,Enterprise development,"Yes, I enjoy computer science and mathematics",Intermediate,C#,4 or more years,,I use it for hobby or side projects,Windows,Visual Studio 2015 or newer,"Twitter, F# Weekly",Learning functional programming in general,Interactive development,"Active Patterns, Agents (MailboxProcessor), Computation expressions, Quotations, Units of measure",F# books,I'm willing to learn advanced concepts but only if they are relevant and practical,"More material with in-depth tutorials, More material with short ""cookbook"" style information, More material with real-world examples and war stories, More short ""live coding"" videos, More podcasts and other audio-only material",,Internal enterprise projects,Utilities and tools,,Windows,It's used unofficially,Correctness: fewer bugs and less rework,Hiring: They worry about not being able to find F# developers,,Don't understand the compiler errors,"Less sophisticated tools for refactoring, etc., Difficulty in troubleshooting problems",None -- I'm happy with the CLR/Mono,,,,"Books or longer articles explaining full context, In-depth online courses (e.g. Pluralsight)",,
12/04/2016 22:46:10,10 or more years,Enterprise development,"Yes, I enjoy computer science and mathematics",Intermediate,"C#, F#",1-2 years,,I use it at work or for other commercial uses,Windows,"Visual Studio 2010 or older, VS Code (with Ionide)","Twitter, F# Weekly","Better domain modelling with records and unions, Having fun again","Algebraic types (inc discriminated unions and tuples), Backtick naming, Interactive development, No dependency cycles, The ""piping"" idiom, Units of measure","Agents (MailboxProcessor), Type providers","F# books, F# bloggers, Links posted on social media such as Twitter, Links mentioned in F# Weekly",I want to learn functional programming but I don't like academic jargon,More material with real-world examples and war stories,,Internal enterprise projects,"Utilities and tools, Text analysis/language parsing, Other",Data integration and EAI,"Windows, Linux",It's used unofficially,"Domain modelling: making illegal states unrepresentable, Better for solving complex problems","No perceived benefits: They don't understand what benefits F# has over C# or other languages, Hiring: They worry about not being able to find F# developers",,"Lack of good tutorials/documentation, Installation process","Less sophisticated tools for refactoring, etc., Difficulty in troubleshooting problems",None -- I'm happy with the CLR/Mono,,,,"Books or longer articles explaining full context, Reference works or documentation with API listings or short tutorials, In-depth online courses (e.g. Pluralsight)","Fparsec, Fake",
12/04/2016 22:52:43,5-10 years,Commercial software/web development,"No, I don't know much theory",Experienced,"C#, F#",2-3 years,,I use it at work or for other commercial uses,"Windows, Mac, Linux","Visual Studio 2015 or newer, Visual Studio 2012 or 2013, Xamarin, Vim, VS Code (with Ionide)","Twitter, F# Weekly, fsharp channel on Slack","Better domain modelling with records and unions, Conciseness of code (I can see more at a glance), Correctness (no nulls, it works first time), Great community","Active Patterns, Async workflows, Computation expressions, Immutability by default, printf that is type checked, Type inference",Quotations,"MSDN, Reading F# code written by experts",I'm willing to learn advanced concepts but only if they are relevant and practical,"More material with in-depth tutorials, More material with real-world examples and war stories",A real world white paper based reference application and architecture similar to the recent Azure reference IoT architecture I feel would help to cement an understanding in how the F# components fit together,"Internal enterprise projects, Open source projects","Algorithm-heavy business applications (non-financial), Games, Commercial web site/app, Other",SQL databases,"Windows, Linux, Azure, Amazon Web services",It's officially endorsed in my team for critical/production areas,"Domain modelling: making illegal states unrepresentable, Easy concurrency with async and agents",No buy-in: There is lack of acceptance from other teams,,Not enough real-world code to learn from,Working with C#-centric tooling,"LLVM, Native",,,,Books or longer articles explaining full context,"F# power tools, Akka.Net, Fsharp.Data, Ionide",
12/04/2016 22:53:56,10 or more years,Enterprise development,"No, I don't know much theory",Intermediate,"C#, F#",1-2 years,,I use it for hobby or side projects,Windows,Visual Studio 2015 or newer,"Twitter, F# Weekly","Better domain modelling with records and unions, Correctness (no nulls, it works first time), Great community, Having fun again","Agents (MailboxProcessor), Immutability by default, The ""piping"" idiom, Type inference, Type providers","Active Patterns, Async workflows, Interactive development, Object expressions, Object-oriented compatibility, Quotations, Units of measure","F# bloggers, Links mentioned in F# Weekly, Reading F# code written by experts",I want to learn functional programming but I don't like academic jargon,"More material with in-depth tutorials, More material with short ""cookbook"" style information, More interactive tutorials (e.g. like the F# Koans)",,Commercial products,Games,Event sourcing,"Windows, Azure",It's officially endorsed in my team for non-critical/non-production code,"Domain modelling: making illegal states unrepresentable, Easy concurrency with async and agents","No perceived benefits: They don't understand what benefits F# has over C# or other languages, Hiring: They worry about not being able to find F# developers",,Not enough real-world code to learn from,"Not being part of the core .NET distribution, Working with C#-centric tooling","JVM, Javascript, LLVM, Native",,,,"Books or longer articles explaining full context, Reference works or documentation with API listings or short tutorials, In-depth online courses (e.g. Pluralsight)",,
12/04/2016 23:04:54,10 or more years,Consulting,"Yes, I enjoy computer science and mathematics",Experienced,F#,4 or more years,,I use it at work or for other commercial uses,Windows,"Visual Studio 2015 or newer, Visual Studio 2012 or 2013, Atom (with Ionide), VS Code (with Ionide)","Twitter, F# Weekly, fsharp channel on Slack","Correctness (no nulls, it works first time), Great community, Having fun again, Learning functional programming in general, Speed of development","Agents (MailboxProcessor), Algebraic types (inc discriminated unions and tuples), Immutability by default, Interactive development, No dependency cycles, Simple ""one liner"" type definitions for records and DUs, The ""piping"" idiom, Type inference, Type providers","Object expressions, Object-oriented compatibility, Quotations, Static type constraints",F# books,I like theory -- I'm not afraid of monads and other abstractions,,,"Internal enterprise projects, Open source projects","Algorithm-heavy business applications (non-financial), Machine learning, Data analysis/statistics",SQL databases,"Windows, Azure",It's officially endorsed in my team for critical/production areas,"Domain modelling: making illegal states unrepresentable, Correctness: fewer bugs and less rework, Faster time to market, Easy concurrency with async and agents, Better for solving complex problems",Nothing. Everyone loves it.,,Sample applications,,,,,,,"fsharp.data, paket, mbrace, F# power tools, FParsec",
12/04/2016 23:07:49,10 or more years,Data or analytics related,"Yes, I enjoy computer science and mathematics",Intermediate,"F#, Objective-C, Python, Rust, Swift",I was using F# but have stopped,"Unix based CLI interface is buggy and community seems to be focused on things not relevant to my problems (e.g. Unix/Linux based deployment, CLI based development and deployment workflow with OS X, reliable cross platform libraries etc.) ... I am hopeful that this will change with the CoreCLR but I personally have no faith in the community coming up with useful solutions.",I use it at work or for other commercial uses,Mac,"Vim, VS Code (with Ionide)","Twitter, F# Weekly, HN, Reddit and other programming news sites","Better domain modelling with records and unions, Conciseness of code (I can see more at a glance), Correctness (no nulls, it works first time), Speed of development","Algebraic types (inc discriminated unions and tuples), Computation expressions, Immutability by default, Interactive development, printf that is type checked, Quotations, Simple ""one liner"" type definitions for records and DUs, The ""piping"" idiom, Type inference, Units of measure",Type providers,"F# books, Links posted on social media such as Twitter, Links mentioned in F# Weekly, Reading F# code written by experts",I'm willing to learn advanced concepts but only if they are relevant and practical,More material with real-world examples and war stories,,Commercial products,"Algorithm-heavy business applications (non-financial), Mobile apps, Data analysis/statistics",SQL databases,"Linux, Amazon Web services",It's officially endorsed in my team for critical/production areas,"Domain modelling: making illegal states unrepresentable, Correctness: fewer bugs and less rework, More productive with fewer developers, Faster time to market, Efficiency/Performance, Better for solving complex problems","Too Windows-centric: They have concerns over cross-platform issues, Too Microsoft-centric: They think it is too closely linked to Microsoft","* have a single officially endorsed modern unix CLI based build, package management and deployment story

* test libraries/tools that are marketed as cross platform that they actually work for non trivial use cases on other platforms as windows

",Installation process,"Difficulty in troubleshooting problems, Cross-platform issues",LLVM,"the constant pandering to C# developers who actually have a good language, runtime and tooling to work with (i.e. less pain to actually change) while treating the Unix environment as a second class citizen, where a language like F# would offer an actual benefit.",,,"Books or longer articles explaining full context, Reference works or documentation with API listings or short tutorials",,
12/04/2016 23:19:37,10 or more years,Commercial software/web development,"No, I don't know much theory",Experienced,"C, C#, C++, F#",3-4 years,,I use it at work or for other commercial uses,Windows,"Visual Studio 2015 or newer, Visual Studio 2012 or 2013","Twitter, F# Weekly, Google groups, fsharp channel on Slack, StackOverflow chat","Better domain modelling with records and unions, Conciseness of code (I can see more at a glance), Correctness (no nulls, it works first time), Great community, Having fun again, Learning functional programming in general, Speed of development","Algebraic types (inc discriminated unions and tuples), Async workflows, Computation expressions, Easy integration with other .NET libraries, Immutability by default, No dependency cycles, Object expressions, Object-oriented features (inc. C# compatibility, conciseness), Simple ""one liner"" type definitions for records and DUs, The ""piping"" idiom, Type inference",,"MSDN, F# books, F# bloggers, Links posted on social media such as Twitter, Reading F# code written by experts",I'm willing to learn advanced concepts but only if they are relevant and practical,"More material with real-world examples and war stories, More interactive tutorials (e.g. like the F# Koans)",,"Commercial products, Open source projects","Utilities and tools, Mainstream business & enterprise applications, Commercial web site/app, Text analysis/language parsing",Not doing data centric apps,Windows,It's officially endorsed in my team for critical/production areas,"Domain modelling: making illegal states unrepresentable, Correctness: fewer bugs and less rework, More productive with fewer developers, Faster time to market, Efficiency/Performance, Better for solving complex problems",Nothing. Everyone loves it.,,"Lack of good tutorials/documentation, Not enough real-world code to learn from","Not being part of the core .NET distribution, Working with C#-centric tooling, Performance issues","JVM, Javascript, Native",,,,"Reference works or documentation with API listings or short tutorials, Recorded talks from a conference or user group, In-depth online courses (e.g. Pluralsight)",,
12/04/2016 23:20:25,10 or more years,Commercial software/web development,"No, I don't know much theory",Learner,"C#, F#, Javascript, Objective-C, Typescript",2-3 years,,I use it at work or for other commercial uses,"Windows, Mac","Visual Studio 2015 or newer, Xamarin",Twitter,"Better domain modelling with records and unions, Conciseness of code (I can see more at a glance), Correctness (no nulls, it works first time), Learning functional programming in general","Active Patterns, Computation expressions, Easy integration with other .NET libraries, Immutability by default, Interactive development, No dependency cycles, The ""piping"" idiom","Object expressions, Quotations, Type providers","MSDN, Links and instructions from fsharp.org, F# bloggers, Reading F# code written by experts",I'm willing to learn advanced concepts but only if they are relevant and practical,"More material with in-depth tutorials, More material with short ""cookbook"" style information, More material with real-world examples and war stories, More recipes for going from OO to Functional",,Commercial products,"Games, Commercial web site/app, Mobile apps",NoSQL database,"Windows, iOS",It's officially endorsed in my team for critical/production areas,"Domain modelling: making illegal states unrepresentable, Correctness: fewer bugs and less rework",Language Specific Dependency Separation/Architecting,,,"Working with C#-centric tooling, Performance issues, Working with OO architected frameworks (not really solvable, but annoying none the less)","Javascript, LLVM, Native",Performance: Allocating a lot of stuff!,,,Reference works or documentation with API listings or short tutorials,,
12/04/2016 23:39:12,10 or more years,Enterprise development,"Yes, I enjoy computer science and mathematics",Intermediate,"C#, F#",3-4 years,,I use it at work or for other commercial uses,Windows,"Visual Studio 2015 or newer, Atom (with Ionide)","Twitter, F# Weekly, F# bloggers","Better domain modelling with records and unions, Conciseness of code (I can see more at a glance), Correctness (no nulls, it works first time), Great community, Having fun again, Learning functional programming in general, Speed of development, Functional but can be tweaked to get high performance","Active Patterns, Algebraic types (inc discriminated unions and tuples), Computation expressions, Easy integration with other .NET libraries, Immutability by default, Interactive development, No dependency cycles, Simple ""one liner"" type definitions for records and DUs, The ""piping"" idiom, Type inference, Type providers, Units of measure","Agents (MailboxProcessor), Object-oriented compatibility, Units of measure","Links and instructions from fsharp.org, F# books, F# bloggers, Links mentioned in F# Weekly, Videos (e.g. Community for F#), Reading F# code written by experts",I like theory -- I'm not afraid of monads and other abstractions,More interactive tutorials (e.g. like the F# Koans),,"Internal enterprise projects, Open source projects","Utilities and tools, Algorithm-heavy business applications (non-financial), Machine learning, Mainstream business & enterprise applications, Data analysis/statistics","Event sourcing, Read-only data sources such as feeds, Analytics","Windows, Linux",It's officially endorsed in my team for critical/production areas,"Domain modelling: making illegal states unrepresentable, Correctness: fewer bugs and less rework, Better for solving complex problems","Hiring: They worry about not being able to find F# developers, Training: They are worried about getting non-F# developers up to speed, No buy-in: There is lack of acceptance from other teams",,,"Not being part of the core .NET distribution, Less sophisticated tools for refactoring, etc.",None -- I'm happy with the CLR/Mono,,,,"Books or longer articles explaining full context, Recorded talks from a conference or user group, In-depth online courses (e.g. Pluralsight)",,
12/04/2016 23:55:10,10 or more years,Enterprise development,"Yes, I enjoy computer science and mathematics",Intermediate,C#,3-4 years,,I use it for hobby or side projects,Windows,Visual Studio 2015 or newer,"Twitter, HN, Reddit and other programming news sites, F# bloggers",Learning functional programming in general,Immutability by default,"Active Patterns, Agents (MailboxProcessor), Computation expressions, Object expressions, Object-oriented compatibility, Quotations, Static type constraints, Units of measure","F# bloggers, Answers to Stack Overflow questions",I like theory -- I'm not afraid of monads and other abstractions,More material with real-world examples and war stories,,Open source projects,Utilities and tools,SQL databases,"Windows, Azure",It's used unofficially,Correctness: fewer bugs and less rework,"No perceived benefits: They don't understand what benefits F# has over C# or other languages, Hiring: They worry about not being able to find F# developers",,Not enough real-world code to learn from,Difficulty in troubleshooting problems,None -- I'm happy with the CLR/Mono,,,,Books or longer articles explaining full context,,
12/04/2016 23:55:13,10 or more years,Enterprise development,"Yes, I enjoy computer science and mathematics",Intermediate,"C#, F#",1-2 years,,I use it for hobby or side projects,Windows,Visual Studio 2015 or newer,"Twitter, F# bloggers","Conciseness of code (I can see more at a glance), Correctness (no nulls, it works first time), Having fun again, Speed of development","Active Patterns, Immutability by default, No dependency cycles, The ""piping"" idiom, Type inference","Agents (MailboxProcessor), Integration with non-F# libraries, Interactive development, Object expressions, Object-oriented compatibility, Quotations, Units of measure","F# bloggers, Videos (e.g. Community for F#), Reading F# code written by experts",I like theory -- I'm not afraid of monads and other abstractions,More material with real-world examples and war stories,,Open source projects,Utilities and tools,Not doing data centric apps,"Windows, Linux, iOS",I don't use F# at work,,"No perceived benefits: They don't understand what benefits F# has over C# or other languages, Hiring: They worry about not being able to find F# developers, Training: They are worried about getting non-F# developers up to speed, No buy-in: There is lack of acceptance from other teams",,"Lack of good tutorials/documentation, Don't understand the compiler errors, Not enough real-world code to learn from","Working with C#-centric tooling, Difficulty in troubleshooting problems",None -- I'm happy with the CLR/Mono,None,,,"Books or longer articles explaining full context, Recorded talks from a conference or user group, In-depth online courses (e.g. Pluralsight)","Paket
Fsi
Fscheck",
13/04/2016 00:10:19,10 or more years,Enterprise development,"No, I don't know much theory",Intermediate,"C#, F#, Javascript, R",3-4 years,,I use it at work or for other commercial uses,Windows,Visual Studio 2015 or newer,Twitter,"Better domain modelling with records and unions, Conciseness of code (I can see more at a glance), Correctness (no nulls, it works first time), Great community, Having fun again, Learning functional programming in general, Speed of development","Active Patterns, Algebraic types (inc discriminated unions and tuples), Computation expressions, Easy integration with other .NET libraries, Immutability by default, Interactive development, Object-oriented features (inc. C# compatibility, conciseness), Simple ""one liner"" type definitions for records and DUs, The ""piping"" idiom, Type inference, Type providers","Agents (MailboxProcessor), Async workflows, Object expressions, Quotations, Units of measure","Links and instructions from fsharp.org, F# books, Answers to Stack Overflow questions, Structured training/workshops, Reading F# code written by experts, email Scott W",I like theory -- I'm not afraid of monads and other abstractions,"More material with short ""cookbook"" style information, More material with real-world examples and war stories",,Commercial products,"Custom development/specialist markets, Machine learning","SQL databases, Analytics",Windows,It's officially endorsed in my team for critical/production areas,"Domain modelling: making illegal states unrepresentable, Correctness: fewer bugs and less rework, More productive with fewer developers, Faster time to market, Efficiency/Performance, Easy concurrency with async and agents, Better for solving complex problems","Hiring: They worry about not being able to find F# developers, Money: They worry that good F# developers will cost too much",,"Lack of good tutorials/documentation, Installation process",,,,,,"Books or longer articles explaining full context, Reference works or documentation with API listings or short tutorials, Recorded talks from a conference or user group","FSharp Power Tools
FSharp.Data
Accord.Net (OK, that is a .NET one, but...)

",
13/04/2016 00:33:59,10 or more years,Commercial software/web development,"No, I don't know much theory",Intermediate,"C#, F#, Javascript, Perl",2-3 years,,I use it at work or for other commercial uses,Windows,"Visual Studio 2015 or newer, Xamarin","Twitter, F# Weekly, F# bloggers","Better domain modelling with records and unions, Correctness (no nulls, it works first time), Learning functional programming in general","Algebraic types (inc discriminated unions and tuples), Immutability by default, No dependency cycles, The ""piping"" idiom, Type inference","Object expressions, Object-oriented compatibility, Quotations, Static type constraints","F# books, F# bloggers, Links posted on social media such as Twitter, Links mentioned in F# Weekly",I'm willing to learn advanced concepts but only if they are relevant and practical,"More material with in-depth tutorials, More material with real-world examples and war stories",,"Commercial products, Open source projects","Utilities and tools, Games",,"Windows, Linux",It's officially endorsed in my team for critical/production areas,"Correctness: fewer bugs and less rework, Easy concurrency with async and agents, Better for solving complex problems",Nothing. Everyone loves it.,,How to design full applications,,"LLVM, Native","Most .Net Libraries are mutable, or throw exceptions or use null. Using them means we always have to create wrappers. I think F# should provide a built-in Result type that addresses these problems.",,,"Books or longer articles explaining full context, Reference works or documentation with API listings or short tutorials, Recorded talks from a conference or user group",,
13/04/2016 01:03:22,10 or more years,Enterprise development,"No, I don't know much theory",Intermediate,"C#, F#",4 or more years,,I use it at work or for other commercial uses,Windows,"Visual Studio 2015 or newer, Atom (with Ionide)","Twitter, F# Weekly","Conciseness of code (I can see more at a glance), Correctness (no nulls, it works first time), Having fun again, Speed of development","Active Patterns, Backtick naming, Immutability by default, Object expressions, The ""piping"" idiom, Type inference, Type providers","Agents (MailboxProcessor), Quotations","MSDN, F# books, F# bloggers",I like theory -- I'm not afraid of monads and other abstractions,"More material with short ""cookbook"" style information, More material with real-world examples and war stories",,Internal enterprise projects,Utilities and tools,"Read-only data sources such as feeds, Not doing data centric apps",Windows,It's officially endorsed in my team for critical/production areas,"More productive with fewer developers, Efficiency/Performance","Hiring: They worry about not being able to find F# developers, Training: They are worried about getting non-F# developers up to speed, No buy-in: There is lack of acceptance from other teams",,,Difficulty in troubleshooting problems,Javascript,,,,"Books or longer articles explaining full context, Reference works or documentation with API listings or short tutorials","FAKE, Paket",
13/04/2016 01:24:14,10 or more years,Commercial software/web development,"No, I don't know much theory",Intermediate,"Elixir, F#, Haskell, Java, Javascript, Ocaml/SML, Python, Ruby, Typescript",Less than a year,,I use it for hobby or side projects,"Mac, Linux","Vim, VS Code (with Ionide)","Twitter, F# Weekly, HN, Reddit and other programming news sites, fsharp channel on Slack","Better domain modelling with records and unions, Conciseness of code (I can see more at a glance), Correctness (no nulls, it works first time), Having fun again, Speed of development","Algebraic types (inc discriminated unions and tuples), Backtick naming, Immutability by default, Interactive development, Simple ""one liner"" type definitions for records and DUs, The ""piping"" idiom, Type inference","Active Patterns, Agents (MailboxProcessor), Async workflows, Computation expressions, Integration with non-F# libraries, Quotations, Static type constraints, Type providers, Units of measure","Links mentioned in F# Weekly, Reading F# code written by experts, Lurking in slack",I'm willing to learn advanced concepts but only if they are relevant and practical,"More material with in-depth tutorials, More material with short ""cookbook"" style information, More material with real-world examples and war stories, More interactive tutorials (e.g. like the F# Koans)","The story for getting started without ever touching Visual Studio (e.g. on Linux) needs to be easier; manually maintaining paths to source and DLLs in project files needs to die, FSI needs a lot of TLC to catch up to where GNU deadline has been since the 80s or 90s",Open source projects,"None - Just playing around, Utilities and tools","SQL databases, NoSQL database, Event sourcing","Windows, Mac, Linux",I don't use F# at work,Not using it yet,"No perceived benefits: They don't understand what benefits F# has over C# or other languages, Too Windows-centric: They have concerns over cross-platform issues, All code is JVM, no time for a full rewrite",Target the JVM maybe?,"Lack of good tutorials/documentation, Too Visual-Studio-dependent","Lack of F# friendly libraries, Working with C#-centric tooling, Less sophisticated tools for refactoring, etc., Cross-platform issues, Too Visual-Studio-dependent,","JVM, LLVM, Native","Too Visual-Studio-dependent, too C#-accommodating, too reliant on Microsoft (who would just as soon kill it)",,,Reference works or documentation with API listings or short tutorials,"vim-fsharp, Ionide, Mono, FParsec",
13/04/2016 03:37:17,5-10 years,Commercial software/web development,"Yes, I enjoy computer science and mathematics",Intermediate,"F#, Javascript, Typescript",3-4 years,,I use it for hobby or side projects,"Windows, Mac","Visual Studio 2015 or newer, Xamarin, VS Code (with Ionide)","Twitter, F# Weekly, fsharp channel on Slack","Better domain modelling with records and unions, Conciseness of code (I can see more at a glance), Correctness (no nulls, it works first time), Great community, Having fun again, Speed of development, Functional but can be tweaked to get high performance","Active Patterns, Agents (MailboxProcessor), Algebraic types (inc discriminated unions and tuples), Async workflows, Computation expressions, Easy integration with other .NET libraries, Immutability by default, Object-oriented features (inc. C# compatibility, conciseness), Simple ""one liner"" type definitions for records and DUs, The ""piping"" idiom, Type inference, Type providers, Units of measure",,"F# books, F# bloggers, Links mentioned in F# Weekly, Personal mentoring, Videos (e.g. Community for F#)",I like theory -- I'm not afraid of monads and other abstractions,"More material with in-depth tutorials, More material with short ""cookbook"" style information, More material with real-world examples and war stories, More interactive tutorials (e.g. like the F# Koans)",Isn't it already easy and fun? ,"Commercial products, Open source projects","Algorithm-heavy business applications (non-financial), Games, Commercial web site/app, Mobile apps","SQL databases, NoSQL database, Event sourcing","Windows, iOS, Android, Azure",It's used unofficially,Correctness: fewer bugs and less rework,"No perceived benefits: They don't understand what benefits F# has over C# or other languages, Hiring: They worry about not being able to find F# developers, No buy-in: There is lack of acceptance from other teams",,,Working with C#-centric tooling,None -- I'm happy with the CLR/Mono,,,,"In-person: In-depth trainings (2 or 3 days), In-person: Attending a talks as part of a conference, Books or longer articles explaining full context, Recorded talks from a conference or user group, In-depth online courses (e.g. Pluralsight)","FAKE, AKKA.fsharp, Chessie, Sqlprovider, fspickler ",
13/04/2016 04:25:23,5-10 years,Commercial software/web development,"Yes, I enjoy computer science and mathematics",Intermediate,"C#, F#, Javascript, PHP",1-2 years,,I use it at work or for other commercial uses,"Windows, Mac","Visual Studio 2015 or newer, Atom (with Ionide), VS Code (with Ionide)","Twitter, F# Weekly, Google+, Google groups, HN, Reddit and other programming news sites, fsharp channel on Slack","Better domain modelling with records and unions, Conciseness of code (I can see more at a glance), Correctness (no nulls, it works first time), Great community, Having fun again, Learning functional programming in general, Speed of development","Active Patterns, Agents (MailboxProcessor), Algebraic types (inc discriminated unions and tuples), Async workflows, Easy integration with other .NET libraries, Immutability by default, Interactive development, No dependency cycles, Object-oriented features (inc. C# compatibility, conciseness), Simple ""one liner"" type definitions for records and DUs, The ""piping"" idiom, Type inference, Units of measure","Async workflows, Computation expressions, Object expressions, Quotations, Static type constraints, Type providers","MSDN, Links and instructions from fsharp.org, F# books, F# bloggers, Links posted on social media such as Twitter, Links mentioned in F# Weekly, Personal mentoring, Videos (e.g. Community for F#), Reading F# code written by experts",I like theory -- I'm not afraid of monads and other abstractions,"More material with in-depth tutorials, More material with real-world examples and war stories, More interactive tutorials (e.g. like the F# Koans)",,"Commercial products, Open source projects","Utilities and tools, Custom development/specialist markets, Games, Machine learning, Mainstream business & enterprise applications, Research/Teaching",SQL databases,Azure,I don't use F# at work,,"No perceived benefits: They don't understand what benefits F# has over C# or other languages, Training: They are worried about getting non-F# developers up to speed, No buy-in: There is lack of acceptance from other teams",More C# to F# training,"Lack of good tutorials/documentation, Installation process","Working with C#-centric tooling, Difficulty in troubleshooting problems","JVM, Javascript, LLVM, Native",,,I <3 F#,"In-person: In-depth trainings (2 or 3 days), In-person: A talks at user groups, In-depth online courses (e.g. Pluralsight)","Ionide, Forge, Suave, FSharp.Data, FSharp.SqlClient",
13/04/2016 04:26:45,10 or more years,Commercial software/web development,"No, I don't know much theory",Intermediate,C#,Less than a year,,I use it for hobby or side projects,Windows,"Visual Studio 2015 or newer, VS Code (with Ionide)","Twitter, F# Weekly, HN, Reddit and other programming news sites","Better domain modelling with records and unions, Conciseness of code (I can see more at a glance), Learning functional programming in general","Easy integration with other .NET libraries, The ""piping"" idiom, Type providers",Units of measure,"MSDN, F# bloggers, Links mentioned in F# Weekly, fsharpforfunandprofit.com",I want to learn functional programming but I don't like academic jargon,"More material with in-depth tutorials, More material with short ""cookbook"" style information",,Not applicable. None of my F# code is used by other people,"Utilities and tools, Games",SQL databases,Windows,N/A,"Domain modelling: making illegal states unrepresentable, Correctness: fewer bugs and less rework",N/A,,Lack of good tutorials/documentation,Missing UWP support,Native,,,,"In-person: A talks at user groups, In-person: Attending a talks as part of a conference, Books or longer articles explaining full context",,
13/04/2016 04:30:59,10 or more years,Science or related,"Yes, I enjoy computer science and mathematics",Expert,F#,4 or more years,,I use it at work or for other commercial uses,Windows,"Visual Studio 2015 or newer, Visual Studio 2012 or 2013","Twitter, F# bloggers, Slack","Better domain modelling with records and unions, Conciseness of code (I can see more at a glance), Correctness (no nulls, it works first time), Great community, Having fun again, Learning functional programming in general, Speed of development, Functional but can be tweaked to get high performance","Algebraic types (inc discriminated unions and tuples), Immutability by default, No dependency cycles, Simple ""one liner"" type definitions for records and DUs, The ""piping"" idiom, Type inference, Type providers, Units of measure","Async workflows, Computation expressions","Links and instructions from fsharp.org, F# books, F# bloggers, Links posted on social media such as Twitter, Links mentioned in F# Weekly",I'm willing to learn advanced concepts but only if they are relevant and practical,"More material with short ""cookbook"" style information, More material with real-world examples and war stories",More examples tailored to common programming tasks in other languages eg db backed web pages.  F# gives impression it's only for complex math problems ,"Internal enterprise projects, Open source projects","Utilities and tools, Algorithm-heavy business applications (non-financial), Machine learning, Non-commercial web site/app, Data analysis/statistics, Text analysis/language parsing",SQL databases,"Windows, Linux",It's officially endorsed in my team for critical/production areas,"Domain modelling: making illegal states unrepresentable, Correctness: fewer bugs and less rework, More productive with fewer developers, Faster time to market, Efficiency/Performance, Better for solving complex problems","Training: They are worried about getting non-F# developers up to speed, Too Microsoft-centric: They think it is too closely linked to Microsoft, Existing code base compatibility",Publish more examples of companies using f# successfully ,Microsoft dotnet ecosystem and jargon,Lack of F# friendly libraries,"LLVM, Arduino!",No standard web stack. ,,,"Books or longer articles explaining full context, Reference works or documentation with API listings or short tutorials","Fsharp.data
Fsyacclex/lex
Fss
",
13/04/2016 04:46:52,10 or more years,Consulting,"No, I don't know much theory",Experienced,"C#, F#",3-4 years,,I use it for hobby or side projects,"Windows, Linux","Visual Studio 2015 or newer, VS Code (with Ionide)","Twitter, F# Weekly, F# bloggers, fsharp channel on Slack","Better domain modelling with records and unions, Conciseness of code (I can see more at a glance), Correctness (no nulls, it works first time), Great community, Having fun again, Learning functional programming in general, Speed of development, Functional but can be tweaked to get high performance","Algebraic types (inc discriminated unions and tuples), Computation expressions, Type inference, Type providers",,"F# books, F# bloggers, Links mentioned in F# Weekly, Videos (e.g. Community for F#), Reading F# code written by experts",I like theory -- I'm not afraid of monads and other abstractions,"More material with in-depth tutorials, More material with real-world examples and war stories",,,,,Windows,It's used unofficially,Correctness: fewer bugs and less rework,"Hiring: They worry about not being able to find F# developers, Training: They are worried about getting non-F# developers up to speed",,,,,,,,"Books or longer articles explaining full context, Recorded talks from a conference or user group, In-depth online courses (e.g. Pluralsight)",,
13/04/2016 05:30:41,10 or more years,Enterprise development,"Yes, I enjoy computer science and mathematics",Experienced,"C#, F#",1-2 years,,I use it at work or for other commercial uses,"Windows, Linux","Visual Studio 2015 or newer, Visual Studio 2012 or 2013","Twitter, F# Weekly, F# bloggers","Better domain modelling with records and unions, Conciseness of code (I can see more at a glance), Correctness (no nulls, it works first time), Having fun again, Learning functional programming in general","Active Patterns, Algebraic types (inc discriminated unions and tuples), Computation expressions, Easy integration with other .NET libraries, Immutability by default, Object-oriented features (inc. C# compatibility, conciseness), Simple ""one liner"" type definitions for records and DUs, The ""piping"" idiom","Agents (MailboxProcessor), Units of measure","MSDN, Links and instructions from fsharp.org, F# bloggers, Links posted on social media such as Twitter, Links mentioned in F# Weekly, Answers to Stack Overflow questions, Reading F# code written by experts",I'm willing to learn advanced concepts but only if they are relevant and practical,"More material with in-depth tutorials, More material with short ""cookbook"" style information, More material with real-world examples and war stories, More short ""live coding"" videos",,Internal enterprise projects,Utilities and tools,SQL databases,Windows,It's used unofficially,"Domain modelling: making illegal states unrepresentable, Correctness: fewer bugs and less rework",,,Don't understand the compiler errors,"Lack of F# friendly libraries, Lack of good wrappers for non-F# libraries, Working with C#-centric tooling, Less sophisticated tools for refactoring, etc.","None -- I'm happy with the CLR/Mono, Javascript",,,,"Books or longer articles explaining full context, Reference works or documentation with API listings or short tutorials, Recorded talks from a conference or user group, In-depth online courses (e.g. Pluralsight)",FAKE,
13/04/2016 06:46:46,10 or more years,Enterprise development,"Yes, I enjoy computer science and mathematics",Learner,"C#, Javascript",Less than a year,,I use it for hobby or side projects,Windows,Visual Studio 2015 or newer,"Twitter, F# Weekly","Better domain modelling with records and unions, Conciseness of code (I can see more at a glance), Having fun again","Algebraic types (inc discriminated unions and tuples), Computation expressions, Immutability by default, Simple ""one liner"" type definitions for records and DUs, The ""piping"" idiom, Type inference","Agents (MailboxProcessor), Static type constraints, Units of measure","F# books, F# bloggers, Links posted on social media such as Twitter, Links mentioned in F# Weekly, Videos (e.g. Community for F#)",I'm willing to learn advanced concepts but only if they are relevant and practical,"More material with in-depth tutorials, More material with real-world examples and war stories, More interactive tutorials (e.g. like the F# Koans)",,Not applicable. None of my F# code is used by other people,"Utilities and tools, Text analysis/language parsing",SQL databases,Windows,I don't use F# at work,,"No perceived benefits: They don't understand what benefits F# has over C# or other languages, Hiring: They worry about not being able to find F# developers, Training: They are worried about getting non-F# developers up to speed, No buy-in: There is lack of acceptance from other teams",,"Lack of good tutorials/documentation, Not enough real-world code to learn from","Not being part of the core .NET distribution, Lack of F# friendly libraries, Less sophisticated tools for refactoring, etc.",Javascript,,,,"Books or longer articles explaining full context, In-depth online courses (e.g. Pluralsight)",,
13/04/2016 06:56:57,10 or more years,Commercial software/web development,"Yes, I enjoy computer science and mathematics",Intermediate,C++,4 or more years,,I use it for hobby or side projects,Windows,Visual Studio 2012 or 2013,"Twitter, F# Weekly","Better domain modelling with records and unions, Conciseness of code (I can see more at a glance), Correctness (no nulls, it works first time), Speed of development","Algebraic types (inc discriminated unions and tuples), Async workflows, Computation expressions, Interactive development, Object expressions, Simple ""one liner"" type definitions for records and DUs, Units of measure",,"F# books, Videos (e.g. Community for F#)",I'm willing to learn advanced concepts but only if they are relevant and practical,,,"Not applicable. None of my F# code is used by other people, Internal Tools mainly for evaluation purposes or short tasks.","Utilities and tools, Data analysis/statistics",SQL databases,Windows,Small side tools with punctual usage.,"Correctness: fewer bugs and less rework, Easy concurrency with async and agents, Better for solving complex problems","Fad: They have concerns over long term language viability, Too Windows-centric: They have concerns over cross-platform issues, .Net is a huge dependency.",".Net is a huge dependency. If you could easily deploy small executable with limited dependency it would be lovely (I have check what CoreCLR will permit but it is on my todo list).
Things like Fable (or FunScript) could also help even if for slightly different reasons.",Installation process,"Not being part of the core .NET distribution, Cross-platform issues","Javascript, LLVM, Native",".Net dependency, even though sometime it can also be an advantage at the moment the future of the language seems pretty much linked to the future of .Net which remains very uncertain in some domains. ",,,"Books or longer articles explaining full context, Recorded talks from a conference or user group",,
13/04/2016 07:53:23,10 or more years,"Academic, research, or related","No, I don't know much theory",Intermediate,"C#, F#",1-2 years,,I use it at work or for other commercial uses,"Windows, Mac","Xamarin, Sublime Text","Twitter, F# Weekly, fsharp channel on Slack","Better domain modelling with records and unions, Great community, Having fun again, Learning functional programming in general","Algebraic types (inc discriminated unions and tuples), Backtick naming, Computation expressions, Interactive development, The ""piping"" idiom","Object-oriented compatibility, Quotations","F# books, F# bloggers, Links mentioned in F# Weekly, Personal mentoring, Videos (e.g. Community for F#)",I like theory -- I'm not afraid of monads and other abstractions,"More material with in-depth tutorials, More short ""live coding"" videos, More interactive tutorials (e.g. like the F# Koans)",List of topics that have been recognised as pain points and fssf  producing a set of material to tackle.,"Commercial products, Open source projects","Utilities and tools, Algorithm-heavy business applications (non-financial), Machine learning, Commercial web site/app, Non-commercial web site/app, Mobile apps, Research/Teaching, Data analysis/statistics, Text analysis/language parsing",NoSQL database,"Windows, Mac, Linux, iOS, Android, Azure, Amazon Web services",,"Domain modelling: making illegal states unrepresentable, Correctness: fewer bugs and less rework, Faster time to market, Easy concurrency with async and agents, Better for solving complex problems","No perceived benefits: They don't understand what benefits F# has over C# or other languages, Too Windows-centric: They have concerns over cross-platform issues, No buy-in: There is lack of acceptance from other teams",Promote taster consultancy workshops to get the corporates interested.,"Lack of good tutorials/documentation, Not enough real-world code to learn from",Not being part of the core .NET distribution,JVM,Not enough marketing from Microsoft.,,,"In-person: In-depth trainings (2 or 3 days), Books or longer articles explaining full context, In-depth online courses (e.g. Pluralsight)","Paket
Fake",
13/04/2016 08:04:25,10 or more years,Professional speaker,"No, I don't know much theory",Experienced,"C#, F#",4 or more years,,I use it at work or for other commercial uses,Windows,Visual Studio 2015 or newer,Twitter,"Better domain modelling with records and unions, Correctness (no nulls, it works first time), Composability","Active Patterns, Algebraic types (inc discriminated unions and tuples), Computation expressions, Easy integration with other .NET libraries, Immutability by default, Interactive development, No dependency cycles, Quotations, Simple ""one liner"" type definitions for records and DUs, The ""piping"" idiom, Type inference","Agents (MailboxProcessor), Type providers, Units of measure","F# books, F# bloggers, Tinkering. Learning Haskell",I like theory -- I'm not afraid of monads and other abstractions,"More material with real-world examples and war stories, More podcasts and other audio-only material",,"Open source projects, Lecture and article teaching materials","Mainstream business & enterprise applications, Non-commercial web site/app, Research/Teaching","NoSQL database, Event sourcing",Azure,It's officially endorsed in my team for critical/production areas,Correctness: fewer bugs and less rework,,"Keep talking about it benefits
Endorsements, real-world success stories",Better tooling. Better messaging from MSFT,"Not being part of the core .NET distribution, Working with C#-centric tooling, Less sophisticated tools for refactoring, etc.",None -- I'm happy with the CLR/Mono,The lack of endorsement and support from Microsoft itself.,,,"In-person: Attending a talks as part of a conference, Books or longer articles explaining full context","Visual F# Power Tools for Visual Studio
FsCheck
Unquote",
13/04/2016 08:25:34,5-10 years,Commercial software/web development,"No, I don't know much theory",Intermediate,"C#, F#, Python",1-2 years,,I use it for hobby or side projects,Windows,"Visual Studio 2015 or newer, MonoDevelop","Twitter, F# Weekly, Google+, HN, Reddit and other programming news sites, F# bloggers, fsharp channel on Slack","Conciseness of code (I can see more at a glance), Correctness (no nulls, it works first time), Great community, Having fun again, Learning functional programming in general, Functional but can be tweaked to get high performance","Algebraic types (inc discriminated unions and tuples), Easy integration with other .NET libraries, Immutability by default, No dependency cycles, Type providers, Units of measure","Active Patterns, Agents (MailboxProcessor), Async workflows, Interactive development, Static type constraints","Links and instructions from fsharp.org, F# books, F# bloggers, Links posted on social media such as Twitter, Links mentioned in F# Weekly, Answers to Stack Overflow questions, Videos (e.g. Community for F#), Reading F# code written by experts",I'm willing to learn advanced concepts but only if they are relevant and practical,"More material with in-depth tutorials, More material with real-world examples and war stories, More short ""live coding"" videos, More podcasts and other audio-only material","A better overview of the language would be nice, I find msdn a bit difficult to navigate when it comes to topics about F#. Some times you find code samples with syntax that you don't recognize, and it can be difficult to know if it is a language construct or some sort of custom operator. Took a long time before I managed to figure out the difference between 'T and ^T. 

The information is out there, but I had a hard time finding it.

Also, more examples are always welcome. The FSharp.Data (and friends) have really good examples.","Not applicable. None of my F# code is used by other people, Internal company tools (under the radar)","Utilities and tools, Mainstream business & enterprise applications, Non-commercial web site/app","SQL databases, Read-only data sources such as feeds","Windows, Mac, Linux, Azure",It's used unofficially,"Domain modelling: making illegal states unrepresentable, Correctness: fewer bugs and less rework, More productive with fewer developers, Faster time to market, Better for solving complex problems","No perceived benefits: They don't understand what benefits F# has over C# or other languages, Hiring: They worry about not being able to find F# developers, Money: They worry that good F# developers will cost too much, Training: They are worried about getting non-F# developers up to speed, No buy-in: There is lack of acceptance from other teams, No one is interrested in learning anything other than C#","Examples and demonstrations. If we would rewrite (or start to make new things) our current MVC site to F#, what would the benefits be over C#? Sticking to the current popular frameworks used in .Net shops, how does F# make things better / easier. 

","Installation process, Not enough real-world code to learn from","Not being part of the core .NET distribution, Working with C#-centric tooling, Less sophisticated tools for refactoring, etc., Difficulty in troubleshooting problems, Performance issues","LLVM, Native",Debugging. Very diffcult coming from C# (maybe because I try to debug as I debug C#),,,"In-person: Shorter workshops focused on a specific topic (1 day), In-person: Attending a talks as part of a conference, Reference works or documentation with API listings or short tutorials, Recorded talks from a conference or user group, In-depth online courses (e.g. Pluralsight)","FSharp.Data for the different data providers are awesome.
F# Power tools for Visual Studio.

",
13/04/2016 08:29:06,5-10 years,Enterprise development,"No, I don't know much theory",Intermediate,"C#, F#",2-3 years,,I use it at work or for other commercial uses,"Windows, Mac","Visual Studio 2015 or newer, Xamarin, VS Code (with Ionide)","Twitter, F# Weekly","Better domain modelling with records and unions, Conciseness of code (I can see more at a glance), Correctness (no nulls, it works first time), Great community, Having fun again, Learning functional programming in general, Speed of development","The ""piping"" idiom, Type inference","Computation expressions, Quotations, Static type constraints, Units of measure","F# books, F# bloggers, Structured training/workshops, Reading F# code written by experts",I'm willing to learn advanced concepts but only if they are relevant and practical,"More material with short ""cookbook"" style information, More material with real-world examples and war stories",,"Internal enterprise projects, Commercial products, Open source projects",Commercial web site/app,NoSQL database,"Windows, Azure",It's officially endorsed in my team for critical/production areas,"Correctness: fewer bugs and less rework, More productive with fewer developers",,,I can't use my knowledge from C# or other imperative languages,,JVM,,,,"In-person: Shorter workshops focused on a specific topic (1 day), In-depth online courses (e.g. Pluralsight)",,
13/04/2016 08:29:20,Less than a year,Enterprise development,"Yes, I enjoy computer science and mathematics",Learner,C#,Less than a year,,I use it at work or for other commercial uses,Windows,Visual Studio 2015 or newer,"Twitter, F# bloggers",Better domain modelling with records and unions,"Easy integration with other .NET libraries, Immutability by default, Simple ""one liner"" type definitions for records and DUs, Type inference",,"MSDN, F# bloggers, Personal mentoring, Videos (e.g. Community for F#), Reading F# code written by experts",I'm willing to learn advanced concepts but only if they are relevant and practical,"More material with in-depth tutorials, More material with real-world examples and war stories, More interactive tutorials (e.g. like the F# Koans)",,"Internal enterprise projects, Commercial products","Utilities and tools, Mainstream business & enterprise applications","SQL databases, NoSQL database, Data integration and EAI",Windows,It's officially endorsed in my team for critical/production areas,Domain modelling: making illegal states unrepresentable,Hiring: They worry about not being able to find F# developers,,I can't use my knowledge from C# or other imperative languages,"Lack of F# friendly libraries, Less sophisticated tools for refactoring, etc.",None -- I'm happy with the CLR/Mono,,,,"Books or longer articles explaining full context, Recorded talks from a conference or user group, In-depth online courses (e.g. Pluralsight)",Fscheck unquote,
13/04/2016 08:37:51,10 or more years,Enterprise development,"Yes, I enjoy computer science and mathematics",Intermediate,"C#, Javascript",2-3 years,,I use it for hobby or side projects,"Windows, Mac","Visual Studio 2015 or newer, Xamarin, VS Code (with Ionide)","F# Weekly, fsharp channel on Slack","Better domain modelling with records and unions, Conciseness of code (I can see more at a glance), Correctness (no nulls, it works first time), Great community, Having fun again, Learning functional programming in general, Speed of development","Algebraic types (inc discriminated unions and tuples), Immutability by default, The ""piping"" idiom, Type inference",Agents (MailboxProcessor),"Links and instructions from fsharp.org, F# books, F# bloggers, Links posted on social media such as Twitter, Links mentioned in F# Weekly, Answers to Stack Overflow questions, Videos (e.g. Community for F#), Reading F# code written by experts, fsharpforfunandprofit.com",I'm willing to learn advanced concepts but only if they are relevant and practical,"More material with in-depth tutorials, More material with short ""cookbook"" style information, More material with real-world examples and war stories, More short ""live coding"" videos, More interactive tutorials (e.g. like the F# Koans)",,Open source projects,"Utilities and tools, Algorithm-heavy business applications (non-financial)",Read-only data sources such as feeds,"Windows, Mac",I don't use F# at work,,"No perceived benefits: They don't understand what benefits F# has over C# or other languages, Hiring: They worry about not being able to find F# developers, Training: They are worried about getting non-F# developers up to speed",Get Microsoft to promote F# better,Not enough real-world code to learn from,"Less sophisticated tools for refactoring, etc.",None -- I'm happy with the CLR/Mono,The lack of official support from Microsoft. They seem to have a great language in F# but don't really promote it. F# is also left out of many starter templates.,,,"Books or longer articles explaining full context, Reference works or documentation with API listings or short tutorials, Recorded talks from a conference or user group, In-depth online courses (e.g. Pluralsight)","FAKE
Ionide-fsharp",
13/04/2016 09:07:14,10 or more years,Commercial software/web development,"Yes, I enjoy computer science and mathematics",Learner,"C#, Javascript, Python",Less than a year,,I use it at work or for other commercial uses,"Windows, Mac","Visual Studio 2015 or newer, VS Code (with Ionide)","Twitter, F# Weekly, F# bloggers, fsharp channel on Slack","Better domain modelling with records and unions, Having fun again, Learning functional programming in general","Active Patterns, Algebraic types (inc discriminated unions and tuples), Immutability by default, Interactive development, The ""piping"" idiom, Type inference, Type providers","Agents (MailboxProcessor), Units of measure","Links and instructions from fsharp.org, F# books, Videos (e.g. Community for F#)",I'm willing to learn advanced concepts but only if they are relevant and practical,"More material with real-world examples and war stories, More interactive tutorials (e.g. like the F# Koans)",,Data analysis ,"Commercial web site/app, Data analysis/statistics","SQL databases, NoSQL database, Analytics, Data integration and EAI","Windows, Mac",It's officially endorsed in my team for non-critical/non-production code,"Domain modelling: making illegal states unrepresentable, Correctness: fewer bugs and less rework, Better for solving complex problems",Training: They are worried about getting non-F# developers up to speed,,Unlearning c#,"Less sophisticated tools for refactoring, etc., Difficulty in troubleshooting problems",Native,,,,"In-person: Shorter workshops focused on a specific topic (1 day), In-person: Attending a talks as part of a conference, Recorded talks from a conference or user group, In-depth online courses (e.g. Pluralsight)",,
13/04/2016 09:49:27,10 or more years,Enterprise development,"No, I don't know much theory",Learner,"C#, F#, Javascript, Typescript",1-2 years,,I use it for hobby or side projects,"Windows, Linux","Visual Studio 2015 or newer, Atom (with Ionide)","Twitter, F# Weekly, F# bloggers","Conciseness of code (I can see more at a glance), Correctness (no nulls, it works first time), Having fun again, Learning functional programming in general, Speed of development","Active Patterns, Algebraic types (inc discriminated unions and tuples), Immutability by default, Interactive development, The ""piping"" idiom, Type inference, Type providers","Agents (MailboxProcessor), Quotations","F# books, F# bloggers, Links mentioned in F# Weekly, Videos (e.g. Community for F#), Reading F# code written by experts",I want to learn functional programming but I don't like academic jargon,"More material with short ""cookbook"" style information, More material with real-world examples and war stories, More short ""live coding"" videos",,"Internal enterprise projects, Open source projects, Not applicable. None of my F# code is used by other people","None - Just playing around, Utilities and tools, Non-commercial web site/app",Not doing data centric apps,"Windows, Linux",It's officially endorsed in my team for non-critical/non-production code,Faster time to market,"Fad: They have concerns over long term language viability, No buy-in: There is lack of acceptance from other teams",,I can't use my knowledge from C# or other imperative languages,"Less sophisticated tools for refactoring, etc.",None -- I'm happy with the CLR/Mono,,,,"In-person: In-depth trainings (2 or 3 days), In-person: Shorter workshops focused on a specific topic (1 day), In-person: Attending a talks as part of a conference, In-depth online courses (e.g. Pluralsight)",,
13/04/2016 09:49:38,10 or more years,Commercial software/web development,"No, I don't know much theory",Experienced,"C#, F#",3-4 years,,I use it at work or for other commercial uses,Windows,"Visual Studio 2015 or newer, VS Code (with Ionide)","Twitter, F# Weekly, F# bloggers, fsharp channel on Slack","Better domain modelling with records and unions, Conciseness of code (I can see more at a glance), Correctness (no nulls, it works first time), Great community, Having fun again, Learning functional programming in general, Functional but can be tweaked to get high performance","Active Patterns, Algebraic types (inc discriminated unions and tuples), Async workflows, Computation expressions, Immutability by default, No dependency cycles, Simple ""one liner"" type definitions for records and DUs, The ""piping"" idiom","Object-oriented compatibility, Quotations, Static type constraints, Units of measure","F# books, F# bloggers, Links posted on social media such as Twitter, Links mentioned in F# Weekly, Reading F# code written by experts",I want to learn functional programming but I don't like academic jargon,"More material with in-depth tutorials, More material with real-world examples and war stories",,"Internal enterprise projects, Open source projects","Utilities and tools, Algorithm-heavy business applications (non-financial)","SQL databases, NoSQL database, Data integration and EAI",Windows,It's officially endorsed in my team for critical/production areas,"Domain modelling: making illegal states unrepresentable, Correctness: fewer bugs and less rework, Easy concurrency with async and agents, Better for solving complex problems","No perceived benefits: They don't understand what benefits F# has over C# or other languages, Hiring: They worry about not being able to find F# developers, Fad: They have concerns over long term language viability, No buy-in: There is lack of acceptance from other teams",,Not enough real-world code to learn from,"Lack of F# friendly libraries, Lack of good wrappers for non-F# libraries",None -- I'm happy with the CLR/Mono,,,,Books or longer articles explaining full context,,
13/04/2016 09:59:30,10 or more years,Enterprise development,"No, I don't know much theory",Experienced,"C#, F#, Java, Javascript, Scala, Typescript",2-3 years,,I use it at work or for other commercial uses,Windows,"Visual Studio 2015 or newer, VS Code (with Ionide)","Twitter, F# Weekly, F# bloggers","Better domain modelling with records and unions, Conciseness of code (I can see more at a glance), Correctness (no nulls, it works first time), Having fun again, Speed of development","Active Patterns, Algebraic types (inc discriminated unions and tuples), Async workflows, Backtick naming, Easy integration with other .NET libraries, Immutability by default, Interactive development, No dependency cycles, printf that is type checked, Simple ""one liner"" type definitions for records and DUs, Type inference, Units of measure","Agents (MailboxProcessor), Quotations","MSDN, Links and instructions from fsharp.org, F# books, F# bloggers, Links posted on social media such as Twitter, Answers to Stack Overflow questions, Personal mentoring, Videos (e.g. Community for F#), Reading F# code written by experts",I like theory -- I'm not afraid of monads and other abstractions,,Improve tooling,"Internal enterprise projects, Open source projects","Custom development/specialist markets, Mainstream business & enterprise applications, Non-commercial web site/app, Text analysis/language parsing","SQL databases, Data integration and EAI",Windows,It's officially endorsed in my team for non-critical/non-production code,"Domain modelling: making illegal states unrepresentable, Correctness: fewer bugs and less rework, More productive with fewer developers, Faster time to market, Better for solving complex problems","Hiring: They worry about not being able to find F# developers, Money: They worry that good F# developers will cost too much, Training: They are worried about getting non-F# developers up to speed, No buy-in: There is lack of acceptance from other teams",We're doing more than *should* be needed already.,,"Working with C#-centric tooling, Less sophisticated tools for refactoring, etc.",Javascript,Feels second class in VS,,,"In-person: In-depth trainings (2 or 3 days), In-person: Shorter workshops focused on a specific topic (1 day), In-person: A talks at user groups, In-person: Attending a talks as part of a conference, Books or longer articles explaining full context, Reference works or documentation with API listings or short tutorials, Recorded talks from a conference or user group, In-depth online courses (e.g. Pluralsight)","FsUnit
Visual F# PowerTools
Canopy
WebSharper",
13/04/2016 10:19:10,2-5 years,Enterprise development,"Yes, I enjoy computer science and mathematics",Intermediate,"C#, F#, Haskell, Javascript, XSLT",2-3 years,,I use it for hobby or side projects,"Windows, Linux","Visual Studio 2015 or newer, VS Code (with Ionide)","Twitter, F# Weekly, HN, Reddit and other programming news sites, F# bloggers","Great community, Having fun again, Learning functional programming in general","Active Patterns, Algebraic types (inc discriminated unions and tuples), Async workflows, Backtick naming, Immutability by default, No dependency cycles, Simple ""one liner"" type definitions for records and DUs, Type inference, Type providers","Agents (MailboxProcessor), Interactive development, Object-oriented compatibility, Quotations, Static type constraints","F# bloggers, Links posted on social media such as Twitter, Videos (e.g. Community for F#), Reading F# code written by experts, Contributing to F# OSS projects",I like theory -- I'm not afraid of monads and other abstractions,"More material with short ""cookbook"" style information, More material with real-world examples and war stories, More short ""live coding"" videos",,"Internal enterprise projects, Open source projects",Utilities and tools,SQL databases,"Windows, Linux",It's officially endorsed in my team for non-critical/non-production code,"Correctness: fewer bugs and less rework, Easy concurrency with async and agents","No perceived benefits: They don't understand what benefits F# has over C# or other languages, Hiring: They worry about not being able to find F# developers, No buy-in: There is lack of acceptance from other teams","Boost ""F# success stories"" of other enterprise companies",Don't understand the compiler errors,"Not being part of the core .NET distribution, Working with C#-centric tooling",None -- I'm happy with the CLR/Mono,"People are not eager to learn it - think it's too difficult, don't see its advantages over C# etc",,,"In-person: Shorter workshops focused on a specific topic (1 day), In-person: Attending a talks as part of a conference, Recorded talks from a conference or user group, In-depth online courses (e.g. Pluralsight)","Paket, FAKE, Suave, FsCheck, Ionide",
13/04/2016 10:54:12,10 or more years,Enterprise development,"No, I don't know much theory",Experienced,"C#, F#",4 or more years,,I use it at work or for other commercial uses,"Windows, Mac","Visual Studio 2015 or newer, Xamarin, VS Code (with Ionide)","Twitter, F# Weekly","Correctness (no nulls, it works first time), Having fun again, Learning functional programming in general","Immutability by default, No dependency cycles, Type inference","Agents (MailboxProcessor), Units of measure","Links posted on social media such as Twitter, Answers to Stack Overflow questions",I like theory -- I'm not afraid of monads and other abstractions,,,"Internal enterprise projects, Open source projects","Utilities and tools, Algorithm-heavy business applications (non-financial), Games, Machine learning, Data analysis/statistics",SQL databases,"Windows, Mac",It's officially endorsed in my team for critical/production areas,"Domain modelling: making illegal states unrepresentable, Correctness: fewer bugs and less rework",Training: They are worried about getting non-F# developers up to speed,,,,"Javascript, LLVM",,,,,"Fake
Paket",
13/04/2016 10:55:40,10 or more years,Financial services or similar,"Yes, I enjoy computer science and mathematics",Experienced,"C, C#, F#, R",4 or more years,,I use it at work or for other commercial uses,Windows,Visual Studio 2015 or newer,"Twitter, F# Weekly, F# bloggers","Better domain modelling with records and unions, Conciseness of code (I can see more at a glance), Correctness (no nulls, it works first time), Speed of development","Algebraic types (inc discriminated unions and tuples), Computation expressions, Easy integration with other .NET libraries, Immutability by default, Simple ""one liner"" type definitions for records and DUs, The ""piping"" idiom, Type inference","Active Patterns, Object-oriented compatibility, Quotations, Units of measure","F# bloggers, Links posted on social media such as Twitter, Links mentioned in F# Weekly, Reading F# code written by experts, Papers on functional programming",I like theory -- I'm not afraid of monads and other abstractions,"More material with in-depth tutorials, More material with real-world examples and war stories",I think its actually easy to get going. It takes time for the benefits to really click completely. I've refactored code over the past few years multiple times. Making the ideas in papers like WhyFP.pdf public and easy would be great. F# examples of why Lazy + higher order lead to simple code. I love property based testing + making illegal state unrepresentable. Some of these in a single place would really get the message across.,Commercial products,Financial services,"SQL databases, Event sourcing",Windows,It's officially endorsed in my team for critical/production areas,"Domain modelling: making illegal states unrepresentable, Correctness: fewer bugs and less rework, More productive with fewer developers, Faster time to market, Efficiency/Performance, Easy concurrency with async and agents, Better for solving complex problems","Hiring: They worry about not being able to find F# developers, Money: They worry that good F# developers will cost too much, Training: They are worried about getting non-F# developers up to speed",As I said in the above box. A clear list of full examples why F# is better for modelling domains and leads to more simple and modular code. To fix this problem of people thinking you can do this sort of thing in C# and not fully understanding what can be done. I have code and may blog an F# example of richardson extrapolation like in the WhyFP.pdf. Its quite compelling compare to a C# version. anthony_lloyd@yahoo.com for more details. ,Not enough real-world code to learn from,The resistence to F#. Feel like I'm taking a risk job wise.,"None -- I'm happy with the CLR/Mono, Javascript, Native",Resistance from C# developers. We need to finally cross the chasm.,,,"Books or longer articles explaining full context, Reference works or documentation with API listings or short tutorials, Recorded talks from a conference or user group","FAKE
Paket
FSharpPowerTools
FsCheck
FSharp.Formatting",
13/04/2016 11:44:31,10 or more years,Enterprise development,"No, I don't know much theory",Intermediate,"C#, F#, Javascript, Visual Foxpro",1-2 years,,I use it at work or for other commercial uses,Windows,"Visual Studio 2015 or newer, VS Code (with Ionide)",Twitter,"Better domain modelling with records and unions, Having fun again, Learning functional programming in general","Easy integration with other .NET libraries, Interactive development, The ""piping"" idiom, Type providers","Active Patterns, Agents (MailboxProcessor), Async workflows, Computation expressions, Quotations, Units of measure","F# books, F# bloggers, Links mentioned in F# Weekly, Videos (e.g. Community for F#)",I'm willing to learn advanced concepts but only if they are relevant and practical,"More short ""live coding"" videos, More interactive tutorials (e.g. like the F# Koans)",,"Internal enterprise projects, Open source projects","Algorithm-heavy business applications (non-financial), Data analysis/statistics",SQL databases,"Windows, Linux",It's used unofficially,Better for solving complex problems,"No perceived benefits: They don't understand what benefits F# has over C# or other languages, Training: They are worried about getting non-F# developers up to speed, No buy-in: There is lack of acceptance from other teams",,Lack of good tutorials/documentation,"Less sophisticated tools for refactoring, etc.",None -- I'm happy with the CLR/Mono,,,,"Books or longer articles explaining full context, Reference works or documentation with API listings or short tutorials, Recorded talks from a conference or user group, In-depth online courses (e.g. Pluralsight)","FAKE
Fsharp.Data
FAKE",
13/04/2016 12:08:06,2-5 years,Enterprise development,"No, I don't know much theory",Intermediate,C#,Less than a year,,I use it for hobby or side projects,Windows,Visual Studio 2012 or 2013,"Twitter, F# Weekly","Better domain modelling with records and unions, Great community, Having fun again, Learning functional programming in general, Speed of development","Algebraic types (inc discriminated unions and tuples), Easy integration with other .NET libraries, Immutability by default, Interactive development, Object-oriented features (inc. C# compatibility, conciseness), Simple ""one liner"" type definitions for records and DUs, The ""piping"" idiom, Type providers","Active Patterns, Agents (MailboxProcessor), Computation expressions, Units of measure","Links posted on social media such as Twitter, Links mentioned in F# Weekly, Videos (e.g. Community for F#)",I'm willing to learn advanced concepts but only if they are relevant and practical,"More material with in-depth tutorials, More material with short ""cookbook"" style information, More material with real-world examples and war stories, More short ""live coding"" videos",If people can share their experience with using F# in their day job,Commercial products,Mainstream business & enterprise applications,Not doing data centric apps,Windows,It's officially endorsed in my team for non-critical/non-production code,"Domain modelling: making illegal states unrepresentable, Faster time to market, Better for solving complex problems","No perceived benefits: They don't understand what benefits F# has over C# or other languages, Hiring: They worry about not being able to find F# developers, Training: They are worried about getting non-F# developers up to speed",,"Lack of good tutorials/documentation, Not enough real-world code to learn from","Working with C#-centric tooling, Less sophisticated tools for refactoring, etc., Difficulty in troubleshooting problems","Javascript, LLVM",Developing tools: IDE etc.,,,"In-person: Shorter workshops focused on a specific topic (1 day), Books or longer articles explaining full context, Reference works or documentation with API listings or short tutorials, Recorded talks from a conference or user group, In-depth online courses (e.g. Pluralsight)","FSharp.Data
",
13/04/2016 12:08:33,10 or more years,Financial services or similar,"Yes, I enjoy computer science and mathematics",Learner,"C#, F#",Less than a year,,I use it for hobby or side projects,"Windows, Mac","Visual Studio 2015 or newer, Atom (with Ionide)","F# Weekly, F# bloggers","Correctness (no nulls, it works first time), Great community, Having fun again, Learning functional programming in general","Algebraic types (inc discriminated unions and tuples), Immutability by default, No dependency cycles, The ""piping"" idiom, Type inference","Active Patterns, Object expressions, Quotations, Units of measure","F# bloggers, Links posted on social media such as Twitter, Links mentioned in F# Weekly, Answers to Stack Overflow questions, Videos (e.g. Community for F#)",I'm willing to learn advanced concepts but only if they are relevant and practical,"More material with in-depth tutorials, More material with short ""cookbook"" style information, More material with real-world examples and war stories",,Not applicable. None of my F# code is used by other people,"Utilities and tools, Games, Mobile apps",Read-only data sources such as feeds,"Windows, Mac, iOS",It's used unofficially,,No perceived benefits: They don't understand what benefits F# has over C# or other languages,,,"Lack of F# friendly libraries, Less sophisticated tools for refactoring, etc.",None -- I'm happy with the CLR/Mono,,,,"Books or longer articles explaining full context, Recorded talks from a conference or user group","Ionide, paket, fake, fsharpx",
13/04/2016 12:37:12,10 or more years,Consulting,"Yes, I enjoy computer science and mathematics",Intermediate,"C#, F#, Python",2-3 years,,I use it at work or for other commercial uses,"Windows, Linux","Visual Studio 2015 or newer, Xamarin, Sublime Text, Atom (with Ionide)","Twitter, F# Weekly","Better domain modelling with records and unions, Having fun again","Agents (MailboxProcessor), Algebraic types (inc discriminated unions and tuples), Async workflows, Easy integration with other .NET libraries, Immutability by default, Interactive development, The ""piping"" idiom, Type inference, Type providers, Units of measure","Active Patterns, Quotations","Links and instructions from fsharp.org, F# books, F# bloggers, Links mentioned in F# Weekly, Videos (e.g. Community for F#), fsharpforfunandprofit.com",I'm willing to learn advanced concepts but only if they are relevant and practical,"More material with in-depth tutorials, More material with real-world examples and war stories","Not sure, it takes a lot of practice to learn. More real-world examples of composition, workflows, etc would be useful.","Internal enterprise projects, Commercial products","Financial services, Mainstream business & enterprise applications","SQL databases, Event sourcing, Analytics","Windows, Linux, Azure",It's officially endorsed in my team for critical/production areas,"Domain modelling: making illegal states unrepresentable, Correctness: fewer bugs and less rework, More productive with fewer developers, Faster time to market, Efficiency/Performance, Easy concurrency with async and agents, Better for solving complex problems","Training: They are worried about getting non-F# developers up to speed, Too Microsoft-centric: They think it is too closely linked to Microsoft, No buy-in: There is lack of acceptance from other teams, Team has too much invested in OOP",,"Not enough real-world code to learn from, More advanced tutorials and examples","Working with C#-centric tooling, Lack of UI tools",Native,Lack of UI tooling compared to C# / VB.,,,"In-person: In-depth trainings (2 or 3 days), Books or longer articles explaining full context, Recorded talks from a conference or user group, In-depth online courses (e.g. Pluralsight), fsharp.tv",,
13/04/2016 12:53:17,10 or more years,Enterprise development,"Yes, I enjoy computer science and mathematics",Learner,"C#, F#",Less than a year,,I use it at work or for other commercial uses,Windows,Visual Studio 2015 or newer,F# bloggers,"Better domain modelling with records and unions, Correctness (no nulls, it works first time), Having fun again, Learning functional programming in general","Algebraic types (inc discriminated unions and tuples), Computation expressions, Easy integration with other .NET libraries, Immutability by default, The ""piping"" idiom, Type inference","Agents (MailboxProcessor), Object expressions","F# books, F# bloggers, Answers to Stack Overflow questions",I like theory -- I'm not afraid of monads and other abstractions,More podcasts and other audio-only material,,Commercial products,Commercial web site/app,"SQL databases, NoSQL database",Windows,It's officially endorsed in my team for critical/production areas,Domain modelling: making illegal states unrepresentable,No buy-in: There is lack of acceptance from other teams,,Don't understand the compiler errors,"Not being part of the core .NET distribution, Less sophisticated tools for refactoring, etc.",None -- I'm happy with the CLR/Mono,Tooling and support in VS,,,Books or longer articles explaining full context,,
13/04/2016 13:00:00,10 or more years,Enterprise development,"No, I don't know much theory",Learner,"C#, F#, Javascript",Less than a year,,I use it for hobby or side projects,Windows,Visual Studio 2015 or newer,"Twitter, F# bloggers","Better domain modelling with records and unions, Conciseness of code (I can see more at a glance), Correctness (no nulls, it works first time), Great community, Having fun again, Learning functional programming in general, Speed of development","Algebraic types (inc discriminated unions and tuples), Immutability by default, Interactive development, The ""piping"" idiom",,"F# bloggers, Links posted on social media such as Twitter, Videos (e.g. Community for F#)",I'm willing to learn advanced concepts but only if they are relevant and practical,"More short ""live coding"" videos, More podcasts and other audio-only material",,,,,,It's used unofficially,"Correctness: fewer bugs and less rework, More productive with fewer developers",No perceived benefits: They don't understand what benefits F# has over C# or other languages,,,Working with C#-centric tooling,,,,,"Books or longer articles explaining full context, Recorded talks from a conference or user group, In-depth online courses (e.g. Pluralsight)",,
13/04/2016 13:29:54,5-10 years,Consulting,"No, I don't know much theory",Learner,"C#, Javascript",Less than two months,,I use it for hobby or side projects,Windows,"Visual Studio 2012 or 2013, VS Code (with Ionide)","Twitter, HN, Reddit and other programming news sites, F# bloggers","Conciseness of code (I can see more at a glance), Correctness (no nulls, it works first time), Having fun again, Learning functional programming in general, Speed of development","Active Patterns, Immutability by default, printf that is type checked, Simple ""one liner"" type definitions for records and DUs, The ""piping"" idiom","Agents (MailboxProcessor), Static type constraints, Units of measure","F# books, F# bloggers, Answers to Stack Overflow questions, Videos (e.g. Community for F#), Reading F# code written by experts",I'm willing to learn advanced concepts but only if they are relevant and practical,"More material with in-depth tutorials, More material with real-world examples and war stories, More short ""live coding"" videos","There are so many good tools and libraries out there, but the documentation is always lacking. Suave is a good example. Very powerful and complete, but anytime I want to try something new I need to google, stack overflow, or find existing code on github to see what I'm trying to accomplish with what's available in the library.",Not applicable. None of my F# code is used by other people,"Utilities and tools, Non-commercial web site/app",SQL databases,"Windows, Azure",It's used unofficially,"Domain modelling: making illegal states unrepresentable, Correctness: fewer bugs and less rework","No perceived benefits: They don't understand what benefits F# has over C# or other languages, Training: They are worried about getting non-F# developers up to speed, No buy-in: There is lack of acceptance from other teams",First class visual studio support. My peers don't like to think and are very stuck in VS + C#. Anything that can help that jump feel seamless would help.,Not enough real-world code to learn from,"Not being part of the core .NET distribution, Lack of good wrappers for non-F# libraries",None -- I'm happy with the CLR/Mono,,,,"Reference works or documentation with API listings or short tutorials, Recorded talks from a conference or user group",Chessie.ErrorHandling changed my life coming from C#,
13/04/2016 16:02:23,10 or more years,Commercial software/web development,"No, I don't know much theory",Experienced,"Haskell, Python, Rust",Less than a year,,Just tinkering,Linux,Emacs,"Twitter, HN, Reddit and other programming news sites","Better domain modelling with records and unions, Great community","Active Patterns, Type providers","Agents (MailboxProcessor), Integration with non-F# libraries, Object-oriented compatibility","Links and instructions from fsharp.org, Personal mentoring, Videos (e.g. Community for F#)",I like theory -- I'm not afraid of monads and other abstractions,"More material with in-depth tutorials, More podcasts and other audio-only material",,Not applicable. None of my F# code is used by other people,"None - Just playing around, Utilities and tools, Text analysis/language parsing",Not doing data centric apps,Linux,I don't use F# at work,"Domain modelling: making illegal states unrepresentable, Correctness: fewer bugs and less rework, Better for solving complex problems","Hiring: They worry about not being able to find F# developers, Training: They are worried about getting non-F# developers up to speed, Too Windows-centric: They have concerns over cross-platform issues",,Installation process,"Lack of F# friendly libraries, Cross-platform issues","LLVM, Native",,,,"In-person: In-depth trainings (2 or 3 days), In-person: A talks at user groups, Books or longer articles explaining full context",,
13/04/2016 16:08:28,10 or more years,Commercial software/web development,"No, I don't know much theory",Intermediate,"C#, F#, Go, Java, Javascript",1-2 years,"Operational reasons, currently working on IOT solutions, do not trust mono at scale and windows is not easily made compatible with modern operations. Have been using for supporting domain and prototypes. 

CoreCLR's native compilation + full static linking would make it an option.",I use it at work or for other commercial uses,"Mac, Linux",Emacs,"Twitter, fsharp channel on Slack","Better domain modelling with records and unions, Conciseness of code (I can see more at a glance), Correctness (no nulls, it works first time), Great community, Having fun again, Learning functional programming in general, Speed of development","Active Patterns, Algebraic types (inc discriminated unions and tuples), Computation expressions, Immutability by default, Interactive development, Simple ""one liner"" type definitions for records and DUs, Type inference, Type providers",Units of measure,"F# books, F# bloggers, Reading F# code written by experts, fsharpforfunandprofit",I'm willing to learn advanced concepts but only if they are relevant and practical,More material with real-world examples and war stories,,"Internal enterprise projects, Commercial products, Open source projects","Algorithm-heavy business applications (non-financial), Commercial web site/app, Research/Teaching, Text analysis/language parsing","NoSQL database, Read-only data sources such as feeds","Mac, Linux",It's officially endorsed in my team for critical/production areas,"Domain modelling: making illegal states unrepresentable, Correctness: fewer bugs and less rework, More productive with fewer developers, Easy concurrency with async and agents, Better for solving complex problems","Hiring: They worry about not being able to find F# developers, Training: They are worried about getting non-F# developers up to speed",,,Cross-platform issues,"LLVM, Native",,,,"In-person: Shorter workshops focused on a specific topic (1 day), Books or longer articles explaining full context","Paket
FSharp.Data
Chessie
",
13/04/2016 16:22:58,5-10 years,"Academic, research, or related","Yes, I enjoy computer science and mathematics",Intermediate,"C++, Scala",I was using F# but have stopped,,I use it for research or academic work,Linux,"Xamarin, MonoDevelop, Sublime Text","Twitter, F# Weekly","Better domain modelling with records and unions, Correctness (no nulls, it works first time), Having fun again, Learning functional programming in general, Speed of development","Agents (MailboxProcessor), Algebraic types (inc discriminated unions and tuples), Async workflows, Computation expressions, Quotations, Type inference, Type providers, Units of measure",Active Patterns,"F# books, Personal mentoring",I'm willing to learn advanced concepts but only if they are relevant and practical,"More material with short ""cookbook"" style information, More material with real-world examples and war stories",,Not applicable. None of my F# code is used by other people,"Algorithm-heavy business applications (non-financial), Games, Machine learning, Research/Teaching, Data analysis/statistics",Not doing data centric apps,"Windows, Linux",I don't use F# at work,"Correctness: fewer bugs and less rework, Easy concurrency with async and agents","Fad: They have concerns over long term language viability, Too Windows-centric: They have concerns over cross-platform issues, Too Microsoft-centric: They think it is too closely linked to Microsoft",,"Lack of good tutorials/documentation, Not enough real-world code to learn from","Not being part of the core .NET distribution, Lack of F# friendly libraries, Lack of good wrappers for non-F# libraries, Working with C#-centric tooling, Less sophisticated tools for refactoring, etc., Performance issues",JVM,,,,"In-person: Shorter workshops focused on a specific topic (1 day), Books or longer articles explaining full context, Reference works or documentation with API listings or short tutorials",,
13/04/2016 16:39:35,10 or more years,Commercial software/web development,"Yes, I enjoy computer science and mathematics",Experienced,"C, C#, C++, F#, Python",4 or more years,,I use it at work or for other commercial uses,Windows,Visual Studio 2015 or newer,"F# Weekly, HN, Reddit and other programming news sites, F# bloggers","Conciseness of code (I can see more at a glance), Correctness (no nulls, it works first time), Having fun again, Learning functional programming in general, Speed of development, Functional but can be tweaked to get high performance","Active Patterns, Agents (MailboxProcessor), Algebraic types (inc discriminated unions and tuples), Async workflows, Computation expressions, Easy integration with other .NET libraries, Immutability by default, Interactive development, Object-oriented features (inc. C# compatibility, conciseness), Quotations, Simple ""one liner"" type definitions for records and DUs, The ""piping"" idiom, Type inference","Type providers, Units of measure","MSDN, F# books, F# bloggers, Links mentioned in F# Weekly, Answers to Stack Overflow questions",I'm willing to learn advanced concepts but only if they are relevant and practical,"More material with in-depth tutorials, More material with short ""cookbook"" style information",,Open source projects,"Utilities and tools, Games, Machine learning",Not doing data centric apps,Windows,I don't use F# at work,,,,Don't understand the compiler errors,Performance issues,"LLVM, Native","Incomplete/inconsistent features. Quotations are not feature complete. Static type constraints do not take type extensions into account. User defined keywords in computation expressions have limitations.
","I don't know.
","Thanks for making this survey.
","Books or longer articles explaining full context, Reference works or documentation with API listings or short tutorials","FSharp PowerTools
",
13/04/2016 16:46:43,5-10 years,Enterprise development,"Yes, I enjoy computer science and mathematics",Intermediate,"C#, F#",1-2 years,Haven't stopped using it.,I use it for hobby or side projects,Windows,"Visual Studio 2015 or newer, Visual Studio 2012 or 2013","Twitter, F# Weekly, F# bloggers","Better domain modelling with records and unions, Having fun again, Learning functional programming in general","Algebraic types (inc discriminated unions and tuples), Backtick naming, Easy integration with other .NET libraries, Simple ""one liner"" type definitions for records and DUs, The ""piping"" idiom, Type inference","Agents (MailboxProcessor), Units of measure","F# bloggers, Links posted on social media such as Twitter, Links mentioned in F# Weekly, Personal mentoring, Reading F# code written by experts",I'm willing to learn advanced concepts but only if they are relevant and practical,"More material with short ""cookbook"" style information",,Not applicable. None of my F# code is used by other people,None - Just playing around,SQL databases,Windows,It's used unofficially,"Domain modelling: making illegal states unrepresentable, Correctness: fewer bugs and less rework","No perceived benefits: They don't understand what benefits F# has over C# or other languages, Hiring: They worry about not being able to find F# developers",,"Lack of good tutorials/documentation, Not enough real-world code to learn from, The types of tutorials I'm finding lie between intro to F# and then deep-end into computation expressions and monads. It'd be nice if there were some tutorials for something in between.","Not being part of the core .NET distribution, Less sophisticated tools for refactoring, etc., Dealing with tools that work with different versions of FSharp.Core (binding redirect all the things!)",Javascript,"Even though the community doesn't portray this, it feels like to really understand F# (or FP in general), you need to have a heavy theoretical background. This becomes a huge barrier of entry for new developers.",,,"In-person: In-depth trainings (2 or 3 days), Recorded talks from a conference or user group, In-depth online courses (e.g. Pluralsight)",,
13/04/2016 16:50:37,10 or more years,Commercial software/web development,"Yes, I enjoy computer science and mathematics",Intermediate,"C#, Java, Python",Haven't really used it yet,I put it aside while I have to complete other learning projects. I plan to go back to it afterwards.,Just tinkering,Mac,Xamarin,"Twitter, F# Weekly, F# bloggers",Great community,"Algebraic types (inc discriminated unions and tuples), The ""piping"" idiom, Type inference","Active Patterns, Agents (MailboxProcessor), Async workflows, Computation expressions, Integration with non-F# libraries, Object-oriented compatibility, Quotations, Static type constraints, Type providers, Units of measure",FSharpTV,I'm willing to learn advanced concepts but only if they are relevant and practical,"More podcasts and other audio-only material, More interactive tutorials (e.g. like the F# Koans)","If you're not already familier with the .NET ecosystem, especially if you're not on Windows, it can be daunting to understand what to install and how the pieces fit together. Things that stumped me at first: How to I launch an FSX? What's the difference between FS and FSX? What are those funny # directives? Should I use nuget or packet? (Apparent clash between windows F# user ecosystem and other platform ecosystem). Why is there Ionide support for both Atom and VSCode? When/why should I use one or the other? I initially had trouble getting Atom/Ionide to work well on my OSX. (the easiest story for me ended up being using Xamarin.)

While I was trying to figure out things in Atom on OSX: I have a FSX file. How do I download librairies? How do I refer them? Is there a project structure? Nuget looks like a Windows executable, no mention of other platform on its website. Mono strangeness: libraires have .DLL extension even on OSX!? Do I need a visual studio project? (Please say no) Oh, there's something called a DNX project, should/can I use that? Should I use Mono or .NET Core?

I guess these things are already clear for someone using C# on OSX or Linux, but they're a big hurdle when you come directly to F# (unless, of course, you're on Windows and you can just use Visual Studio 2015 with F# power tools)
",,"None - Just playing around, Utilities and tools",,,Little personal tools like code generation or transformation (of other languages). I would have typically used Python or Clojure for this.,,"No perceived benefits: They don't understand what benefits F# has over C# or other languages, Too Windows-centric: They have concerns over cross-platform issues, Too Microsoft-centric: They think it is too closely linked to Microsoft",,Installation process,,,,,I love that the language is evolving with care. I hope it doesn't end up being overly complicated (for me) like Scala (Implicit conversions by the Scala compiler is not something I appreciate; it makes it hard (for me) to reason about my code.),"Books or longer articles explaining full context, Recorded talks from a conference or user group, In-depth online courses (e.g. Pluralsight)",,
13/04/2016 18:11:42,10 or more years,Commercial software/web development,"Yes, I enjoy computer science and mathematics",Experienced,"C#, Clojure, F#, Haskell, Javascript, Swift, Typescript",Less than a year,,I use it at work or for other commercial uses,"Windows, Mac","Visual Studio 2015 or newer, VS Code (with Ionide)","Twitter, F# Weekly, HN, Reddit and other programming news sites, F# bloggers","Better domain modelling with records and unions, Conciseness of code (I can see more at a glance), Correctness (no nulls, it works first time), Having fun again, Speed of development, Functional but can be tweaked to get high performance","Algebraic types (inc discriminated unions and tuples), Async workflows, Backtick naming, Computation expressions, Easy integration with other .NET libraries, Immutability by default, Interactive development, The ""piping"" idiom, Type inference","Agents (MailboxProcessor), Units of measure","F# books, F# bloggers, Links posted on social media such as Twitter, Links mentioned in F# Weekly, Videos (e.g. Community for F#)",I'm willing to learn advanced concepts but only if they are relevant and practical,"More material with short ""cookbook"" style information, More material with real-world examples and war stories, More short ""live coding"" videos",,"Internal enterprise projects, Commercial products","Custom development/specialist markets, Commercial web site/app, Data analysis/statistics","SQL databases, Event sourcing",Windows,It's officially endorsed in my team for critical/production areas,"Domain modelling: making illegal states unrepresentable, Correctness: fewer bugs and less rework, Easy concurrency with async and agents","We are slowly ramping up, no signs yet of resistance/friction",,Not enough real-world code to learn from,"Not being part of the core .NET distribution, Working with C#-centric tooling, Less sophisticated tools for refactoring, etc., Difficulty in troubleshooting problems","Javascript, LLVM",,,"Thanks for doing this, I look forward to seeing the results.","In-person: In-depth trainings (2 or 3 days), In-person: Shorter workshops focused on a specific topic (1 day), In-person: A talks at user groups, In-person: Attending a talks as part of a conference, Books or longer articles explaining full context, Reference works or documentation with API listings or short tutorials, Recorded talks from a conference or user group, In-depth online courses (e.g. Pluralsight)","fscheck
fake
paket
",
13/04/2016 19:56:59,5-10 years,Commercial software/web development,"No, I don't know much theory",Intermediate,"C#, F#",1-2 years,,I use it at work or for other commercial uses,Windows,Visual Studio 2015 or newer,"Twitter, F# bloggers","Better domain modelling with records and unions, Correctness (no nulls, it works first time), Learning functional programming in general","Active Patterns, Algebraic types (inc discriminated unions and tuples), Backtick naming, Object-oriented features (inc. C# compatibility, conciseness), Simple ""one liner"" type definitions for records and DUs, The ""piping"" idiom, Type inference","Agents (MailboxProcessor), Interactive development","F# bloggers, Links posted on social media such as Twitter, Videos (e.g. Community for F#), Reading F# code written by experts",I like theory -- I'm not afraid of monads and other abstractions,More material with real-world examples and war stories,,Commercial products,Commercial web site/app,"SQL databases, NoSQL database",Windows,It's officially endorsed in my team for critical/production areas,"Domain modelling: making illegal states unrepresentable, Correctness: fewer bugs and less rework","No perceived benefits: They don't understand what benefits F# has over C# or other languages, Hiring: They worry about not being able to find F# developers, Training: They are worried about getting non-F# developers up to speed, No buy-in: There is lack of acceptance from other teams",,"Don't understand the compiler errors, Not enough real-world code to learn from","Lack of F# friendly libraries, Lack of good wrappers for non-F# libraries, Working with C#-centric tooling",None -- I'm happy with the CLR/Mono,,,,"In-person: Attending a talks as part of a conference, Reference works or documentation with API listings or short tutorials, Recorded talks from a conference or user group",,
13/04/2016 20:35:01,5-10 years,Enterprise development,"Yes, I enjoy computer science and mathematics",Learner,C#,Less than two months,,I use it for hobby or side projects,"Windows, Mac","Visual Studio 2015 or newer, Xamarin, VS Code (with Ionide)",Twitter,"Conciseness of code (I can see more at a glance), Correctness (no nulls, it works first time), Learning functional programming in general","Easy integration with other .NET libraries, Immutability by default, pattern matching","Active Patterns, Async workflows, Type providers","F# bloggers, Links posted on social media such as Twitter, Videos (e.g. Community for F#), Reading F# code written by experts",I'm willing to learn advanced concepts but only if they are relevant and practical,"More short ""live coding"" videos",,Open source projects,Utilities and tools,Not doing data centric apps,"Windows, Mac",I don't use F# at work,,"Hiring: They worry about not being able to find F# developers, Training: They are worried about getting non-F# developers up to speed",,Not enough real-world code to learn from,Working with C#-centric tooling,None -- I'm happy with the CLR/Mono,,,,"Books or longer articles explaining full context, Reference works or documentation with API listings or short tutorials, Recorded talks from a conference or user group",Zero29,
13/04/2016 20:53:41,10 or more years,Enterprise development,"Yes, I enjoy computer science and mathematics",Experienced,"C#, C++, F#, Java",4 or more years,,I use it at work or for other commercial uses,Windows,"Visual Studio 2015 or newer, Visual Studio 2012 or 2013, Visual Studio 2010 or older","Twitter, F# Weekly, F# bloggers","Better domain modelling with records and unions, Conciseness of code (I can see more at a glance), Correctness (no nulls, it works first time), Great community, Speed of development, Functional but can be tweaked to get high performance","Active Patterns, Algebraic types (inc discriminated unions and tuples), Computation expressions, Easy integration with other .NET libraries, Immutability by default, Interactive development, No dependency cycles, Simple ""one liner"" type definitions for records and DUs, Type inference, Type providers",Quotations,"MSDN, F# books, F# bloggers, Links mentioned in F# Weekly, Reading F# code written by experts",I like theory -- I'm not afraid of monads and other abstractions,"More material with in-depth tutorials, More material with real-world examples and war stories",,"Internal enterprise projects, Commercial products","Utilities and tools, Custom development/specialist markets, Financial services, Mainstream business & enterprise applications, Data analysis/statistics, Text analysis/language parsing","SQL databases, Read-only data sources such as feeds",Windows,It's officially endorsed in my team for critical/production areas,"Domain modelling: making illegal states unrepresentable, Correctness: fewer bugs and less rework, More productive with fewer developers, Faster time to market, Better for solving complex problems","No perceived benefits: They don't understand what benefits F# has over C# or other languages, Fad: They have concerns over long term language viability",,I can't use my knowledge from C# or other imperative languages,"Not being part of the core .NET distribution, Lack of F# friendly libraries, Lack of good wrappers for non-F# libraries, Working with C#-centric tooling","None -- I'm happy with the CLR/Mono, JVM, LLVM, Native","The lack of official support from Microsoft. 
General anti-MS attitude in core F# community.",,,"Books or longer articles explaining full context, Reference works or documentation with API listings or short tutorials",,
13/04/2016 20:49:56,10 or more years,Commercial software/web development,"No, I don't know much theory",Learner,"C#, C++, Javascript, Typescript",Haven't really used it yet,,Just tinkering,Windows,Visual Studio 2015 or newer,Twitter,"Having fun again, Learning functional programming in general",,,"Links and instructions from fsharp.org, Videos (e.g. Community for F#)",I'm willing to learn advanced concepts but only if they are relevant and practical,"More material with in-depth tutorials, More short ""live coding"" videos",,Not applicable. None of my F# code is used by other people,None - Just playing around,,,I don't use F# at work,,,,,,"Javascript, LLVM, Native",,,,"In-person: In-depth trainings (2 or 3 days), In-person: A talks at user groups, In-person: Attending a talks as part of a conference, Recorded talks from a conference or user group, In-depth online courses (e.g. Pluralsight)",,
13/04/2016 20:50:43,10 or more years,Open source development,"No, I don't know much theory",Intermediate,"C#, F#, Python, Rust, Swift",Less than a year,,I use it at work or for other commercial uses,"Windows, Mac, Linux","Xamarin, MonoDevelop, Emacs",Twitter,"Correctness (no nulls, it works first time), Great community, Having fun again, Learning functional programming in general","Active Patterns, Algebraic types (inc discriminated unions and tuples), Async workflows, Backtick naming, Computation expressions, Easy integration with other .NET libraries, Immutability by default, Interactive development, The ""piping"" idiom, Type inference, Type providers","Agents (MailboxProcessor), Static type constraints, Units of measure","F# bloggers, Links posted on social media such as Twitter, Answers to Stack Overflow questions",I'm willing to learn advanced concepts but only if they are relevant and practical,,,"Commercial products, Open source projects","Utilities and tools, Mobile apps",Not doing data centric apps,"Windows, Mac, Linux, iOS, Android",It's officially endorsed in my team for critical/production areas,"Correctness: fewer bugs and less rework, More productive with fewer developers, Easy concurrency with async and agents, Better for solving complex problems",No buy-in: There is lack of acceptance from other teams,,Not enough real-world code to learn from,"Working with C#-centric tooling, Less sophisticated tools for refactoring, etc.",Native,,,,,"Paket,
FAKE",
13/04/2016 20:58:10,10 or more years,Financial services or similar,"Yes, I enjoy computer science and mathematics",Experienced,"C#, Clojure, F#, Javascript, Python",Less than a year,,I use it at work or for other commercial uses,Mac,"Emacs, VS Code (with Ionide)",Twitter,Type inference,"Algebraic types (inc discriminated unions and tuples), Immutability by default, Simple ""one liner"" type definitions for records and DUs, Type inference","Agents (MailboxProcessor), Object-oriented compatibility, Static type constraints","F# books, Links posted on social media such as Twitter, Answers to Stack Overflow questions",,More material with in-depth tutorials,,Open source projects,"Utilities and tools, Financial services, Data analysis/statistics, Other","SQL databases, Read-only data sources such as feeds, Analytics, Data integration and EAI","Linux, Amazon Web services",It's officially endorsed in my team for critical/production areas,Type safe scripting with good IDE,Nothing. Everyone loves it.,,Not enough real-world code to learn from,"Less sophisticated tools for refactoring, etc.",None -- I'm happy with the CLR/Mono,"For larger apps, more guidance on idiomatic F# needed",,,Books or longer articles explaining full context,,
13/04/2016 20:59:07,10 or more years,Financial services or similar,"No, I don't know much theory",Experienced,"C#, Erlang, F#",4 or more years,,I use it at work or for other commercial uses,"Windows, Mac","Visual Studio 2015 or newer, Visual Studio 2012 or 2013, Xamarin, Atom (with Ionide), VS Code (with Ionide)","Twitter, F# Weekly, Google groups, F# bloggers, fsharp channel on Slack","Better domain modelling with records and unions, Conciseness of code (I can see more at a glance), Great community, Learning functional programming in general, Functional but can be tweaked to get high performance","Active Patterns, Algebraic types (inc discriminated unions and tuples), Computation expressions, Immutability by default, Interactive development, No dependency cycles, Type providers, Units of measure, Expressions rather than statements","Object-oriented compatibility, Static type constraints","F# bloggers, Links posted on social media such as Twitter, Links mentioned in F# Weekly, Answers to Stack Overflow questions, Personal mentoring, Structured training/workshops, Reading F# code written by experts",I'm willing to learn advanced concepts but only if they are relevant and practical,"More material with in-depth tutorials, More material with real-world examples and war stories, More interactive tutorials (e.g. like the F# Koans)",,"Internal enterprise projects, Open source projects","Utilities and tools, Algorithm-heavy business applications (non-financial), Custom development/specialist markets, Financial services, Machine learning, Mainstream business & enterprise applications, Non-commercial web site/app, Data analysis/statistics, Other","SQL databases, NoSQL database, Event sourcing, Read-only data sources such as feeds, Analytics","Windows, Mac",It's officially endorsed in my team for critical/production areas,"Domain modelling: making illegal states unrepresentable, Better for solving complex problems","No perceived benefits: They don't understand what benefits F# has over C# or other languages, Fad: They have concerns over long term language viability, No buy-in: There is lack of acceptance from other teams",,"Don't understand the compiler errors, Framing F# as ""Haskell .NET""","Lack of good wrappers for non-F# libraries, Working with C#-centric tooling","JVM, LLVM, Native",,,,"In-person: In-depth trainings (2 or 3 days), In-person: Shorter workshops focused on a specific topic (1 day), In-person: A talks at user groups, In-person: Attending a talks as part of a conference, Books or longer articles explaining full context, Reference works or documentation with API listings or short tutorials","FAKE
Paket
FSharp.Formatting
FsCheck
FsEye",
13/04/2016 21:13:59,10 or more years,Science or related,"Yes, I enjoy computer science and mathematics",Experienced,"C#, C++, F#, R",2-3 years,,I use it at work or for other commercial uses,Windows,"Visual Studio 2015 or newer, Atom (with Ionide)","Twitter, F# Weekly, F# bloggers, fsharp channel on Slack","Better domain modelling with records and unions, Conciseness of code (I can see more at a glance), Correctness (no nulls, it works first time), Great community, Speed of development","Algebraic types (inc discriminated unions and tuples), Easy integration with other .NET libraries, Immutability by default, Interactive development, No dependency cycles, Simple ""one liner"" type definitions for records and DUs, The ""piping"" idiom, Type inference, Type providers, Units of measure",,"MSDN, Links and instructions from fsharp.org, F# books, F# bloggers, Links posted on social media such as Twitter, Links mentioned in F# Weekly, Answers to Stack Overflow questions",I like theory -- I'm not afraid of monads and other abstractions,,,"Internal enterprise projects, Commercial products, Open source projects","Utilities and tools, Custom development/specialist markets, Machine learning, Research/Teaching, Data analysis/statistics","SQL databases, Event sourcing, Read-only data sources such as feeds","Windows, Linux, Android",It's officially endorsed in my team for critical/production areas,"Domain modelling: making illegal states unrepresentable, Correctness: fewer bugs and less rework, More productive with fewer developers, Easy concurrency with async and agents, Better for solving complex problems",Nothing. Everyone loves it.,,,Working with C#-centric tooling,"Javascript, Native",,,,"Books or longer articles explaining full context, Reference works or documentation with API listings or short tutorials, In-depth online courses (e.g. Pluralsight)","FsXaml
FSharp.Control.Reactive
FSharp.Data
FSharp.Charting
FsUnit
",
13/04/2016 21:21:08,1-2 years,Enterprise development,"Yes, I enjoy computer science and mathematics",Intermediate,"C#, F#",1-2 years,,I use it at work or for other commercial uses,Windows,"Visual Studio 2015 or newer, Visual Studio 2012 or 2013","Twitter, HN, Reddit and other programming news sites","Better domain modelling with records and unions, Conciseness of code (I can see more at a glance), Correctness (no nulls, it works first time)","Algebraic types (inc discriminated unions and tuples), Easy integration with other .NET libraries, Immutability by default, The ""piping"" idiom, Type inference, Type providers",,"MSDN, F# bloggers",I like theory -- I'm not afraid of monads and other abstractions,"More material with in-depth tutorials, More material with real-world examples and war stories, More interactive tutorials (e.g. like the F# Koans)",,Internal enterprise projects,Mainstream business & enterprise applications,NoSQL database,Windows,It's officially endorsed in my team for critical/production areas,"Domain modelling: making illegal states unrepresentable, Correctness: fewer bugs and less rework","No perceived benefits: They don't understand what benefits F# has over C# or other languages, Hiring: They worry about not being able to find F# developers, Fad: They have concerns over long term language viability",,"Don't understand the compiler errors, Not enough real-world code to learn from","Not being part of the core .NET distribution, Lack of F# friendly libraries, Lack of good wrappers for non-F# libraries, Working with C#-centric tooling","JVM, Javascript, Native",,,,"In-person: In-depth trainings (2 or 3 days), In-person: Shorter workshops focused on a specific topic (1 day), In-person: A talks at user groups, In-person: Attending a talks as part of a conference, Books or longer articles explaining full context, Reference works or documentation with API listings or short tutorials, Recorded talks from a conference or user group, In-depth online courses (e.g. Pluralsight)",,
13/04/2016 22:37:31,10 or more years,"Academic, research, or related","Yes, I enjoy computer science and mathematics",Intermediate,"C, C#, F#, Javascript",4 or more years,,I use it for research or academic work,"Windows, Linux",Visual Studio 2015 or newer,Twitter,"Better domain modelling with records and unions, Conciseness of code (I can see more at a glance), Correctness (no nulls, it works first time), Great community, Having fun again, Learning functional programming in general, Speed of development, Functional but can be tweaked to get high performance","Algebraic types (inc discriminated unions and tuples), Easy integration with other .NET libraries, Immutability by default, Interactive development, The ""piping"" idiom, Type inference","Object expressions, Quotations, Type providers","MSDN, F# books, F# bloggers, Links posted on social media such as Twitter, Answers to Stack Overflow questions, Reading F# code written by experts",I'm willing to learn advanced concepts but only if they are relevant and practical,"More material with in-depth tutorials, More material with short ""cookbook"" style information, More material with real-world examples and war stories",,"Commercial products, Open source projects, Not applicable. None of my F# code is used by other people","Utilities and tools, Non-commercial web site/app, Research/Teaching, Data analysis/statistics","SQL databases, NoSQL database","Windows, Linux",,"Domain modelling: making illegal states unrepresentable, Correctness: fewer bugs and less rework, More productive with fewer developers, Better for solving complex problems","No perceived benefits: They don't understand what benefits F# has over C# or other languages, Training: They are worried about getting non-F# developers up to speed, Fad: They have concerns over long term language viability, Too Windows-centric: They have concerns over cross-platform issues, Too Microsoft-centric: They think it is too closely linked to Microsoft, No buy-in: There is lack of acceptance from other teams",,,"Not being part of the core .NET distribution, Lack of F# friendly libraries, Lack of good wrappers for non-F# libraries","Javascript, Native",,,,"Books or longer articles explaining full context, Reference works or documentation with API listings or short tutorials",,
13/04/2016 22:59:09,5-10 years,Enterprise development,"No, I don't know much theory",Intermediate,"C#, F#",1-2 years,,I use it at work or for other commercial uses,Windows,"Visual Studio 2015 or newer, Visual Studio 2012 or 2013","Twitter, F# Weekly, F# bloggers, fsharp channel on Slack","Better domain modelling with records and unions, Conciseness of code (I can see more at a glance), Correctness (no nulls, it works first time), Great community, Having fun again, Speed of development","Algebraic types (inc discriminated unions and tuples), Async workflows, Easy integration with other .NET libraries, Immutability by default, Simple ""one liner"" type definitions for records and DUs, The ""piping"" idiom, Type inference, Type providers, Units of measure","Active Patterns, Object expressions, Quotations, Static type constraints","F# bloggers, Links posted on social media such as Twitter, Links mentioned in F# Weekly, Videos (e.g. Community for F#), fsharpforfunandprofit.com",I want to learn functional programming but I don't like academic jargon,"More material with in-depth tutorials, More material with short ""cookbook"" style information, More material with real-world examples and war stories, More short ""live coding"" videos",,Internal enterprise projects,"Financial services, Commercial web site/app",SQL databases,Windows,It's officially endorsed in my team for critical/production areas,"Domain modelling: making illegal states unrepresentable, Correctness: fewer bugs and less rework, More productive with fewer developers, Faster time to market, Efficiency/Performance, Easy concurrency with async and agents, Better for solving complex problems","No perceived benefits: They don't understand what benefits F# has over C# or other languages, Hiring: They worry about not being able to find F# developers, Training: They are worried about getting non-F# developers up to speed",,"Lack of good tutorials/documentation, Don't understand the compiler errors","Working with C#-centric tooling, Less sophisticated tools for refactoring, etc.","None -- I'm happy with the CLR/Mono, JVM",,,,"Books or longer articles explaining full context, Recorded talks from a conference or user group, In-depth online courses (e.g. Pluralsight)","Paket
Fake
FSharp Typeproviders for Json, Html, Sql",
13/04/2016 23:06:03,10 or more years,Commercial software/web development,"No, I don't know much theory",Intermediate,"C#, F#, Javascript",1-2 years,,I use it for hobby or side projects,Windows,"Visual Studio 2015 or newer, Visual Studio 2012 or 2013, Sublime Text, VS Code (with Ionide)","Twitter, F# Weekly, F# bloggers","Better domain modelling with records and unions, Conciseness of code (I can see more at a glance), Correctness (no nulls, it works first time), Having fun again, Learning functional programming in general, Speed of development, Functional but can be tweaked to get high performance","Active Patterns, Algebraic types (inc discriminated unions and tuples), Async workflows, Backtick naming, Easy integration with other .NET libraries, Immutability by default, Interactive development, Simple ""one liner"" type definitions for records and DUs, The ""piping"" idiom, Type inference, Type providers, Units of measure",Static type constraints,"Links and instructions from fsharp.org, F# books, F# bloggers, Links posted on social media such as Twitter, Links mentioned in F# Weekly, Videos (e.g. Community for F#), Pluralsight",I'm willing to learn advanced concepts but only if they are relevant and practical,"More material with in-depth tutorials, More material with short ""cookbook"" style information, More material with real-world examples and war stories",,Internal enterprise projects,"Algorithm-heavy business applications (non-financial), Mainstream business & enterprise applications, Commercial web site/app, Non-commercial web site/app",SQL databases,Windows,It's used unofficially,"Domain modelling: making illegal states unrepresentable, Correctness: fewer bugs and less rework, More productive with fewer developers, Faster time to market, Efficiency/Performance, Easy concurrency with async and agents, Better for solving complex problems","No perceived benefits: They don't understand what benefits F# has over C# or other languages, Fad: They have concerns over long term language viability",,Not enough real-world code to learn from,Cross-platform issues,Native,,,,"Books or longer articles explaining full context, Reference works or documentation with API listings or short tutorials, Recorded talks from a conference or user group, In-depth online courses (e.g. Pluralsight)","Fake
Canopy",
13/04/2016 23:10:42,5-10 years,Enterprise development,"Yes, I enjoy computer science and mathematics",Experienced,C#,4 or more years,,Just tinkering,Windows,Visual Studio 2015 or newer,"Twitter, HN, Reddit and other programming news sites","Better domain modelling with records and unions, Conciseness of code (I can see more at a glance), Correctness (no nulls, it works first time), Great community, Having fun again, Functional but can be tweaked to get high performance","Algebraic types (inc discriminated unions and tuples), Interactive development, printf that is type checked, The ""piping"" idiom, Type inference, Type providers",Active Patterns,"MSDN, F# bloggers, Try F#",I like theory -- I'm not afraid of monads and other abstractions,"More material with short ""cookbook"" style information, More material with real-world examples and war stories, More interactive tutorials (e.g. like the F# Koans)",If it or functional concepts were taught earlier in universities.  It can be tough to go from object oriented to functional.  Even teaching the more functional aspects of C# can help.,Not applicable. None of my F# code is used by other people,None - Just playing around,SQL databases,,I don't use F# at work,,"No perceived benefits: They don't understand what benefits F# has over C# or other languages, Training: They are worried about getting non-F# developers up to speed",,,,,That files and functions must be in a certain order.  Maybe have this behavior be the default but have the option to opt out.,,,"Reference works or documentation with API listings or short tutorials, In-depth online courses (e.g. Pluralsight)",,
13/04/2016 23:32:42,5-10 years,Enterprise development,"Yes, I enjoy computer science and mathematics",Intermediate,"C#, F#",Less than a year,,I use it at work or for other commercial uses,Windows,"Visual Studio 2015 or newer, Xamarin, VS Code (with Ionide)",F# Weekly,"Better domain modelling with records and unions, Conciseness of code (I can see more at a glance), Correctness (no nulls, it works first time), Having fun again, Learning functional programming in general, Speed of development","Immutability by default, Interactive development, No dependency cycles, Type inference, Type providers, Units of measure",Object expressions,"Links and instructions from fsharp.org, F# bloggers, Links mentioned in F# Weekly, Fsharpforfunandprofit.org",I like theory -- I'm not afraid of monads and other abstractions,"More material with in-depth tutorials, More material with short ""cookbook"" style information, More material with real-world examples and war stories, More short ""live coding"" videos, More podcasts and other audio-only material, More interactive tutorials (e.g. like the F# Koans)","Best practices, do's and don'ts, Functional Programming Guide",Internal enterprise projects,"Utilities and tools, Algorithm-heavy business applications (non-financial), Mainstream business & enterprise applications, Mobile apps","SQL databases, NoSQL database, Event sourcing",Windows,It's officially endorsed in my team for critical/production areas,"Domain modelling: making illegal states unrepresentable, Correctness: fewer bugs and less rework, Faster time to market, Better for solving complex problems",No buy-in: There is lack of acceptance from other teams,"Show more mid size company success stories. 

Studies/facts to prove the benefits im management speak.

Enterprise support

Professional support if stack overflow questions are tagged with f#",Understand what code is good/ideomatic/clean/functional code,"Less sophisticated tools for refactoring, etc., Difficulty in troubleshooting problems",None -- I'm happy with the CLR/Mono,"Not mainstream, not known by management & HR. Let CIO know why it is better not just developers. We know it and push it. But if CIOs pull cause they know the value...",,Thanks form helping to make F# even better,"Reference works or documentation with API listings or short tutorials, Recorded talks from a conference or user group","Fake,Paket,ProjectScaffold",
14/04/2016 00:03:29,10 or more years,Enterprise development,"Yes, I enjoy computer science and mathematics",Intermediate,"C#, F#",1-2 years,,I use it at work or for other commercial uses,"Windows, Linux","Visual Studio 2015 or newer, VS Code (with Ionide)","Twitter, F# Weekly, F# bloggers, fsharp channel on Slack","Better domain modelling with records and unions, Correctness (no nulls, it works first time), Speed of development","Algebraic types (inc discriminated unions and tuples), Backtick naming, Computation expressions, Immutability by default, No dependency cycles, Type inference","Agents (MailboxProcessor), Object-oriented compatibility, Units of measure","MSDN, F# bloggers, Links mentioned in F# Weekly, Videos (e.g. Community for F#)",I'm willing to learn advanced concepts but only if they are relevant and practical,"More material with in-depth tutorials, More material with real-world examples and war stories",,"Internal enterprise projects, Open source projects",Mainstream business & enterprise applications,"SQL databases, NoSQL database, Event sourcing, Read-only data sources such as feeds","Windows, Linux, Amazon Web services",It's officially endorsed in my team for critical/production areas,"Domain modelling: making illegal states unrepresentable, Correctness: fewer bugs and less rework, Better for solving complex problems","Training: They are worried about getting non-F# developers up to speed, No buy-in: There is lack of acceptance from other teams",,"Lack of good tutorials/documentation, Not enough real-world code to learn from","Working with C#-centric tooling, NuGet3 project.json","Javascript, LLVM, Native",,,,"In-person: Shorter workshops focused on a specific topic (1 day), In-person: Attending a talks as part of a conference, Reference works or documentation with API listings or short tutorials, Recorded talks from a conference or user group","Iodide, FAKE, Paket, Chiron, Hopac ",
14/04/2016 00:07:32,10 or more years,Data or analytics related,"No, I don't know much theory",Intermediate,"C, C#, C++, F#",3-4 years,,I use it at work or for other commercial uses,Windows,Visual Studio 2015 or newer,"Twitter, F# Weekly, F# bloggers, fsharp channel on Slack","Correctness (no nulls, it works first time), Great community, Having fun again, Speed of development, no mutable state means understandable code","Algebraic types (inc discriminated unions and tuples), Easy integration with other .NET libraries, Immutability by default, The ""piping"" idiom, Type inference, Type providers, Units of measure","Agents (MailboxProcessor), Async workflows","F# books, F# bloggers",I'm willing to learn advanced concepts but only if they are relevant and practical,"More material with short ""cookbook"" style information, More material with real-world examples and war stories, More short ""live coding"" videos",Fewer custom operators in examples,Commercial products,"Utilities and tools, Machine learning, Data analysis/statistics","SQL databases, Event sourcing",Windows,It's officially endorsed in my team for critical/production areas,"Correctness: fewer bugs and less rework, More productive with fewer developers, Faster time to market",Nothing. Everyone loves it.,,,"Working with C#-centric tooling, Difficulty in troubleshooting problems","LLVM, Native, uwp",Slowing language development,,,"Books or longer articles explaining full context, Reference works or documentation with API listings or short tutorials, Recorded talks from a conference or user group, In-depth online courses (e.g. Pluralsight)","Vfspt
Fsunit
Fsharp.control.reactive
Fsxaml
Argu
",
14/04/2016 00:12:33,10 or more years,Commercial software/web development,"Yes, I enjoy computer science and mathematics",Experienced,"C#, F#, Javascript, Typescript",2-3 years,,I use it at work or for other commercial uses,Windows,"Visual Studio 2015 or newer, Emacs, VS Code (with Ionide)","Twitter, F# Weekly, HN, Reddit and other programming news sites, F# bloggers","Better domain modelling with records and unions, Correctness (no nulls, it works first time), Great community, Learning functional programming in general","Active Patterns, Algebraic types (inc discriminated unions and tuples), Backtick naming, Computation expressions, Easy integration with other .NET libraries, Immutability by default, No dependency cycles, Object-oriented features (inc. C# compatibility, conciseness), printf that is type checked, Simple ""one liner"" type definitions for records and DUs, The ""piping"" idiom, Type inference, Type providers","Quotations, Units of measure","Links and instructions from fsharp.org, F# bloggers, Links mentioned in F# Weekly, Answers to Stack Overflow questions, Videos (e.g. Community for F#)",I like theory -- I'm not afraid of monads and other abstractions,"More material with in-depth tutorials, More material with short ""cookbook"" style information, More material with real-world examples and war stories, More short ""live coding"" videos",,"Internal enterprise projects, Commercial products","Utilities and tools, Algorithm-heavy business applications (non-financial), Custom development/specialist markets, Mainstream business & enterprise applications, Commercial web site/app, Non-commercial web site/app, Data analysis/statistics","SQL databases, Read-only data sources such as feeds",Windows,It's officially endorsed in my team for critical/production areas,"Domain modelling: making illegal states unrepresentable, Correctness: fewer bugs and less rework, Better for solving complex problems","Hiring: They worry about not being able to find F# developers, Fad: They have concerns over long term language viability",,Not enough real-world code to learn from,"Not being part of the core .NET distribution, Working with C#-centric tooling, Less sophisticated tools for refactoring, etc., Tooling: could use more Resharper like functions.","Javascript, LLVM, Native",,,,"Books or longer articles explaining full context, Reference works or documentation with API listings or short tutorials, Recorded talks from a conference or user group, In-depth online courses (e.g. Pluralsight)",F# Power Tools,
14/04/2016 00:19:04,10 or more years,Enterprise development,"Yes, I enjoy computer science and mathematics",Expert,"F#, Typescript, SQL",4 or more years,,I use it at work or for other commercial uses,Windows,Visual Studio 2015 or newer,"Twitter, F# Weekly, F# bloggers, Slack","Better domain modelling with records and unions, Conciseness of code (I can see more at a glance), Correctness (no nulls, it works first time), Great community, Having fun again, Learning functional programming in general, Speed of development","Algebraic types (inc discriminated unions and tuples), Easy integration with other .NET libraries, Immutability by default, Interactive development, No dependency cycles, The ""piping"" idiom, Type inference, Type providers",Agents (MailboxProcessor),"F# bloggers, Links mentioned in F# Weekly, Reading F# code written by experts",I like theory -- I'm not afraid of monads and other abstractions,,,"Internal enterprise projects, Commercial products, Open source projects","Utilities and tools, Custom development/specialist markets, Mainstream business & enterprise applications, Commercial web site/app","SQL databases, NoSQL database",Windows,It's officially endorsed in my team for critical/production areas,"Domain modelling: making illegal states unrepresentable, Correctness: fewer bugs and less rework, More productive with fewer developers, Faster time to market, Better for solving complex problems",Nothing. Everyone loves it.,,Installation process,,"LLVM, Native",,,,,"FSharp.Data.SqlClient Type Provider
Argu
FsPickler
Fake
FSharp.Azure.Storage ",
14/04/2016 01:34:52,10 or more years,Commercial software/web development,"No, I don't know much theory",Experienced,"C#, F#",4 or more years,,I use it at work or for other commercial uses,Windows,"Visual Studio 2015 or newer, Xamarin","Twitter, F# Weekly","Better domain modelling with records and unions, Conciseness of code (I can see more at a glance), Correctness (no nulls, it works first time), Great community, Having fun again, Learning functional programming in general, Speed of development, Functional but can be tweaked to get high performance, type inference!","Active Patterns, Agents (MailboxProcessor), Algebraic types (inc discriminated unions and tuples), Async workflows, Backtick naming, Computation expressions, Easy integration with other .NET libraries, Immutability by default, Interactive development, No dependency cycles, Object expressions, Object-oriented features (inc. C# compatibility, conciseness), printf that is type checked, Simple ""one liner"" type definitions for records and DUs, The ""piping"" idiom, Type inference, Type providers, Units of measure",Quotations,"F# books, F# bloggers, Links posted on social media such as Twitter, Reading F# code written by experts",I like theory -- I'm not afraid of monads and other abstractions,"More material with in-depth tutorials, More material with real-world examples and war stories, More interactive tutorials (e.g. like the F# Koans)","lots of sample with practical showcase.
article or book which explains about that sample.",Commercial products,"Utilities and tools, Financial services, Mobile apps","SQL databases, NoSQL database","Windows, iOS, Android, Azure",It's officially endorsed in my team for critical/production areas,"Domain modelling: making illegal states unrepresentable, Correctness: fewer bugs and less rework, More productive with fewer developers, Faster time to market, Easy concurrency with async and agents, Better for solving complex problems","No perceived benefits: They don't understand what benefits F# has over C# or other languages, Training: They are worried about getting non-F# developers up to speed","spread F#'s benefit with good article about practical case.
making good library like FParsec.
","Lack of good tutorials/documentation, Not enough real-world code to learn from","Not being part of the core .NET distribution, Working with C#-centric tooling, Less sophisticated tools for refactoring, etc., utilization F# from C# is annoying,because it doesn't have type inference.","Javascript, Native","no type class
no macro
insufficient tool support. especially in Debug like watch windows doesn't support F# syntax.",,Thanks your F# love.,"In-person: Shorter workshops focused on a specific topic (1 day), In-person: A talks at user groups, Books or longer articles explaining full context, Reference works or documentation with API listings or short tutorials, Recorded talks from a conference or user group, In-depth online courses (e.g. Pluralsight)","visual F# power tools
websharper",
14/04/2016 01:51:41,10 or more years,software architect,"Yes, I enjoy computer science and mathematics",Experienced,"Clojure, F#, Java, Javascript, Python, R",1-2 years,,I use it at work or for other commercial uses,"Mac, Linux",Vim,"Twitter, F# Weekly, HN, Reddit and other programming news sites, F# bloggers","Conciseness of code (I can see more at a glance), Correctness (no nulls, it works first time), Great community, Having fun again, awesomeness of syntax","Active Patterns, Algebraic types (inc discriminated unions and tuples), Immutability by default, Interactive development, No dependency cycles, printf that is type checked, Simple ""one liner"" type definitions for records and DUs, The ""piping"" idiom, Type inference, Type providers, richness of collections libraries",Integration with non-F# libraries,"MSDN, Links and instructions from fsharp.org, F# books, F# bloggers, Links posted on social media such as Twitter, Links mentioned in F# Weekly, Answers to Stack Overflow questions, Structured training/workshops, Videos (e.g. Community for F#), Reading F# code written by experts, fsharp conf",I like theory -- I'm not afraid of monads and other abstractions,"More material with in-depth tutorials, More material with real-world examples and war stories, More short ""live coding"" videos, More podcasts and other audio-only material, More interactive tutorials (e.g. like the F# Koans), more Linux","more courses like those one on udemy. easier tool chain setup for Linux, more current documentation for oss tool setup.","Internal enterprise projects, fun projects, data crunching for work and fun.","Algorithm-heavy business applications (non-financial), Machine learning, Mainstream business & enterprise applications, Non-commercial web site/app, Data analysis/statistics, Text analysis/language parsing","NoSQL database, Read-only data sources such as feeds","Mac, Linux",It's used unofficially,"More productive with fewer developers, Faster time to market, Efficiency/Performance, Better for solving complex problems, easier to build up incremental solutions. higher level functions are productivity busters.","Hiring: They worry about not being able to find F# developers, Too Windows-centric: They have concerns over cross-platform issues, Too Microsoft-centric: They think it is too closely linked to Microsoft, haven't pushed it. we're a giant Java shop. it's a secret weapon.","more Linux adoption and tooling. commercial support for runtime on Linux. more marketing, user groups community visibility.","Installation process, alternative tool chains and OSes seem like second class citizens, although this has improved greatly. this means more time compiling fsharp or debugging tools.","Not being part of the core .NET distribution, Cross-platform issues, other platform interop. many big data platforms are Java based.","JVM, Javascript, LLVM, Native","some new comers may interpret some of the community's  enthusiasm for Microsoft as narrow mindedness. also, alternative platforms and tooling, but it's getting better!

more drivers/interfaces to non Microsoft tools and platforms.",," Fsharp conf was one of my favorite conferences of all time, and I've been to some great ones. fsharp foundation is a fabulous starting point, just needs some additional activities and outreach.","In-person: A talks at user groups, In-person: Attending a talks as part of a conference, Books or longer articles explaining full context, Reference works or documentation with API listings or short tutorials, In-depth online courses (e.g. Pluralsight), fsharp conf","vim-fsharp, mono, fake, yeoman fsharp generator, ionide.",
14/04/2016 04:26:15,10 or more years,Enterprise development,"No, I don't know much theory",Intermediate,"C#, F#, Python",3-4 years,,I use it at work or for other commercial uses,"Windows, Mac, Linux","Visual Studio 2015 or newer, Xamarin, Emacs, Atom (with Ionide), VS Code (with Ionide)","Twitter, F# Weekly, F# bloggers, fsharp channel on Slack","Better domain modelling with records and unions, Conciseness of code (I can see more at a glance), Correctness (no nulls, it works first time), Great community, Having fun again, Learning functional programming in general, Speed of development, Functional but can be tweaked to get high performance","Async workflows, Computation expressions, Easy integration with other .NET libraries, Immutability by default, Interactive development, No dependency cycles, printf that is type checked, The ""piping"" idiom, Type inference, Type providers","Active Patterns, Agents (MailboxProcessor), Object expressions, Quotations, Units of measure","MSDN, F# bloggers, Links posted on social media such as Twitter, Links mentioned in F# Weekly, Videos (e.g. Community for F#)",I'm willing to learn advanced concepts but only if they are relevant and practical,"More material with in-depth tutorials, More material with real-world examples and war stories, More short ""live coding"" videos, More podcasts and other audio-only material",,Internal enterprise projects,"Utilities and tools, Financial services, Commercial web site/app, Mobile apps",SQL databases,"Linux, iOS, Android, Azure, Other",It's officially endorsed in my team for critical/production areas,"Easy concurrency with async and agents, Better for solving complex problems","No perceived benefits: They don't understand what benefits F# has over C# or other languages, Training: They are worried about getting non-F# developers up to speed, No buy-in: There is lack of acceptance from other teams",Create valuable language features that C# does not have and cannot copy.  Create more compelling libraries relative to C#.,,"Not being part of the core .NET distribution, Working with C#-centric tooling","Javascript, Native",The language seems to be stagnating a bit.,,,"Books or longer articles explaining full context, Reference works or documentation with API listings or short tutorials, Recorded talks from a conference or user group","Suave, FsSql, Hopac, Fable, Ionide",
14/04/2016 05:32:34,5-10 years,Commercial software/web development,"Yes, I enjoy computer science and mathematics",Experienced,"C#, F#, Go, Javascript",2-3 years,,I use it at work or for other commercial uses,"Windows, Mac",Atom (with Ionide),"Twitter, F# Weekly","Better domain modelling with records and unions, Conciseness of code (I can see more at a glance), Correctness (no nulls, it works first time), Great community, Having fun again, Speed of development","Active Patterns, Algebraic types (inc discriminated unions and tuples), Async workflows, Easy integration with other .NET libraries, Immutability by default, No dependency cycles, The ""piping"" idiom, Type inference, Type providers","Agents (MailboxProcessor), Quotations","F# bloggers, Links posted on social media such as Twitter, Links mentioned in F# Weekly, Videos (e.g. Community for F#)",I'm willing to learn advanced concepts but only if they are relevant and practical,"More material with in-depth tutorials, More material with short ""cookbook"" style information, More material with real-world examples and war stories, More short ""live coding"" videos, More interactive tutorials (e.g. like the F# Koans)",,"Internal enterprise projects, Commercial products","Games, Commercial web site/app, Research/Teaching","SQL databases, Event sourcing","Windows, Mac, Azure, Amazon Web services",It's officially endorsed in my team for critical/production areas,"Domain modelling: making illegal states unrepresentable, Correctness: fewer bugs and less rework, More productive with fewer developers, Faster time to market, Better for solving complex problems","Too Windows-centric: They have concerns over cross-platform issues, Too Microsoft-centric: They think it is too closely linked to Microsoft",,Installation process,"Not being part of the core .NET distribution, Working with C#-centric tooling, Cross-platform issues",None -- I'm happy with the CLR/Mono,,,,"Books or longer articles explaining full context, Recorded talks from a conference or user group","Paket
FAKE
Suave
Chessie
FSharp.Data",
14/04/2016 06:26:37,5-10 years,Enterprise development,"Yes, I enjoy computer science and mathematics",Learner,"C#, F#, Javascript, Ruby",1-2 years,,I use it for hobby or side projects,Windows,"Visual Studio 2015 or newer, VS Code (with Ionide)","Twitter, F# Weekly, HN, Reddit and other programming news sites","Better domain modelling with records and unions, Correctness (no nulls, it works first time), Great community, Learning functional programming in general, Speed of development","Active Patterns, Easy integration with other .NET libraries, Immutability by default, printf that is type checked, Type inference, Type providers","Agents (MailboxProcessor), Quotations, Static type constraints, Units of measure","F# books, F# bloggers, Links posted on social media such as Twitter, Answers to Stack Overflow questions, Structured training/workshops, Videos (e.g. Community for F#), Reading F# code written by experts",I like theory -- I'm not afraid of monads and other abstractions,"More material with in-depth tutorials, More material with real-world examples and war stories, More podcasts and other audio-only material",,Open source projects,Utilities and tools,"SQL databases, Event sourcing","Windows, Linux",It's officially endorsed in my team for non-critical/non-production code,"Domain modelling: making illegal states unrepresentable, Correctness: fewer bugs and less rework, Faster time to market","Hiring: They worry about not being able to find F# developers, Training: They are worried about getting non-F# developers up to speed",,Don't understand the compiler errors,"Not being part of the core .NET distribution, Difficulty in troubleshooting problems","Javascript, LLVM, Native",,,,"In-person: In-depth trainings (2 or 3 days), In-person: A talks at user groups, Books or longer articles explaining full context, Reference works or documentation with API listings or short tutorials, Recorded talks from a conference or user group","FAKE
Paket
SQLProvider
CSVProvider
JSONProvider",
14/04/2016 06:32:02,10 or more years,Enterprise development,"Yes, I enjoy computer science and mathematics",Learner,"C#, Visual Basic",Haven't really used it yet,"lack of good tutorials, walkthroughs",Just tinkering,Windows,"Visual Studio 2015 or newer, VS Code (with Ionide)","Twitter, F# Weekly","Conciseness of code (I can see more at a glance), Correctness (no nulls, it works first time), Great community, Having fun again, parallelism","Agents (MailboxProcessor), The ""piping"" idiom, Units of measure","Object expressions, Object-oriented compatibility","F# books, F# bloggers, scott wlaschin site",I'm willing to learn advanced concepts but only if they are relevant and practical,"More material with in-depth tutorials, More material with short ""cookbook"" style information, More material with real-world examples and war stories, More short ""live coding"" videos, More interactive tutorials (e.g. like the F# Koans)",,Internal enterprise projects,"None - Just playing around, Games, Machine learning, Research/Teaching, Data analysis/statistics",,Windows,It's used unofficially,"Correctness: fewer bugs and less rework, Easy concurrency with async and agents, Better for solving complex problems",No perceived benefits: They don't understand what benefits F# has over C# or other languages,,"Lack of good tutorials/documentation, Not enough real-world code to learn from",,,,,,"Books or longer articles explaining full context, In-depth online courses (e.g. Pluralsight)",,
14/04/2016 06:39:38,10 or more years,Advertising ,"Yes, I enjoy computer science and mathematics",Expert,F#,3-4 years,,I use it at work or for other commercial uses,"Windows, Linux","Visual Studio 2015 or newer, VS Code (with Ionide)","Twitter, F# Weekly, HN, Reddit and other programming news sites, F# bloggers, fsharp channel on Slack","Better domain modelling with records and unions, Conciseness of code (I can see more at a glance), Correctness (no nulls, it works first time), Great community, Speed of development","Algebraic types (inc discriminated unions and tuples), Async workflows, Computation expressions, Immutability by default, No dependency cycles, Simple ""one liner"" type definitions for records and DUs, The ""piping"" idiom, Type inference, Type providers, Units of measure","Object expressions, Quotations","F# bloggers, Reading F# code written by experts",I like theory -- I'm not afraid of monads and other abstractions,More material with real-world examples and war stories,Better communication docs,"Internal enterprise projects, Open source projects","Utilities and tools, Algorithm-heavy business applications (non-financial), Financial services, Machine learning, Commercial web site/app","SQL databases, Event sourcing, Read-only data sources such as feeds, Analytics","Linux, Azure",It's officially endorsed in my team for critical/production areas,"Domain modelling: making illegal states unrepresentable, Correctness: fewer bugs and less rework, More productive with fewer developers, Better for solving complex problems",Nothing. Everyone loves it.,Better docs overall,Tooling could be more polished ,,Native,,,,,"Fsharp.data
Freya
Argu
Paket
Fake",
14/04/2016 06:55:52,10 or more years,Commercial software/web development,"No, I don't know much theory",Expert,"C#, C++, F#",4 or more years,,I use it at work or for other commercial uses,Windows,"Visual Studio 2015 or newer, Visual Studio 2012 or 2013, Xamarin","Twitter, F# Weekly","Better domain modelling with records and unions, Correctness (no nulls, it works first time), Speed of development","Active Patterns, Agents (MailboxProcessor), Algebraic types (inc discriminated unions and tuples), Async workflows, Immutability by default, Interactive development, No dependency cycles, The ""piping"" idiom, Type inference, Type providers",,"Links and instructions from fsharp.org, F# books, F# bloggers, Links posted on social media such as Twitter, Links mentioned in F# Weekly, Answers to Stack Overflow questions, Structured training/workshops, Videos (e.g. Community for F#), Reading F# code written by experts",I like theory -- I'm not afraid of monads and other abstractions,"More material with short ""cookbook"" style information, More material with real-world examples and war stories",,Internal enterprise projects,"Utilities and tools, Algorithm-heavy business applications (non-financial), Machine learning, Data analysis/statistics","SQL databases, Event sourcing, Read-only data sources such as feeds",Windows,It's officially endorsed in my team for critical/production areas,"Domain modelling: making illegal states unrepresentable, Correctness: fewer bugs and less rework, More productive with fewer developers, Faster time to market, Efficiency/Performance, Easy concurrency with async and agents, Better for solving complex problems",Nothing. Everyone loves it.,Tell Microsoft they should tell more and often about F#,,Working with C#-centric tooling,JVM,"does MS like F# ?
",,,"In-person: In-depth trainings (2 or 3 days), Books or longer articles explaining full context, Recorded talks from a conference or user group","FsCheck
F# Power Tools
Paket",
14/04/2016 07:11:45,10 or more years,Enterprise development,"Yes, I enjoy computer science and mathematics",Intermediate,C#,1-2 years,,I use it for hobby or side projects,"Windows, Linux","Visual Studio 2015 or newer, Atom (with Ionide), VS Code (with Ionide)","Twitter, F# Weekly","Better domain modelling with records and unions, Conciseness of code (I can see more at a glance), Great community, Having fun again, Learning functional programming in general","Active Patterns, Backtick naming, Computation expressions, Immutability by default, Object expressions, printf that is type checked, The ""piping"" idiom, Type inference","Quotations, Units of measure","F# books, F# bloggers, Links posted on social media such as Twitter, Links mentioned in F# Weekly, Reading F# code written by experts",I like theory -- I'm not afraid of monads and other abstractions,"More material with real-world examples and war stories, More short ""live coding"" videos, More interactive tutorials (e.g. like the F# Koans)",,Internal enterprise projects,"Utilities and tools, Machine learning, Data analysis/statistics, Text analysis/language parsing",Event sourcing,"Windows, Linux, Amazon Web services",It's used unofficially,"Domain modelling: making illegal states unrepresentable, Correctness: fewer bugs and less rework, Faster time to market, Easy concurrency with async and agents","No perceived benefits: They don't understand what benefits F# has over C# or other languages, Hiring: They worry about not being able to find F# developers, Money: They worry that good F# developers will cost too much",,"I can't use my knowledge from C# or other imperative languages, Don't understand the compiler errors","Not being part of the core .NET distribution, Working with C#-centric tooling, Difficulty in troubleshooting problems",Native,,,,"In-person: A talks at user groups, In-person: Attending a talks as part of a conference, Books or longer articles explaining full context, Reference works or documentation with API listings or short tutorials, Recorded talks from a conference or user group, In-depth online courses (e.g. Pluralsight)","Paket
Fake
MBrace",
14/04/2016 07:15:32,10 or more years,Enterprise development,"No, I don't know much theory",Learner,"C#, F#",Less than a year,,"I learn, trying to use it at work, organizing fsharping.com meetups",Windows,"Visual Studio 2015 or newer, Atom (with Ionide), VS Code (with Ionide)","Twitter, F# bloggers, Our meetups","Better domain modelling with records and unions, Conciseness of code (I can see more at a glance), Correctness (no nulls, it works first time), Great community, Having fun again, Learning functional programming in general, Speed of development","Immutability by default, The ""piping"" idiom, Type inference, Type providers","Agents (MailboxProcessor), Units of measure","F# books, F# bloggers, Links mentioned in F# Weekly, Personal mentoring, Reading F# code written by experts",I want to learn functional programming but I don't like academic jargon,"More material with short ""cookbook"" style information, More material with real-world examples and war stories",Focus on solution for real problems,Open source projects,"Utilities and tools, Non-commercial web site/app",Read-only data sources such as feeds,"Windows, Amazon Web services",I don't use F# at work,,,,Lack of good tutorials/documentation,Not being part of the core .NET distribution,None -- I'm happy with the CLR/Mono,It is more like Microsoft's unwanted child - F# needs more MS propagation,,,"In-person: Shorter workshops focused on a specific topic (1 day), In-person: Attending a talks as part of a conference, Reference works or documentation with API listings or short tutorials, Recorded talks from a conference or user group","Suave.io
FSharp.Data
FsUnit
Canopy
JSONTypeProviders",
14/04/2016 07:24:07,5-10 years,Commercial software/web development,"Yes, I enjoy computer science and mathematics",Intermediate,"C#, F#, Javascript",1-2 years,,I use it at work or for other commercial uses,Windows,"Visual Studio 2015 or newer, Visual Studio 2012 or 2013","F# Weekly, F# bloggers, StackOverflow chat","Better domain modelling with records and unions, Conciseness of code (I can see more at a glance), Correctness (no nulls, it works first time), Great community, Having fun again, Learning functional programming in general, Speed of development","Async workflows, Computation expressions, Easy integration with other .NET libraries, Immutability by default, No dependency cycles, Simple ""one liner"" type definitions for records and DUs, The ""piping"" idiom, Type inference, Type providers","Agents (MailboxProcessor), Static type constraints, Units of measure","Links and instructions from fsharp.org, F# books, F# bloggers, Answers to Stack Overflow questions, Reading F# code written by experts",I'm willing to learn advanced concepts but only if they are relevant and practical,"More material with in-depth tutorials, More material with real-world examples and war stories, More short ""live coding"" videos","I often hear people stating that ""F# , thats only good for calculatuibs right??""
I think those people are often scared away by the fact that many examples are from that world.","Commercial products, Open source projects","Utilities and tools, Commercial web site/app",SQL databases,Windows,It's officially endorsed in my team for critical/production areas,"Domain modelling: making illegal states unrepresentable, Correctness: fewer bugs and less rework, Better for solving complex problems","Hiring: They worry about not being able to find F# developers, Training: They are worried about getting non-F# developers up to speed, No buy-in: There is lack of acceptance from other teams",,In the beginning the tooling was shitty. It is very good now.,"Not being part of the core .NET distribution, Lack of F# friendly libraries, Less sophisticated tools for refactoring, etc., Difficulty in troubleshooting problems",JVM,"Still tooling, though it's much better now than it used to be,",,,"In-person: A talks at user groups, Books or longer articles explaining full context, In-depth online courses (e.g. Pluralsight)","F# Power tools
Paket",
14/04/2016 07:42:13,10 or more years,Commercial software/web development,"Yes, I enjoy computer science and mathematics",Experienced,"C#, F#",1-2 years,,I use it at work or for other commercial uses,Windows,"Visual Studio 2015 or newer, VS Code (with Ionide)","Twitter, F# Weekly","Correctness (no nulls, it works first time), Learning functional programming in general, Functional but can be tweaked to get high performance","Active Patterns, Algebraic types (inc discriminated unions and tuples), Easy integration with other .NET libraries, Immutability by default, The ""piping"" idiom","Computation expressions, Quotations","Answers to Stack Overflow questions, fsharpforfunandprofit",I'm willing to learn advanced concepts but only if they are relevant and practical,"More material with in-depth tutorials, More material with real-world examples and war stories",,"Internal enterprise projects, Commercial products","Algorithm-heavy business applications (non-financial), Custom development/specialist markets, Data analysis/statistics","SQL databases, Analytics",Windows,It's officially endorsed in my team for critical/production areas,"Domain modelling: making illegal states unrepresentable, Correctness: fewer bugs and less rework, More productive with fewer developers, Better for solving complex problems","Hiring: They worry about not being able to find F# developers, Training: They are worried about getting non-F# developers up to speed",,Don't understand the compiler errors,"Lack of F# friendly libraries, Working with C#-centric tooling, Less sophisticated tools for refactoring, etc.",None -- I'm happy with the CLR/Mono,,,,"Books or longer articles explaining full context, Reference works or documentation with API listings or short tutorials, Recorded talks from a conference or user group","VFPT
Ionide",
14/04/2016 07:55:14,5-10 years,Commercial software/web development,"No, I don't know much theory",Experienced,C#,Haven't really used it yet,,Just tinkering,Windows,Visual Studio 2015 or newer,"Twitter, F# Weekly, HN, Reddit and other programming news sites, F# bloggers","Having fun again, Learning functional programming in general","Algebraic types (inc discriminated unions and tuples), Immutability by default, Interactive development, No dependency cycles, Simple ""one liner"" type definitions for records and DUs, The ""piping"" idiom, Type inference, Type providers",,"F# books, F# bloggers, Links posted on social media such as Twitter, Links mentioned in F# Weekly, Videos (e.g. Community for F#)",I like theory -- I'm not afraid of monads and other abstractions,"More material with in-depth tutorials, More material with short ""cookbook"" style information, More material with real-world examples and war stories",,,None - Just playing around,SQL databases,,It's used unofficially,,Hiring: They worry about not being able to find F# developers,,Don't understand the compiler errors,"Less sophisticated tools for refactoring, etc., Difficulty in troubleshooting problems",,,,,"In-person: A talks at user groups, In-person: Attending a talks as part of a conference, Books or longer articles explaining full context, Reference works or documentation with API listings or short tutorials, Recorded talks from a conference or user group, In-depth online courses (e.g. Pluralsight)",,
14/04/2016 08:49:35,5-10 years,Enterprise development,"No, I don't know much theory",Intermediate,"C#, F#",2-3 years,,I use it for hobby or side projects,Windows,Visual Studio 2015 or newer,"Twitter, F# Weekly, fsharp channel on Slack","Better domain modelling with records and unions, Conciseness of code (I can see more at a glance), Great community, Learning functional programming in general","Algebraic types (inc discriminated unions and tuples), Backtick naming, Computation expressions, Immutability by default, printf that is type checked, The ""piping"" idiom, Type inference, Type providers","Active Patterns, Agents (MailboxProcessor), Quotations","F# books, Links posted on social media such as Twitter, Links mentioned in F# Weekly, Videos (e.g. Community for F#)",I'm willing to learn advanced concepts but only if they are relevant and practical,"More material with real-world examples and war stories, More podcasts and other audio-only material",,Open source projects,Utilities and tools,SQL databases,"Windows, Linux, Azure",I don't use F# at work,,"Hiring: They worry about not being able to find F# developers, No buy-in: There is lack of acceptance from other teams",,Not enough real-world code to learn from,"Not being part of the core .NET distribution, Working with C#-centric tooling","LLVM, Native",,,,"Books or longer articles explaining full context, Recorded talks from a conference or user group, In-depth online courses (e.g. Pluralsight)",,
14/04/2016 09:35:32,5-10 years,Commercial software/web development,"No, I don't know much theory",Intermediate,"C#, C++",1-2 years,,I use it for hobby or side projects,Windows,Visual Studio 2015 or newer,"Twitter, F# Weekly, F# bloggers","Better domain modelling with records and unions, Conciseness of code (I can see more at a glance), Correctness (no nulls, it works first time), Having fun again, Learning functional programming in general","Algebraic types (inc discriminated unions and tuples), Computation expressions, Easy integration with other .NET libraries, Immutability by default, Interactive development, No dependency cycles, Object-oriented features (inc. C# compatibility, conciseness), printf that is type checked, Simple ""one liner"" type definitions for records and DUs, The ""piping"" idiom","Active Patterns, Agents (MailboxProcessor), Async workflows, Quotations, Type providers, Units of measure","MSDN, F# books, Answers to Stack Overflow questions",I want to learn functional programming but I don't like academic jargon,"More material with in-depth tutorials, More material with real-world examples and war stories",,,,,,I don't use F# at work,,,,,"Less sophisticated tools for refactoring, etc.",,,,,"Books or longer articles explaining full context, Reference works or documentation with API listings or short tutorials",,
14/04/2016 09:45:22,10 or more years,Student,"Yes, I enjoy computer science and mathematics",Experienced,F#,2-3 years,,I use it for student work,Linux,MonoDevelop,"HN, Reddit and other programming news sites, F# bloggers","Better domain modelling with records and unions, Conciseness of code (I can see more at a glance), Correctness (no nulls, it works first time)","Active Patterns, Async workflows, Computation expressions, Immutability by default, The ""piping"" idiom, Type inference","Integration with non-F# libraries, Object expressions, Object-oriented compatibility, Quotations, Units of measure","F# books, F# bloggers, Answers to Stack Overflow questions",I like theory -- I'm not afraid of monads and other abstractions,"More material with short ""cookbook"" style information",,Not applicable. None of my F# code is used by other people,"Research/Teaching, Other",Not doing data centric apps,Linux,,"Domain modelling: making illegal states unrepresentable, Correctness: fewer bugs and less rework, Easy concurrency with async and agents, Better for solving complex problems",,,Lack of good tutorials/documentation,"Lack of F# friendly libraries, Lack of good wrappers for non-F# libraries","LLVM, Native",,,,"Books or longer articles explaining full context, Reference works or documentation with API listings or short tutorials",,
14/04/2016 11:16:17,10 or more years,Consulting,"Yes, I enjoy computer science and mathematics",Experienced,"C#, F#, Javascript",3-4 years,,I use it at work or for other commercial uses,"Windows, Mac",Visual Studio 2015 or newer,"Twitter, F# Weekly, F# bloggers","Better domain modelling with records and unions, Conciseness of code (I can see more at a glance), Correctness (no nulls, it works first time), Great community, Having fun again, Learning functional programming in general, Speed of development","Active Patterns, Immutability by default, Interactive development, No dependency cycles, Simple ""one liner"" type definitions for records and DUs, The ""piping"" idiom",Agents (MailboxProcessor),"MSDN, F# books, F# bloggers",I like theory -- I'm not afraid of monads and other abstractions,"More material with in-depth tutorials, More interactive tutorials (e.g. like the F# Koans)",,"Commercial products, Open source projects",Utilities and tools,"SQL databases, Read-only data sources such as feeds",Windows,It's officially endorsed in my team for critical/production areas,"Correctness: fewer bugs and less rework, More productive with fewer developers, Faster time to market, Efficiency/Performance, Easy concurrency with async and agents","Training: They are worried about getting non-F# developers up to speed, No buy-in: There is lack of acceptance from other teams",,"Lack of good tutorials/documentation, Installation process, Not enough real-world code to learn from",Not being part of the core .NET distribution,"JVM, Javascript",,,,"Books or longer articles explaining full context, Reference works or documentation with API listings or short tutorials",,
14/04/2016 12:59:16,10 or more years,Consulting,"No, I don't know much theory",Intermediate,"C#, Elixir, F#, Go, Rust",4 or more years,,I use it at work or for other commercial uses,Mac,Xamarin,"Twitter, F# Weekly, F# bloggers","Conciseness of code (I can see more at a glance), Learning functional programming in general","Active Patterns, Algebraic types (inc discriminated unions and tuples), Async workflows, Computation expressions, Object expressions, printf that is type checked, Type inference","Agents (MailboxProcessor), Units of measure",,I'm willing to learn advanced concepts but only if they are relevant and practical,More material with real-world examples and war stories,Less fud,"Commercial products, Open source projects","Utilities and tools, Mobile apps",Not doing data centric apps,"Mac, iOS, Android",It's officially endorsed in my team for critical/production areas,"Correctness: fewer bugs and less rework, Better for solving complex problems","Too Windows-centric: They have concerns over cross-platform issues, Too Microsoft-centric: They think it is too closely linked to Microsoft, No buy-in: There is lack of acceptance from other teams",,Increase compiler speed,"Performance issues, Cross-platform issues",JVM,"Poor compiler speed
Convoluted FSharp.Core dependencies",,,"In-person: In-depth trainings (2 or 3 days), Books or longer articles explaining full context, Reference works or documentation with API listings or short tutorials",ExtCore,
14/04/2016 13:12:54,5-10 years,Enterprise development,"Yes, I enjoy computer science and mathematics",Intermediate,"C#, F#, Javascript",1-2 years,,I use it at work or for other commercial uses,Windows,"Visual Studio 2015 or newer, Sublime Text",Twitter,"Better domain modelling with records and unions, Conciseness of code (I can see more at a glance), Correctness (no nulls, it works first time), Having fun again, Speed of development","Algebraic types (inc discriminated unions and tuples), Immutability by default, Simple ""one liner"" type definitions for records and DUs, The ""piping"" idiom, Type inference, Units of measure","Agents (MailboxProcessor), Async workflows, Computation expressions, Object expressions, Static type constraints, Type providers","Links and instructions from fsharp.org, Links posted on social media such as Twitter, Answers to Stack Overflow questions, Reading F# code written by experts",I'm willing to learn advanced concepts but only if they are relevant and practical,More interactive tutorials (e.g. like the F# Koans),"more support from sites like 
  https://codefights.com/home 
  http://codecombat.com/ 
  https://www.codecademy.com

it can be done clearly:
  codingame.com/
  http://ideone.com/
  dotnetfiddle.net

more adoption in colleges",Commercial products,"Utilities and tools, Financial services, Mainstream business & enterprise applications, Text analysis/language parsing",SQL databases,Windows,It's officially endorsed in my team for critical/production areas,"Domain modelling: making illegal states unrepresentable, Correctness: fewer bugs and less rework, More productive with fewer developers, Faster time to market, Better for solving complex problems",Nothing. Everyone loves it.,in general more F# written with a strong C# dialect for those that aren't comfortable yet.,"Lack of good tutorials/documentation, Don't understand the compiler errors, delegate interop",delegate interop,"Javascript, android","Tooling
  I sometimes have to unload the project file, edit it by hand, and then reload it.
  If I miss a close parenthesis the IDE has no idea where the error originates from
  In LinqPad and VS2015 I frequently get compilation error that either have the wrong line highlighted, or no line at all.
  No support for T4/metaprogramming (perhaps higher kinded types?) - I create a C# project in F# solutions so I can use T4.

","the CSS width on this form is horrible, the survey attempts to only take up about a skinny 25% of the screen, the rest is background texture. ","the CSS width on this form is horrible, the survey attempts to only take up about a skinny 25% of the screen, the rest is background texture.
If I zoom to 175% we're up to about 75% of the width of the page is the survey. 200% appears to be 95% of the page width is the survey.","In-person: A talks at user groups, In-person: Attending a talks as part of a conference, Reference works or documentation with API listings or short tutorials",,
14/04/2016 13:20:49,5-10 years,Enterprise development,"No, I don't know much theory",Intermediate,"C#, F#",1-2 years,,I use it for hobby or side projects,Windows,Visual Studio 2015 or newer,"Twitter, F# Weekly, F# bloggers","Better domain modelling with records and unions, Conciseness of code (I can see more at a glance), Correctness (no nulls, it works first time), Great community, Having fun again, Learning functional programming in general, Speed of development","Async workflows, Easy integration with other .NET libraries, Immutability by default, No dependency cycles, printf that is type checked, Simple ""one liner"" type definitions for records and DUs, The ""piping"" idiom, Type inference, Type providers, Units of measure","Agents (MailboxProcessor), Computation expressions, Quotations","MSDN, F# bloggers, Answers to Stack Overflow questions, Reading F# code written by experts",I'm willing to learn advanced concepts but only if they are relevant and practical,,,Internal enterprise projects,"Utilities and tools, Other",SQL databases,Windows,It's used unofficially,"Domain modelling: making illegal states unrepresentable, Correctness: fewer bugs and less rework, More productive with fewer developers, Faster time to market, Efficiency/Performance, Easy concurrency with async and agents","No perceived benefits: They don't understand what benefits F# has over C# or other languages, Hiring: They worry about not being able to find F# developers, Training: They are worried about getting non-F# developers up to speed, No buy-in: There is lack of acceptance from other teams",,Don't understand the compiler errors,,None -- I'm happy with the CLR/Mono,,,,,,
14/04/2016 13:22:43,10 or more years,Enterprise development,"Yes, I enjoy computer science and mathematics",Intermediate,"C#, F#, Typescript",2-3 years,,I use it at work or for other commercial uses,Windows,Visual Studio 2015 or newer,"Twitter, F# bloggers","Better domain modelling with records and unions, Conciseness of code (I can see more at a glance), Correctness (no nulls, it works first time), Great community, Learning functional programming in general","Immutability by default, printf that is type checked, Simple ""one liner"" type definitions for records and DUs, The ""piping"" idiom, Type inference, Type providers",,"F# bloggers, Answers to Stack Overflow questions, Reading F# code written by experts, Pluralsight courses, fsharpforfunandprofit.com",I'm willing to learn advanced concepts but only if they are relevant and practical,"More material with short ""cookbook"" style information, More short ""live coding"" videos, More interactive tutorials (e.g. like the F# Koans)",,,"Custom development/specialist markets, Commercial web site/app","NoSQL database, Event sourcing","Windows, Amazon Web services",It's officially endorsed in my team for critical/production areas,"Domain modelling: making illegal states unrepresentable, Correctness: fewer bugs and less rework, More productive with fewer developers",Nothing. Everyone loves it.,,Not enough real-world code to learn from,"Less sophisticated tools for refactoring, etc.",None -- I'm happy with the CLR/Mono,,,,"Books or longer articles explaining full context, Reference works or documentation with API listings or short tutorials, Recorded talks from a conference or user group, In-depth online courses (e.g. Pluralsight)",,
14/04/2016 13:27:04,5-10 years,Enterprise development,"No, I don't know much theory",Intermediate,"C#, Javascript",2-3 years,,Just tinkering,Windows,Visual Studio 2015 or newer,Twitter,"Better domain modelling with records and unions, Conciseness of code (I can see more at a glance), Correctness (no nulls, it works first time)","Algebraic types (inc discriminated unions and tuples), No dependency cycles, The ""piping"" idiom, Type inference, Units of measure",Active Patterns,"F# books, Links posted on social media such as Twitter, fsharpforfunandprofit.com",I'm willing to learn advanced concepts but only if they are relevant and practical,More interactive tutorials (e.g. like the F# Koans),,Not applicable. None of my F# code is used by other people,"Mainstream business & enterprise applications, Non-commercial web site/app",SQL databases,Windows,Not yet there,"Domain modelling: making illegal states unrepresentable, Correctness: fewer bugs and less rework","No perceived benefits: They don't understand what benefits F# has over C# or other languages, Hiring: They worry about not being able to find F# developers, Fad: They have concerns over long term language viability",,Not having time,Working with C#-centric tooling,,,,,"In-person: In-depth trainings (2 or 3 days), In-person: A talks at user groups, Reference works or documentation with API listings or short tutorials",,
14/04/2016 13:36:21,10 or more years,Commercial software/web development,"No, I don't know much theory",Learner,C#,1-2 years,,I use it for hobby or side projects,"Windows, Mac","Visual Studio 2015 or newer, Xamarin, Atom (with Ionide)","Twitter, F# Weekly, F# bloggers","Correctness (no nulls, it works first time), Great community, Having fun again","Immutability by default, The ""piping"" idiom, Type providers","Agents (MailboxProcessor), Interactive development, Units of measure","F# books, F# bloggers",I want to learn functional programming but I don't like academic jargon,More material with real-world examples and war stories,,Open source projects,Mobile apps,SQL databases,"Windows, iOS, Android, WinPhone",I don't use F# at work,,"No perceived benefits: They don't understand what benefits F# has over C# or other languages, No buy-in: There is lack of acceptance from other teams, Do not want to learn a new language",,Not enough real-world code to learn from,"Working with C#-centric tooling, Difficulty in troubleshooting problems, Cross-platform issues",Javascript,,,,"In-person: Shorter workshops focused on a specific topic (1 day), In-person: Attending a talks as part of a conference, Books or longer articles explaining full context","Ionide for Atom
FSharp.Data
FSharp.ViewModule",
14/04/2016 13:37:12,10 or more years,"Academic, research, or related","Yes, I enjoy computer science and mathematics",Expert,F#,4 or more years,,I use it at work or for other commercial uses,"Windows, Mac, Linux","Visual Studio 2015 or newer, GitHub Editor + CI","Twitter, F# Weekly, HN, Reddit and other programming news sites, F# bloggers","Better domain modelling with records and unions, Conciseness of code (I can see more at a glance), Correctness (no nulls, it works first time), Great community, Having fun again, Learning functional programming in general, Speed of development, Functional but can be tweaked to get high performance","Active Patterns, Algebraic types (inc discriminated unions and tuples), Async workflows, Easy integration with other .NET libraries, Immutability by default, Interactive development, No dependency cycles, Object expressions, Object-oriented features (inc. C# compatibility, conciseness), Simple ""one liner"" type definitions for records and DUs, The ""piping"" idiom, Type inference, Type providers","Agents (MailboxProcessor), Units of measure",Reading F# code written by experts,I want to learn functional programming but I don't like academic jargon,"More material with short ""cookbook"" style information, More interactive tutorials (e.g. like the F# Koans)",Replace Try F# with a better online learning experience,Open source projects,"Utilities and tools, Financial services, Research/Teaching","SQL databases, NoSQL database, Read-only data sources such as feeds","Windows, Mac, Linux, iOS, Android, Azure, Amazon Web services",It's officially endorsed in my team for critical/production areas,"Domain modelling: making illegal states unrepresentable, Correctness: fewer bugs and less rework, More productive with fewer developers, Faster time to market, Efficiency/Performance, Better for solving complex problems","Edicts from dev leads demanding C# only, Lack of knowledge/experience/training","Online learning environment to replace tryfsharp.org
High-quality getting-started material
Better tooling
",Try F# requires silverlight,Working with C#-centric tooling,"Javascript, WebAssembly",No Javascript or JVM story,It's good. ,,,"FSharp.Data
Paket
FSharp.Compiler.Service
FSharp.Data.SqlClient",
14/04/2016 13:39:23,10 or more years,Enterprise development,"No, I don't know much theory",Experienced,"C#, F#, Javascript",2-3 years,,I use it at work or for other commercial uses,Windows,"Visual Studio 2015 or newer, Atom (with Ionide)","Twitter, F# Weekly, F# bloggers","Better domain modelling with records and unions, Conciseness of code (I can see more at a glance), Correctness (no nulls, it works first time), Great community, Having fun again, Learning functional programming in general, Speed of development, Functional but can be tweaked to get high performance, becoming a better overall programmer","Active Patterns, Algebraic types (inc discriminated unions and tuples), Async workflows, Computation expressions, Easy integration with other .NET libraries, Immutability by default, Interactive development, No dependency cycles, Quotations, Simple ""one liner"" type definitions for records and DUs, The ""piping"" idiom, Type inference, Type providers, Units of measure","Agents (MailboxProcessor), Static type constraints","F# books, F# bloggers, Videos (e.g. Community for F#)",I'm willing to learn advanced concepts but only if they are relevant and practical,"More material with in-depth tutorials, More material with short ""cookbook"" style information, More material with real-world examples and war stories, More short ""live coding"" videos, More interactive tutorials (e.g. like the F# Koans)",,"Internal enterprise projects, Not applicable. None of my F# code is used by other people","Utilities and tools, Algorithm-heavy business applications (non-financial), Mainstream business & enterprise applications, Data analysis/statistics, Text analysis/language parsing","SQL databases, NoSQL database, Data integration and EAI",Windows,It's officially endorsed in my team for critical/production areas,"Domain modelling: making illegal states unrepresentable, Correctness: fewer bugs and less rework, More productive with fewer developers, Faster time to market, Efficiency/Performance, Easy concurrency with async and agents, Better for solving complex problems","Hiring: They worry about not being able to find F# developers, Nothing. Everyone loves it.",,Don't understand the compiler errors,"Not being part of the core .NET distribution, Lack of good wrappers for non-F# libraries, Less sophisticated tools for refactoring, etc., Lack of good debugger support","Javascript, LLVM, Native",,,,Recorded talks from a conference or user group,"FSharp.Data
Suave
FParsec
FSharpx
Argu",
14/04/2016 13:44:06,10 or more years,Commercial software/web development,"No, I don't know much theory",Intermediate,"F#, Delphi",Less than a year,,I use it at work or for other commercial uses,Windows,Visual Studio 2015 or newer,"Twitter, F# Weekly, Google+, F# bloggers","Conciseness of code (I can see more at a glance), Correctness (no nulls, it works first time), Having fun again, Speed of development","Async workflows, Easy integration with other .NET libraries, Immutability by default, Interactive development, Type inference","Computation expressions, Quotations, Units of measure","MSDN, Links and instructions from fsharp.org, F# books, F# bloggers, Answers to Stack Overflow questions, Personal mentoring, Reading F# code written by experts",I like theory -- I'm not afraid of monads and other abstractions,"More material with in-depth tutorials, More material with real-world examples and war stories",Examples for real world ,freeware web app,"Utilities and tools, Non-commercial web site/app, Text analysis/language parsing","SQL databases, Read-only data sources such as feeds","Windows, Azure",I am a freelancer,,"No perceived benefits: They don't understand what benefits F# has over C# or other languages, Too Microsoft-centric: They think it is too closely linked to Microsoft, Full Visual Studio support","- Provide examples of database use.
- How to solve problems functionally rather than in OO
",Not enough real-world code to learn from,Not being part of the core .NET distribution,"Javascript, Native",Not elegant enough to be close to haskell ,Questions in comparing with other functional languages ,Great job,"Books or longer articles explaining full context, Reference works or documentation with API listings or short tutorials",,
14/04/2016 13:39:59,10 or more years,Commercial software/web development,"No, I don't know much theory",Learner,"C, C++",Less than two months,,Just tinkering,Mac,Vim,Twitter,Better domain modelling with records and unions,Async workflows,Object-oriented compatibility,F# books,I like theory -- I'm not afraid of monads and other abstractions,More material with in-depth tutorials,,Not applicable. None of my F# code is used by other people,Research/Teaching,Not doing data centric apps,Mac,I don't use F# at work,,"Fad: They have concerns over long term language viability, Too Windows-centric: They have concerns over cross-platform issues, Too Microsoft-centric: They think it is too closely linked to Microsoft, No buy-in: There is lack of acceptance from other teams",,Not enough real-world code to learn from,,"LLVM, Native",,,,In-person: In-depth trainings (2 or 3 days),,
14/04/2016 13:44:36,5-10 years,Financial services or similar,"Yes, I enjoy computer science and mathematics",Experienced,"C#, F#",1-2 years,,I use it at work or for other commercial uses,Windows,Visual Studio 2015 or newer,"Twitter, F# Weekly, F# bloggers","Better domain modelling with records and unions, Conciseness of code (I can see more at a glance), Correctness (no nulls, it works first time), Great community, Having fun again, Learning functional programming in general, Speed of development, Functional but can be tweaked to get high performance, srsly all of the above!","Algebraic types (inc discriminated unions and tuples), Async workflows, Computation expressions, Easy integration with other .NET libraries, Immutability by default, Interactive development, No dependency cycles, Object expressions, Object-oriented features (inc. C# compatibility, conciseness), Simple ""one liner"" type definitions for records and DUs, The ""piping"" idiom, Type inference, Type providers","Active Patterns, Agents (MailboxProcessor), Units of measure","MSDN, Links and instructions from fsharp.org, F# bloggers, Links mentioned in F# Weekly, Reading F# code written by experts",I like theory -- I'm not afraid of monads and other abstractions,"More material with real-world examples and war stories, More short ""live coding"" videos",I think the F# community is already at a realy good stage with making it easy to start with F#.,Internal enterprise projects,"Utilities and tools, Financial services, Data analysis/statistics",Read-only data sources such as feeds,"Windows, Azure",It's officially endorsed in my team for infrastructure work like deployments,"Domain modelling: making illegal states unrepresentable, Correctness: fewer bugs and less rework, More productive with fewer developers, Faster time to market, Efficiency/Performance, Easy concurrency with async and agents, Better for solving complex problems","Hiring: They worry about not being able to find F# developers, Training: They are worried about getting non-F# developers up to speed",Just keep up the good work the MVPs and every one else is doing. It will come over time.,Hard to grasp the full spectrum of features (like 'with' or 'in' expressions),"Less sophisticated tools for refactoring, etc.",None -- I'm happy with the CLR/Mono,The lack of tooling that can stand up agains C#'s tooling like ReSharper.,Add a field where one can enter his/her mail adress to get the results delivered.,Thanks for all the effort!,"In-person: A talks at user groups, In-person: Attending a talks as part of a conference, Reference works or documentation with API listings or short tutorials, Recorded talks from a conference or user group","FAKE
Paket
FSharp.Data
Hopac",
14/04/2016 13:48:14,10 or more years,Enterprise development,"Yes, I enjoy computer science and mathematics",Intermediate,"C#, Clojure, Elixir, F#, Java, Javascript, Scala",1-2 years,,I use it at work or for other commercial uses,Windows,Visual Studio 2015 or newer,"Twitter, F# Weekly","Conciseness of code (I can see more at a glance), Correctness (no nulls, it works first time), Speed of development","Algebraic types (inc discriminated unions and tuples), Async workflows, Easy integration with other .NET libraries, Immutability by default, The ""piping"" idiom, Type inference","Active Patterns, Agents (MailboxProcessor), Units of measure","Links and instructions from fsharp.org, F# books, Personal mentoring",I want to learn functional programming but I don't like academic jargon,"More short ""live coding"" videos",,Internal enterprise projects,Commercial web site/app,"SQL databases, NoSQL database, Event sourcing, Read-only data sources such as feeds, Analytics, Data integration and EAI",Windows,It's officially endorsed in my team for critical/production areas,"Correctness: fewer bugs and less rework, Easy concurrency with async and agents",,,,,,,,,"In-person: In-depth trainings (2 or 3 days), In-person: Shorter workshops focused on a specific topic (1 day), In-depth online courses (e.g. Pluralsight)",,
14/04/2016 13:49:19,10 or more years,"Academic, research, or related","Yes, I enjoy computer science and mathematics",Experienced,"F#, Python, R",4 or more years,,I use it for hobby or side projects,"Windows, Mac","Visual Studio 2015 or newer, Xamarin",Twitter,"Conciseness of code (I can see more at a glance), Correctness (no nulls, it works first time), Great community, Functional but can be tweaked to get high performance","Active Patterns, Immutability by default, Interactive development, The ""piping"" idiom, Type inference, Type providers","Computation expressions, Object expressions, Object-oriented compatibility, Quotations, Units of measure","Links and instructions from fsharp.org, F# bloggers, Links posted on social media such as Twitter, Links mentioned in F# Weekly, Answers to Stack Overflow questions, Personal mentoring",I want to learn functional programming but I don't like academic jargon,"More material with in-depth tutorials, More material with short ""cookbook"" style information, More interactive tutorials (e.g. like the F# Koans)",,Open source projects,"Machine learning, Research/Teaching, Data analysis/statistics",Analytics,"Windows, Mac",It's used unofficially,"Correctness: fewer bugs and less rework, Efficiency/Performance, Better for solving complex problems",Linux support,,Don't understand the compiler errors,Cross-platform issues,JVM,No integration with Python and JVM tools,,,"In-person: Shorter workshops focused on a specific topic (1 day), In-person: A talks at user groups, In-person: Attending a talks as part of a conference, Books or longer articles explaining full context","FSharp.Data
RProvider
FsLab
FsReveal
Suave",
14/04/2016 13:49:36,5-10 years,Enterprise development,"No, I don't know much theory",Learner,"C#, F#, Javascript",1-2 years,,I use it at work or for other commercial uses,Windows,Visual Studio 2012 or 2013,"Twitter, Work colleagues ","Better domain modelling with records and unions, Conciseness of code (I can see more at a glance), Correctness (no nulls, it works first time), Great community, Learning functional programming in general","Algebraic types (inc discriminated unions and tuples), Easy integration with other .NET libraries, Immutability by default, Simple ""one liner"" type definitions for records and DUs, The ""piping"" idiom, Type inference, Type providers, Units of measure, matching, closures, first class functions","Agents (MailboxProcessor), Async workflows, Quotations, Static type constraints","Links and instructions from fsharp.org, F# bloggers, Links posted on social media such as Twitter, Personal mentoring, Structured training/workshops, Videos (e.g. Community for F#), Reading F# code written by experts",I'm willing to learn advanced concepts but only if they are relevant and practical,"More material with real-world examples and war stories, More interactive tutorials (e.g. like the F# Koans)","I think it helps to meet people on the grounds of ""This is what F# helped me do better and I think it may help you too"" rather than ""Check out this cool new/different language"". People in tech get excited about new things, it's just in our nature. I think it's important to stay pragmatic and avoid looking like the ""code hipster"" who evangelizes things just because they aren't wide spread yet.",Internal enterprise projects,Financial services,"SQL databases, Event sourcing",Windows,It's officially endorsed in my team for critical/production areas,"Domain modelling: making illegal states unrepresentable, Correctness: fewer bugs and less rework",Nothing. Everyone loves it.,,Don't understand the compiler errors,Working with C#-centric tooling,Javascript,,,Thanks for doing this!,"In-person: In-depth trainings (2 or 3 days), In-person: Shorter workshops focused on a specific topic (1 day), In-person: A talks at user groups, In-person: Attending a talks as part of a conference, Books or longer articles explaining full context, Reference works or documentation with API listings or short tutorials, Recorded talks from a conference or user group, In-depth online courses (e.g. Pluralsight)","ExtCore
SqlCommandProvider
CsvProvider
F# Power Tools
",
14/04/2016 13:53:02,5-10 years,Open source development,"No, I don't know much theory",Experienced,"C#, F#, Scala",1-2 years,,I use it at work or for other commercial uses,Windows,Visual Studio 2015 or newer,"Twitter, HN, Reddit and other programming news sites, F# bloggers","Better domain modelling with records and unions, Conciseness of code (I can see more at a glance), Learning functional programming in general","Active Patterns, Computation expressions, Immutability by default, Quotations, Type inference, Type providers","Static type constraints, Units of measure","MSDN, F# bloggers, Links posted on social media such as Twitter, Links mentioned in F# Weekly, Answers to Stack Overflow questions",I want to learn functional programming but I don't like academic jargon,"More material with real-world examples and war stories, More short ""live coding"" videos, More interactive tutorials (e.g. like the F# Koans)",,"Internal enterprise projects, Open source projects","Mainstream business & enterprise applications, Text analysis/language parsing, Other",SQL databases,"Windows, Azure",It's officially endorsed in my team for critical/production areas,"Domain modelling: making illegal states unrepresentable, More productive with fewer developers, Better for solving complex problems",Nothing. Everyone loves it.,,"Don't understand the compiler errors, Not enough real-world code to learn from","Less sophisticated tools for refactoring, etc., Difficulty in troubleshooting problems, Performance issues",LLVM,"Dual personality disorder: whole language is split into FP/OO parts, which somewhat don't cooperate nicely. 

For OO part:
- you cannot use type inference
- you need explicit interface casting
- way of declaring members is very verbose

For FP part:
- you cannot use function overloading (OCaml can) or optional arguments (again OCaml can)
- using generic params in Discriminated Union requires defining all of them in top level type, making more advanced cases problematic

Others:
- Type Providers cannot produce F# records or DU types
- there still are areas that could be solved by using macros, but have no sufficient equivalent in F#",,,"Reference works or documentation with API listings or short tutorials, Recorded talks from a conference or user group","- Paket
- FAKE
- FsCheck
- FParsec
- FSharp.Data providers",
14/04/2016 13:53:26,10 or more years,Consulting,"Yes, I enjoy computer science and mathematics",Experienced,"C#, F#, Java",4 or more years,,I use it for hobby or side projects,Windows,Visual Studio 2015 or newer,"Twitter, F# bloggers, fsharp channel on Slack","Conciseness of code (I can see more at a glance), Correctness (no nulls, it works first time), Learning functional programming in general","Algebraic types (inc discriminated unions and tuples), Easy integration with other .NET libraries, Immutability by default, The ""piping"" idiom","Active Patterns, Agents (MailboxProcessor), Async workflows, Computation expressions, Object-oriented compatibility, Quotations, Type providers, Units of measure","MSDN, F# books, F# bloggers, Answers to Stack Overflow questions, Reading F# code written by experts",I like theory -- I'm not afraid of monads and other abstractions,"More material with in-depth tutorials, More material with short ""cookbook"" style information, More material with real-world examples and war stories",,"Internal enterprise projects, Open source projects","Financial services, Machine learning, Other",Read-only data sources such as feeds,Windows,It's used unofficially,"More productive with fewer developers, Faster time to market, Efficiency/Performance","No perceived benefits: They don't understand what benefits F# has over C# or other languages, Hiring: They worry about not being able to find F# developers, Fad: They have concerns over long term language viability",Support user groups to increase the available # of F# programmers,Not enough real-world code to learn from,Working with C#-centric tooling,LLVM,"Glaring? I dunno, but I wish we had SML-style parameterized modules.",,,"In-person: A talks at user groups, In-person: Attending a talks as part of a conference","Visual F# power tools
FsUnit/FsCheck
FSharpX
Paket",
14/04/2016 13:53:52,5-10 years,Financial services or similar,"Yes, I enjoy computer science and mathematics",Experienced,"C#, Haskell, Javascript, Scala, Swift, Typescript",Less than two months,,Just tinkering,"Windows, Mac","Visual Studio 2015 or newer, Xamarin, VS Code (with Ionide)","Twitter, HN, Reddit and other programming news sites","Better domain modelling with records and unions, Correctness (no nulls, it works first time), Great community, Speed of development","Algebraic types (inc discriminated unions and tuples), Async workflows, Computation expressions, Immutability by default, Interactive development, Quotations, Type inference, Type providers","Object expressions, Object-oriented compatibility","Links and instructions from fsharp.org, Links posted on social media such as Twitter",I like theory -- I'm not afraid of monads and other abstractions,"More material with in-depth tutorials, More material with short ""cookbook"" style information, More material with real-world examples and war stories",,Not applicable. None of my F# code is used by other people,"Commercial web site/app, Non-commercial web site/app, Mobile apps","SQL databases, NoSQL database, Event sourcing, Read-only data sources such as feeds","Windows, Mac, iOS, Android, Amazon Web services",I don't use F# at work,,"No perceived benefits: They don't understand what benefits F# has over C# or other languages, Training: They are worried about getting non-F# developers up to speed",Articles on how functional principles are superior to traditional C# OOP. Examples of OOP code that is made more correct and refactorable by functional principles.,,Lack of ad-hoc polymorphism,Javascript,,,,"Books or longer articles explaining full context, Reference works or documentation with API listings or short tutorials, Recorded talks from a conference or user group","Fable
Ionide
FSharp.Data
",
14/04/2016 13:57:41,10 or more years,Commercial software/web development,"Yes, I enjoy computer science and mathematics",Expert,"C#, F#, Haskell, Javascript, Python, Ruby",4 or more years,,I use it at work or for other commercial uses,"Mac, Linux","Xamarin, Atom (with Ionide), VS Code (with Ionide)","Twitter, F# Weekly, F# TV","Correctness (no nulls, it works first time), Having fun again, Speed of development","Algebraic types (inc discriminated unions and tuples), Computation expressions, Easy integration with other .NET libraries, Immutability by default, No dependency cycles, Type inference","Agents (MailboxProcessor), Quotations, Units of measure","F# books, Reading F# code written by experts",I like theory -- I'm not afraid of monads and other abstractions,Academic Articles ported to F#,"Solve the fsproj hell – makes it hard to get started.

Make nugets able to carry tools/binaries like ruby gems, so that one can bootstrap a dev machine easier.

Stop with the F# OSS vs F# MSFT segregation. It's confusing and unneeded.","Commercial products, Open source projects","Algorithm-heavy business applications (non-financial), Custom development/specialist markets, Financial services, Machine learning, Commercial web site/app, Non-commercial web site/app, Data analysis/statistics, Text analysis/language parsing","SQL databases, Event sourcing, Analytics",Linux,It's officially endorsed in my team for critical/production areas,"Domain modelling: making illegal states unrepresentable, Correctness: fewer bugs and less rework, More productive with fewer developers, Faster time to market, Efficiency/Performance, Easy concurrency with async and agents, Better for solving complex problems",Nothing. Everyone loves it.,,Installation process,"Lack of F# friendly libraries, Performance issues, Cross-platform issues","LLVM, Native","Lack of ""heavy weight"" libraries for Machine Learning and API bindings for OpenCV and Tesseract. Too focused on 'little tools'.",,,Books or longer articles explaining full context,"Suave
Hopac
YoLo
Mono
Xamarin Studio",
14/04/2016 14:01:17,Less than a year,Student,"No, I don't know much theory",Beginner,Haskell,Haven't really used it yet,N/a,beginner,Windows,beginer,Twitter,beginer,beginer,Type providers,twitter,I like theory -- I'm not afraid of monads and other abstractions,"More material with in-depth tutorials, More material with short ""cookbook"" style information, More material with real-world examples and war stories, More short ""live coding"" videos, More podcasts and other audio-only material, More interactive tutorials (e.g. like the F# Koans)",Have more material for complete novices,Not applicable. None of my F# code is used by other people,"None - Just playing around, Data analysis/statistics",Analytics,Windows,I don't use F# at work,none,"Hiring: They worry about not being able to find F# developers, Training: They are worried about getting non-F# developers up to speed, Fad: They have concerns over long term language viability",Have a complete beginers guide,"Lack of good tutorials/documentation, Installation process, Unpleasant interactions with the community, Not enough real-world code to learn from",beginer knownledge,not sure,Beginer study material,Have a complete beginers guide to F#,Have a complete beginers guide to F#,"In-person: In-depth trainings (2 or 3 days), In-person: Shorter workshops focused on a specific topic (1 day), In-person: A talks at user groups, In-person: Attending a talks as part of a conference, Books or longer articles explaining full context, Reference works or documentation with API listings or short tutorials, Recorded talks from a conference or user group, In-depth online courses (e.g. Pluralsight)",Not sure as I'm a beginner,
14/04/2016 14:01:30,5-10 years,Student,"No, I don't know much theory",Intermediate,"C#, F#, Typescript",1-2 years,,I use it for hobby or side projects,"Windows, Linux","Visual Studio 2015 or newer, MonoDevelop, Sublime Text, VS Code (with Ionide)","Twitter, HN, Reddit and other programming news sites","Better domain modelling with records and unions, Conciseness of code (I can see more at a glance), Correctness (no nulls, it works first time), Having fun again, Learning functional programming in general, Speed of development, Functional but can be tweaked to get high performance","Algebraic types (inc discriminated unions and tuples), Async workflows, Easy integration with other .NET libraries, Immutability by default, printf that is type checked, Simple ""one liner"" type definitions for records and DUs, The ""piping"" idiom, Type inference","Agents (MailboxProcessor), Units of measure","MSDN, Links posted on social media such as Twitter, Answers to Stack Overflow questions, Reading F# code written by experts, F# for fun and profit",I'm willing to learn advanced concepts but only if they are relevant and practical,"More material with short ""cookbook"" style information, More interactive tutorials (e.g. like the F# Koans)",,"Commercial products, Open source projects","Utilities and tools, Commercial web site/app, Text analysis/language parsing, Other",SQL databases,"Windows, Linux",I'm a student,,,,,"Lack of good wrappers for non-F# libraries, Less sophisticated tools for refactoring, etc.","Javascript, LLVM, Native",,,,"Books or longer articles explaining full context, Reference works or documentation with API listings or short tutorials, Recorded talks from a conference or user group","FParsec, Hopac, Suave ",
14/04/2016 14:03:52,10 or more years,Science or related,"Yes, I enjoy computer science and mathematics",Intermediate,"C#, C++, F#, R",1-2 years,,I use it for research or academic work,Windows,Visual Studio 2015 or newer,"Twitter, F# Weekly, F# bloggers","Conciseness of code (I can see more at a glance), Correctness (no nulls, it works first time), Having fun again, Speed of development","Active Patterns, Easy integration with other .NET libraries, Immutability by default, Interactive development, The ""piping"" idiom, Type providers, Units of measure","Agents (MailboxProcessor), Computation expressions, Integration with non-F# libraries, Quotations","Links and instructions from fsharp.org, F# books, Reading F# code written by experts",I'm willing to learn advanced concepts but only if they are relevant and practical,"More material with short ""cookbook"" style information, More interactive tutorials (e.g. like the F# Koans)",,Not applicable. None of my F# code is used by other people,"Machine learning, Research/Teaching, Data analysis/statistics",Read-only data sources such as feeds,Windows,It's used unofficially,"Correctness: fewer bugs and less rework, Efficiency/Performance, Better for solving complex problems",,,Lack of good tutorials/documentation,,"LLVM, Native",,,,"Books or longer articles explaining full context, Reference works or documentation with API listings or short tutorials, Recorded talks from a conference or user group",,
14/04/2016 14:09:29,10 or more years,Enterprise development,"Yes, I enjoy computer science and mathematics",Experienced,"C#, C++, F#, Typescript",2-3 years,,I use it at work or for other commercial uses,Windows,Visual Studio 2015 or newer,"Twitter, F# Weekly, Google groups, HN, Reddit and other programming news sites, F# bloggers","Better domain modelling with records and unions, Conciseness of code (I can see more at a glance), Correctness (no nulls, it works first time), Great community, Having fun again, Learning functional programming in general, Speed of development","Algebraic types (inc discriminated unions and tuples), Computation expressions, Easy integration with other .NET libraries, Immutability by default, The ""piping"" idiom","Active Patterns, Object expressions, Object-oriented compatibility, Quotations, Units of measure","MSDN, F# books, F# bloggers, Links posted on social media such as Twitter, Links mentioned in F# Weekly, Answers to Stack Overflow questions, Videos (e.g. Community for F#), Reading F# code written by experts",I'm willing to learn advanced concepts but only if they are relevant and practical,,,"Internal enterprise projects, Open source projects","Utilities and tools, Mainstream business & enterprise applications, Text analysis/language parsing","Event sourcing, Read-only data sources such as feeds","Windows, Linux",It's officially endorsed in my team for critical/production areas,"Domain modelling: making illegal states unrepresentable, Correctness: fewer bugs and less rework, More productive with fewer developers, Better for solving complex problems","Training: They are worried about getting non-F# developers up to speed, Too Windows-centric: They have concerns over cross-platform issues",,,Cross-platform issues,,compilation speed,,,"Books or longer articles explaining full context, Reference works or documentation with API listings or short tutorials, Recorded talks from a conference or user group",,
14/04/2016 14:10:51,10 or more years,Consulting,"Yes, I enjoy computer science and mathematics",,"C#, Clojure, F#, Java, Javascript",3-4 years,,I use it at work or for other commercial uses,Windows,"Visual Studio 2015 or newer, Visual Studio 2012 or 2013","Twitter, HN, Reddit and other programming news sites, F# bloggers","Better domain modelling with records and unions, Conciseness of code (I can see more at a glance)","Immutability by default, Simple ""one liner"" type definitions for records and DUs","Active Patterns, Interactive development, Quotations, Type providers, Units of measure","F# books, F# bloggers, Links posted on social media such as Twitter, Answers to Stack Overflow questions",I like theory -- I'm not afraid of monads and other abstractions,"More material with in-depth tutorials, More material with short ""cookbook"" style information, More material with real-world examples and war stories",,"Internal enterprise projects, Commercial products","Utilities and tools, Custom development/specialist markets, Mainstream business & enterprise applications, Commercial web site/app, Non-commercial web site/app","SQL databases, NoSQL database, Read-only data sources such as feeds","Windows, Linux",It's officially endorsed in my team for critical/production areas,Domain modelling: making illegal states unrepresentable,"Fad: They have concerns over long term language viability, Nothing. Everyone loves it.",,,"Lack of F# friendly libraries, Lack of good wrappers for non-F# libraries, Working with C#-centric tooling, Less sophisticated tools for refactoring, etc.","None -- I'm happy with the CLR/Mono, JVM, Javascript",A winforms designer would be nice.,,,"Books or longer articles explaining full context, Reference works or documentation with API listings or short tutorials",,
14/04/2016 14:12:45,10 or more years,Commercial software/web development,"No, I don't know much theory",Intermediate,"C#, F#, Go, Python",3-4 years,,I use it at work or for other commercial uses,"Windows, Linux","Visual Studio 2015 or newer, Sublime Text","Twitter, F# Weekly, HN, Reddit and other programming news sites","Better domain modelling with records and unions, Conciseness of code (I can see more at a glance), Correctness (no nulls, it works first time)","Computation expressions, Easy integration with other .NET libraries, Immutability by default, Interactive development, No dependency cycles, printf that is type checked, Type inference","Active Patterns, Object expressions, Quotations, Static type constraints, Type providers, Units of measure","MSDN, F# books, F# bloggers",I'm willing to learn advanced concepts but only if they are relevant and practical,"More material with short ""cookbook"" style information, More material with real-world examples and war stories",,Commercial products,"Utilities and tools, Algorithm-heavy business applications (non-financial), Machine learning, Commercial web site/app, Data analysis/statistics, Text analysis/language parsing","SQL databases, NoSQL database","Windows, Linux, Azure",It's officially endorsed in my team for critical/production areas,"Domain modelling: making illegal states unrepresentable, Correctness: fewer bugs and less rework, Efficiency/Performance, Easy concurrency with async and agents, Better for solving complex problems",,,,"Lack of F# friendly libraries, Lack of good wrappers for non-F# libraries, Working with C#-centric tooling","JVM, Javascript, Native",,,,Books or longer articles explaining full context,,
14/04/2016 14:14:16,10 or more years,Enterprise development,"No, I don't know much theory",Learner,"C#, Javascript",Less than a year,,I use it for hobby or side projects,Windows,"Visual Studio 2015 or newer, Xamarin","Twitter, F# Weekly, F# bloggers, fsharp channel on Slack","Better domain modelling with records and unions, Conciseness of code (I can see more at a glance), Correctness (no nulls, it works first time), Great community, Having fun again, Learning functional programming in general","Active Patterns, Algebraic types (inc discriminated unions and tuples), Async workflows, Computation expressions, Easy integration with other .NET libraries, The ""piping"" idiom, Type inference, Type providers","Agents (MailboxProcessor), Quotations, Units of measure","Links and instructions from fsharp.org, F# books, F# bloggers, Links posted on social media such as Twitter, Links mentioned in F# Weekly, Videos (e.g. Community for F#), Reading F# code written by experts, Fsharpforfunandprofit",I like theory -- I'm not afraid of monads and other abstractions,"More material with in-depth tutorials, More material with real-world examples and war stories, More short ""live coding"" videos, More podcasts and other audio-only material, More interactive tutorials (e.g. like the F# Koans)",,Not applicable. None of my F# code is used by other people,"Utilities and tools, Machine learning","SQL databases, Event sourcing","Windows, Linux, iOS, Android",It's used unofficially,,Fad: They have concerns over long term language viability,,Not enough real-world code to learn from,"Lack of F# friendly libraries, Lack of good wrappers for non-F# libraries, Working with C#-centric tooling, Less sophisticated tools for refactoring, etc.",None -- I'm happy with the CLR/Mono,,,,"Books or longer articles explaining full context, Recorded talks from a conference or user group, In-depth online courses (e.g. Pluralsight)",,
14/04/2016 14:15:44,10 or more years,Enterprise development,"No, I don't know much theory",Experienced,"C#, F#",2-3 years,,I use it at work or for other commercial uses,"Windows, Mac, Linux","Visual Studio 2015 or newer, Xamarin, VS Code (with Ionide)","Twitter, HN, Reddit and other programming news sites","Better domain modelling with records and unions, Conciseness of code (I can see more at a glance), Correctness (no nulls, it works first time), Great community, Having fun again, Learning functional programming in general, Speed of development, Functional but can be tweaked to get high performance","Async workflows, Computation expressions, Easy integration with other .NET libraries, Immutability by default, Interactive development, No dependency cycles, Simple ""one liner"" type definitions for records and DUs, The ""piping"" idiom, Type inference",Quotations,"F# bloggers, Answers to Stack Overflow questions, Reading F# code written by experts",I like theory -- I'm not afraid of monads and other abstractions,"More short ""live coding"" videos",,Commercial products,Mainstream business & enterprise applications,Event sourcing,"Windows, Mac, Linux",It's officially endorsed in my team for critical/production areas,"Domain modelling: making illegal states unrepresentable, Correctness: fewer bugs and less rework, More productive with fewer developers, Faster time to market, Efficiency/Performance, Easy concurrency with async and agents, Better for solving complex problems",Nothing. Everyone loves it.,,,,None -- I'm happy with the CLR/Mono,,,,"Books or longer articles explaining full context, Recorded talks from a conference or user group",,
14/04/2016 14:23:22,10 or more years,Financial services or similar,"Yes, I enjoy computer science and mathematics",Experienced,"C#, F#",4 or more years,,I use it at work or for other commercial uses,Windows,Visual Studio 2015 or newer,"Twitter, F# Weekly","Better domain modelling with records and unions, Conciseness of code (I can see more at a glance), Correctness (no nulls, it works first time), Having fun again","Algebraic types (inc discriminated unions and tuples), Computation expressions, Immutability by default, Simple ""one liner"" type definitions for records and DUs, Type inference","Agents (MailboxProcessor), Units of measure","F# bloggers, Structured training/workshops, Meetups",I like theory -- I'm not afraid of monads and other abstractions,More material with real-world examples and war stories,,"Internal enterprise projects, Commercial products, Open source projects","None - Just playing around, Utilities and tools, Financial services","SQL databases, Not doing data centric apps",Windows,It's officially endorsed in my team for critical/production areas,"Correctness: fewer bugs and less rework, Better for solving complex problems",Nothing. Everyone loves it.,,,,Javascript,C# is not bad enough to easily drive people to F#,,,"In-person: A talks at user groups, Recorded talks from a conference or user group","Fake, Paket, F# data",
14/04/2016 14:35:12,10 or more years,Commercial software/web development,"Yes, I enjoy computer science and mathematics",Learner,"C, C#, C++, F#, Javascript, Typescript",Less than a year,,I use it at work or for other commercial uses,"Windows, Linux","Visual Studio 2015 or newer, Atom (with Ionide)","Twitter, F# Weekly","Better domain modelling with records and unions, Conciseness of code (I can see more at a glance), Correctness (no nulls, it works first time), Great community, Having fun again, Learning functional programming in general, Speed of development, Functional but can be tweaked to get high performance","Easy integration with other .NET libraries, Simple ""one liner"" type definitions for records and DUs, The ""piping"" idiom, Type inference, Type providers, Units of measure",,"Links and instructions from fsharp.org, F# books, F# bloggers, Links posted on social media such as Twitter, Links mentioned in F# Weekly, Answers to Stack Overflow questions, Videos (e.g. Community for F#)",I like theory -- I'm not afraid of monads and other abstractions,"More material with in-depth tutorials, More material with real-world examples and war stories, More short ""live coding"" videos, More podcasts and other audio-only material, More interactive tutorials (e.g. like the F# Koans)","the Suave.IO Music Store tutorial is perhaps the best tutorial I've ever seen for any language/library ever.  I think it should be used as a point of reference for anyone spitting out a tool/library/framework.  Before you are done with your project, you have to do a Music Store tutorial (or some relevant analogue of that), By comparison I never could penetrate Websharper.
","Commercial products, Open source projects","Algorithm-heavy business applications (non-financial), Custom development/specialist markets, Mainstream business & enterprise applications, Commercial web site/app, Data analysis/statistics","SQL databases, NoSQL database, Analytics","Windows, Mac, Linux, Azure",It's officially endorsed in my team for critical/production areas,"Domain modelling: making illegal states unrepresentable, Correctness: fewer bugs and less rework, More productive with fewer developers, Faster time to market, Better for solving complex problems",Nothing. Everyone loves it.,"Get folders working properly in Visual Studio, make it easier to move files up/down in Visual Studio, fix a few of the syntax highlighting quirks in Visual Studio.

More work on performance. Performance is often ignored by functional/high level language communities. I would love F# to differentiate by having a really clever and efficient compiler and core libraries. I see good work happening in this area and would love to see even more.",,"Lack of F# friendly libraries, Performance issues","LLVM, Native",,,,"Books or longer articles explaining full context, Reference works or documentation with API listings or short tutorials, Recorded talks from a conference or user group","ionide and mono making it possible to develop in linux.

Suave is a wonderful webserver library making it possible to create nice web applications without the need for IIS or the whole MVC/ASP.net framework

FSSQL has been a nice database wrapper I have used because SQL Type Providers are far from ready for production, especially with non MS SQL Server databases.

Very interested in Fabel and similar for replacement of client side javascript
",
14/04/2016 14:37:09,10 or more years,Enterprise development,"Yes, I enjoy computer science and mathematics",Experienced,"C#, C++, F#, Java",4 or more years,,I use it at work or for other commercial uses,"Windows, Mac","Visual Studio 2015 or newer, Emacs","Twitter, F# Weekly","Better domain modelling with records and unions, Conciseness of code (I can see more at a glance), Correctness (no nulls, it works first time), Great community, Having fun again, Speed of development","Async workflows, Computation expressions, Easy integration with other .NET libraries, Immutability by default, Interactive development, No dependency cycles, The ""piping"" idiom, Type inference, Units of measure","Object-oriented compatibility, Quotations","F# books, Links posted on social media such as Twitter, Links mentioned in F# Weekly, Reading F# code written by experts",I like theory -- I'm not afraid of monads and other abstractions,"More material with short ""cookbook"" style information, More material with real-world examples and war stories",,Internal enterprise projects,"Utilities and tools, Algorithm-heavy business applications (non-financial), Financial services, Mainstream business & enterprise applications, Non-commercial web site/app","SQL databases, NoSQL database, Event sourcing, Read-only data sources such as feeds, Analytics, Data integration and EAI",Windows,It's officially endorsed in my team for critical/production areas,"Domain modelling: making illegal states unrepresentable, Correctness: fewer bugs and less rework, More productive with fewer developers, Faster time to market, Better for solving complex problems",Nothing. Everyone loves it.,,,,"LLVM, Native",,,,"In-person: A talks at user groups, In-person: Attending a talks as part of a conference, Books or longer articles explaining full context, Recorded talks from a conference or user group",,
14/04/2016 14:39:34,5-10 years,Commercial software/web development,"Yes, I enjoy computer science and mathematics",Experienced,"C#, F#, Javascript, Python",1-2 years,,I use it at work or for other commercial uses,"Windows, Mac, Linux","Visual Studio 2015 or newer, Xamarin, VS Code (with Ionide)","Twitter, F# Weekly, F# bloggers","Better domain modelling with records and unions, Conciseness of code (I can see more at a glance), Correctness (no nulls, it works first time), Great community, Having fun again, Learning functional programming in general","Active Patterns, Agents (MailboxProcessor), Algebraic types (inc discriminated unions and tuples), Async workflows, Easy integration with other .NET libraries, Immutability by default, Interactive development, Simple ""one liner"" type definitions for records and DUs, The ""piping"" idiom, Type inference","Quotations, Type providers, Units of measure","F# books, F# bloggers, Links mentioned in F# Weekly, Answers to Stack Overflow questions, Reading F# code written by experts, Fun and profit",I'm willing to learn advanced concepts but only if they are relevant and practical,"More material with in-depth tutorials, More material with real-world examples and war stories",,"Internal enterprise projects, Commercial products, Open source projects","Algorithm-heavy business applications (non-financial), Commercial web site/app, Data analysis/statistics, Other","SQL databases, NoSQL database, Event sourcing","Windows, Linux",It's officially endorsed in my team for critical/production areas,"Domain modelling: making illegal states unrepresentable, Correctness: fewer bugs and less rework, Easy concurrency with async and agents",Hiring: They worry about not being able to find F# developers,,"I can't use my knowledge from C# or other imperative languages, Not enough real-world code to learn from","Not being part of the core .NET distribution, Lack of good wrappers for non-F# libraries, Less sophisticated tools for refactoring, etc., Cross-platform issues","LLVM, Native",,,,"In-person: In-depth trainings (2 or 3 days), In-person: Attending a talks as part of a conference, Books or longer articles explaining full context, In-depth online courses (e.g. Pluralsight)","Fake, packet, iodide, Chesapeake (Railway oriented programming), REPL",
14/04/2016 14:46:50,10 or more years,Enterprise development,"Yes, I enjoy computer science and mathematics",Expert,"Erlang, F#, Ocaml/SML",Less than a year,,I use it at work or for other commercial uses,"Windows, Mac","Visual Studio 2015 or newer, VS Code (with Ionide)","Twitter, F# Weekly","Better domain modelling with records and unions, Conciseness of code (I can see more at a glance), Correctness (no nulls, it works first time), Great community, Speed of development","Active Patterns, Algebraic types (inc discriminated unions and tuples), Immutability by default, Type inference",Object-oriented compatibility,"F# books, Structured training/workshops, Reading F# code written by experts",I like theory -- I'm not afraid of monads and other abstractions,"More material with in-depth tutorials, More podcasts and other audio-only material",Don't always assume it's a C#/.NET developer that wants to pick up F#. I think a lot of the learning materials assume you already know all about these things. I personally have almost zero experience with either until F#.,Internal enterprise projects,"Utilities and tools, Algorithm-heavy business applications (non-financial), Machine learning, Commercial web site/app","SQL databases, NoSQL database, Event sourcing, Read-only data sources such as feeds, Analytics","Windows, Linux, Azure",It's officially endorsed in my team for critical/production areas,"Domain modelling: making illegal states unrepresentable, Correctness: fewer bugs and less rework, More productive with fewer developers, Faster time to market, Easy concurrency with async and agents, Better for solving complex problems","Too Windows-centric: They have concerns over cross-platform issues, Too Microsoft-centric: They think it is too closely linked to Microsoft","It's already accepted at my workplace but other places I've worked would need separate buy in for .NET and mono or, if it matures, CoreCLR first.","Don't understand the compiler errors, Not enough real-world code to learn from",Working with C#-centric tooling,Native,"Higher kinder types. Just kidding.

Probably the immaturity of tools outside of visual studio and related .NET conventions. Msbuild and xbuild come to mind as things I'd love to see go away.",Looked good to me. Thank you.,I love what I see in the F# community. It's a unique thing to be a part of and it felt very welcaiming once I decided to take the first step. I only hope that we can reach out to those that haven't taken a first step yet. 😀,"In-person: A talks at user groups, Books or longer articles explaining full context, Reference works or documentation with API listings or short tutorials","Paket, Fake, and ionide have been great for flexible workflows

AsyncSeq comes to mind as a great idea and also a good learning tool for comp. ex.",
14/04/2016 14:48:24,10 or more years,Enterprise development,"Yes, I enjoy computer science and mathematics",Experienced,"C#, Elixir, F#, Visual Basic",2-3 years,,I use it for hobby or side projects,"Windows, Linux","Visual Studio 2015 or newer, Xamarin, Atom (with Ionide), VS Code (with Ionide)","Twitter, Dot Net Rocks","Conciseness of code (I can see more at a glance), Correctness (no nulls, it works first time), Great community, Having fun again, Learning functional programming in general","Active Patterns, Algebraic types (inc discriminated unions and tuples), Async workflows, Backtick naming, Computation expressions, Immutability by default, Interactive development, No dependency cycles, Object expressions, printf that is type checked, The ""piping"" idiom, Type inference","Quotations, Units of measure",TryFSharp.org,I want to learn functional programming but I don't like academic jargon,New to programming resources,,Open source projects,"None - Just playing around, Custom development/specialist markets, Mainstream business & enterprise applications, Research/Teaching","SQL databases, Not doing data centric apps","Windows, Mac, Linux",It's used unofficially,"Domain modelling: making illegal states unrepresentable, Correctness: fewer bugs and less rework, Better for solving complex problems, Better programming in OO languages","No perceived benefits: They don't understand what benefits F# has over C# or other languages, No buy-in: There is lack of acceptance from other teams",,Lack of good tutorials/documentation,"Not being part of the core .NET distribution, Working with C#-centric tooling, Less sophisticated tools for refactoring, etc.","JVM, Javascript, Native",,,,"In-person: In-depth trainings (2 or 3 days), Books or longer articles explaining full context, Reference works or documentation with API listings or short tutorials, In-depth online courses (e.g. Pluralsight)","FeldSpar
VS Code
Union Args Parser
Try FSharp.org
",
14/04/2016 15:05:48,10 or more years,Enterprise development,"Yes, I enjoy computer science and mathematics",Experienced,"Elixir, Java, Python",1-2 years,"1. Complaints about performance on Linux scared me.   2. F# felt too Windows/Visual Studio focused, although I saw this improving.  3. I wanted to write in a functional style but had to use OO to integrate with libraries--If I can't create a pipeline of functions, I don't want to write it (see examples for pulling down a web page).  I'm not sold on OO-functional hybrid, and the code I saw in the wild was all over the OO <-> functional spectrum.",I use it for hobby or side projects,"Mac, Linux","MonoDevelop, Vim","Twitter, F# Weekly, F# bloggers","Better domain modelling with records and unions, Correctness (no nulls, it works first time), Speed of development","Algebraic types (inc discriminated unions and tuples), Immutability by default, The ""piping"" idiom, Type inference, Type providers","Active Patterns, Agents (MailboxProcessor), Computation expressions, Integration with non-F# libraries, Object expressions, Object-oriented compatibility, Quotations, Units of measure","F# books, F# bloggers, Links mentioned in F# Weekly, Videos (e.g. Community for F#)",I'm willing to learn advanced concepts but only if they are relevant and practical,"More material with in-depth tutorials, More material with real-world examples and war stories, More interactive tutorials (e.g. like the F# Koans)","Don't assume .NET knowledge or a windows ecosystem.  Teach from small principles, building up.  See Dan Grossman's online videos/material for ML as an exceptional example of this:  http://courses.cs.washington.edu/courses/cse341/13sp",,"Non-commercial web site/app, Mobile apps",SQL databases,Linux,I don't use F# at work,,"No perceived benefits: They don't understand what benefits F# has over C# or other languages, Hiring: They worry about not being able to find F# developers, Too Windows-centric: They have concerns over cross-platform issues, Too Microsoft-centric: They think it is too closely linked to Microsoft",Embrace other ecosystems.,"Lack of good tutorials/documentation, Not enough real-world code to learn from","Lack of F# friendly libraries, Working with C#-centric tooling",,"Despite the creation of the F# Sofware Foundation, It's still viewed as a technology for Windows users.  The Linux performance story scares everyone with that deployment target away.",,,"Books or longer articles explaining full context, Reference works or documentation with API listings or short tutorials, In-depth online courses (e.g. Pluralsight)","Suave, MonoDevelop",
14/04/2016 15:18:43,10 or more years,Commercial software/web development,"Yes, I enjoy computer science and mathematics",Experienced,"C#, F#",4 or more years,,I use it at work or for other commercial uses,"Windows, Mac","Visual Studio 2015 or newer, Xamarin","Twitter, F# Weekly","Better domain modelling with records and unions, Conciseness of code (I can see more at a glance), Great community, Learning functional programming in general, Speed of development","Agents (MailboxProcessor), Immutability by default, No dependency cycles, The ""piping"" idiom, Type providers","Active Patterns, Object expressions","Links posted on social media such as Twitter, Structured training/workshops",I'm willing to learn advanced concepts but only if they are relevant and practical,,,"Internal enterprise projects, Open source projects","None - Just playing around, Commercial web site/app, Mobile apps","SQL databases, NoSQL database, Event sourcing","Windows, iOS, Azure",It's officially endorsed in my team for critical/production areas,"Domain modelling: making illegal states unrepresentable, Correctness: fewer bugs and less rework, Faster time to market, Better for solving complex problems",Nothing. Everyone loves it.,,,"Not being part of the core .NET distribution, Working with C#-centric tooling",,,,,"In-person: Shorter workshops focused on a specific topic (1 day), In-person: Attending a talks as part of a conference, Reference works or documentation with API listings or short tutorials, In-depth online courses (e.g. Pluralsight)","paket
xamarin (both studio and mobile dev) 
",
14/04/2016 15:20:21,10 or more years,Financial services or similar,"Yes, I enjoy computer science and mathematics",Intermediate,"F#, MATLAB",2-3 years,,I use it at work or for other commercial uses,Windows,Visual Studio 2015 or newer,"Twitter, F# Weekly, F# bloggers, StackOverflow chat","Better domain modelling with records and unions, Conciseness of code (I can see more at a glance), Correctness (no nulls, it works first time), Great community, Having fun again, Learning functional programming in general, Speed of development, Functional but can be tweaked to get high performance","Agents (MailboxProcessor), Async workflows, Easy integration with other .NET libraries, Immutability by default, Interactive development, Object-oriented features (inc. C# compatibility, conciseness), Simple ""one liner"" type definitions for records and DUs, The ""piping"" idiom, Type inference, Type providers","Active Patterns, Computation expressions, Quotations, Units of measure","F# books, F# bloggers, Links posted on social media such as Twitter, Links mentioned in F# Weekly, Answers to Stack Overflow questions, Personal mentoring, Structured training/workshops, Videos (e.g. Community for F#), Reading F# code written by experts",I'm willing to learn advanced concepts but only if they are relevant and practical,"More material with in-depth tutorials, More material with real-world examples and war stories, More short ""live coding"" videos",,Internal enterprise projects,"Financial services, Data analysis/statistics",SQL databases,Windows,It's officially endorsed in my team for critical/production areas,"Domain modelling: making illegal states unrepresentable, Correctness: fewer bugs and less rework, More productive with fewer developers, Faster time to market, Efficiency/Performance, Easy concurrency with async and agents, Better for solving complex problems","Hiring: They worry about not being able to find F# developers, Training: They are worried about getting non-F# developers up to speed",,Not enough real-world code to learn from,"Working with C#-centric tooling, Less sophisticated tools for refactoring, etc., Difficulty in troubleshooting problems",None -- I'm happy with the CLR/Mono,,,,"In-person: Shorter workshops focused on a specific topic (1 day), In-person: Attending a talks as part of a conference, Books or longer articles explaining full context, Reference works or documentation with API listings or short tutorials, Recorded talks from a conference or user group, In-depth online courses (e.g. Pluralsight)",,
14/04/2016 15:21:43,10 or more years,Data or analytics related,"Yes, I enjoy computer science and mathematics",Experienced,"C#, Python",3-4 years,Non Windows environnement ,I use it at work or for other commercial uses,Windows,"Visual Studio 2015 or newer, Visual Studio 2012 or 2013, Sublime Text, VS Code (with Ionide)","Twitter, F# Weekly","Better domain modelling with records and unions, Correctness (no nulls, it works first time), Speed of development","Active Patterns, Algebraic types (inc discriminated unions and tuples), Async workflows, Easy integration with other .NET libraries, Immutability by default, Interactive development, Type providers","Object-oriented compatibility, Static type constraints, Units of measure","F# books, Links posted on social media such as Twitter, Answers to Stack Overflow questions",I like theory -- I'm not afraid of monads and other abstractions,More material with in-depth tutorials,,Internal enterprise projects,"Utilities and tools, Financial services, Mainstream business & enterprise applications","SQL databases, NoSQL database, Read-only data sources such as feeds",Windows,It's officially endorsed in my team for non-critical/non-production code,"Domain modelling: making illegal states unrepresentable, Correctness: fewer bugs and less rework, Better for solving complex problems","No perceived benefits: They don't understand what benefits F# has over C# or other languages, Hiring: They worry about not being able to find F# developers, Fad: They have concerns over long term language viability, Too Microsoft-centric: They think it is too closely linked to Microsoft",,,Working with C#-centric tooling,None -- I'm happy with the CLR/Mono,,,,"Books or longer articles explaining full context, Reference works or documentation with API listings or short tutorials, Recorded talks from a conference or user group","Fs check, Type Providers, Rx",
14/04/2016 15:23:20,10 or more years,Enterprise development,"No, I don't know much theory",Intermediate,"C#, F#",1-2 years,Not using much at work because colleagues resistance to learn something new,I use it at work or for other commercial uses,"Windows, Mac","Visual Studio 2015 or newer, Xamarin, Vim, VS Code (with Ionide)","Twitter, F# Weekly","Better domain modelling with records and unions, Conciseness of code (I can see more at a glance), Correctness (no nulls, it works first time), Having fun again, Learning functional programming in general, Speed of development","Active Patterns, Algebraic types (inc discriminated unions and tuples), Easy integration with other .NET libraries, Immutability by default, Simple ""one liner"" type definitions for records and DUs, The ""piping"" idiom, Type inference, Type providers",Units of measure,"F# books, F# bloggers, Links posted on social media such as Twitter, Links mentioned in F# Weekly, Answers to Stack Overflow questions",I'm willing to learn advanced concepts but only if they are relevant and practical,"More material with short ""cookbook"" style information, More material with real-world examples and war stories, More short ""live coding"" videos",,Internal enterprise projects,"Utilities and tools, Commercial web site/app, Data analysis/statistics",NoSQL database,Windows,It's officially endorsed in my team for non-critical/non-production code,"Domain modelling: making illegal states unrepresentable, Correctness: fewer bugs and less rework, More productive with fewer developers, Faster time to market, Better for solving complex problems",No buy-in: There is lack of acceptance from other teams,"More trainings with real world examples, support on UWP so can be cross platform completely, better support for asp.net web api with good templates especially for iis deployed web api, most enterprise are old fashioned :) 
Better refactoring tools ide support","Lack of good tutorials/documentation, Not enough real-world code to learn from","Lack of F# friendly libraries, Lack of good wrappers for non-F# libraries, Less sophisticated tools for refactoring, etc.","JVM, Javascript, LLVM, Native",,Very good hope to see more in the future to keep improve this beatifull language,,"Books or longer articles explaining full context, Reference works or documentation with API listings or short tutorials, Recorded talks from a conference or user group, In-depth online courses (e.g. Pluralsight)","Ionide
Fake
Paket
Mbrace",
14/04/2016 15:24:46,10 or more years,Enterprise development,"Yes, I enjoy computer science and mathematics",Experienced,"C#, F#, Java, Scala",2-3 years,,I use it at work or for other commercial uses,"Windows, Linux","Visual Studio 2015 or newer, Visual Studio 2012 or 2013, Vim","HN, Reddit and other programming news sites, F# bloggers","Correctness (no nulls, it works first time), Speed of development","Algebraic types (inc discriminated unions and tuples), Async workflows, Computation expressions, Immutability by default, Object expressions, The ""piping"" idiom","Interactive development, Quotations, Type providers, Units of measure","F# bloggers, Reading F# code written by experts",I like theory -- I'm not afraid of monads and other abstractions,"More material with short ""cookbook"" style information, More material with real-world examples and war stories",,"Internal enterprise projects, Commercial products","Utilities and tools, Mainstream business & enterprise applications, Commercial web site/app, Data analysis/statistics, Text analysis/language parsing","SQL databases, Event sourcing","Windows, Linux, Azure, Other",It's officially endorsed in my team for critical/production areas,"Domain modelling: making illegal states unrepresentable, Correctness: fewer bugs and less rework, Easy concurrency with async and agents",Nothing. Everyone loves it.,,Better portability,"Lack of F# friendly libraries, Less sophisticated tools for refactoring, etc., Cross-platform issues","JVM, LLVM",tight coupling to .NET,,,"Books or longer articles explaining full context, In-depth online courses (e.g. Pluralsight)",,
14/04/2016 15:27:58,10 or more years,Enterprise development,"Yes, I enjoy computer science and mathematics",Experienced,"Clojure, F#",1-2 years,,I use it at work or for other commercial uses,"Windows, Mac","Visual Studio 2015 or newer, Xamarin","Twitter, F# Weekly, F# bloggers, fsharp channel on Slack","Having fun again, Learning functional programming in general","Algebraic types (inc discriminated unions and tuples), Interactive development, The ""piping"" idiom","Active Patterns, Type providers, Units of measure","Links and instructions from fsharp.org, F# bloggers",I like theory -- I'm not afraid of monads and other abstractions,"More material with in-depth tutorials, More material with short ""cookbook"" style information",,Internal enterprise projects,"Algorithm-heavy business applications (non-financial), Data analysis/statistics","SQL databases, NoSQL database, Analytics","Windows, Linux",It's officially endorsed in my team for critical/production areas,,Nothing. Everyone loves it.,,"Lack of good tutorials/documentation, Not enough real-world code to learn from","Not being part of the core .NET distribution, Lack of F# friendly libraries, Lack of good wrappers for non-F# libraries, Less sophisticated tools for refactoring, etc.","JVM, LLVM",,,,"In-person: Shorter workshops focused on a specific topic (1 day), In-person: A talks at user groups, In-person: Attending a talks as part of a conference, Books or longer articles explaining full context, In-depth online courses (e.g. Pluralsight)",,
14/04/2016 15:33:12,10 or more years,Commercial software/web development,"Yes, I enjoy computer science and mathematics",Intermediate,"C#, F#, Haskell, Typescript",2-3 years,,I use it at work or for other commercial uses,Windows,"Visual Studio 2015 or newer, Emacs, VS Code (with Ionide)","Twitter, F# Weekly, F# bloggers","Better domain modelling with records and unions, Conciseness of code (I can see more at a glance), Correctness (no nulls, it works first time), Great community, Having fun again, Learning functional programming in general, Speed of development","Active Patterns, Algebraic types (inc discriminated unions and tuples), Async workflows, Backtick naming, Computation expressions, Immutability by default, No dependency cycles, Quotations, Simple ""one liner"" type definitions for records and DUs, Type inference, Type providers",,"F# bloggers, Links posted on social media such as Twitter, Links mentioned in F# Weekly, Answers to Stack Overflow questions, Reading F# code written by experts",,"More material with in-depth tutorials, More podcasts and other audio-only material",,"Internal enterprise projects, Commercial products","Utilities and tools, Custom development/specialist markets, Mainstream business & enterprise applications, Research/Teaching, Text analysis/language parsing, Other","SQL databases, NoSQL database, Event sourcing, Read-only data sources such as feeds, Data integration and EAI",Windows,It's used unofficially,"Domain modelling: making illegal states unrepresentable, Correctness: fewer bugs and less rework, More productive with fewer developers, Faster time to market, Easy concurrency with async and agents, Better for solving complex problems",No buy-in: There is lack of acceptance from other teams,If Microsoft declared that F# was a general purpose language (rather than having strengths for certain types) that would go a long way.,Not enough real-world code to learn from,"Lack of good wrappers for non-F# libraries, Working with C#-centric tooling, Less sophisticated tools for refactoring, etc., The .NET libraries are fundamentally designed wrong (OO).","JVM, Javascript, LLVM, Native",It lacks some of the interesting things that Haskell can do and therefore does not get as much attention as it could from people that are interested in pushing the boundaries (although there are some people out there doing a great job in F#!).,,,"Reference works or documentation with API listings or short tutorials, Recorded talks from a conference or user group, In-depth online courses (e.g. Pluralsight)","FParsec, FsData, FsCheck",
14/04/2016 15:36:50,10 or more years,Enterprise development,"No, I don't know much theory",Intermediate,"C#, F#",4 or more years,,I use it at work or for other commercial uses,"Windows, Mac","Visual Studio 2015 or newer, Xamarin, VS Code (with Ionide)","Twitter, F# bloggers, fsharp channel on Slack","Better domain modelling with records and unions, Conciseness of code (I can see more at a glance), Correctness (no nulls, it works first time), Having fun again, Learning functional programming in general, Functional but can be tweaked to get high performance","Active Patterns, Algebraic types (inc discriminated unions and tuples), Easy integration with other .NET libraries, Immutability by default, Interactive development, The ""piping"" idiom, Type inference","Agents (MailboxProcessor), Object-oriented compatibility, Quotations, Units of measure","F# books, F# bloggers, Reading F# code written by experts, F# for Fun and Profit",I'm willing to learn advanced concepts but only if they are relevant and practical,"More material with in-depth tutorials, More material with short ""cookbook"" style information, More material with real-world examples and war stories, More interactive tutorials (e.g. like the F# Koans)",,"Internal enterprise projects, Open source projects","Utilities and tools, Algorithm-heavy business applications (non-financial), Machine learning, Mainstream business & enterprise applications, Commercial web site/app, Data analysis/statistics, Text analysis/language parsing","SQL databases, NoSQL database, Event sourcing","Windows, Amazon Web services",It's officially endorsed in my team for critical/production areas,"Domain modelling: making illegal states unrepresentable, Correctness: fewer bugs and less rework","Hiring: They worry about not being able to find F# developers, Training: They are worried about getting non-F# developers up to speed, Fad: They have concerns over long term language viability, Too Windows-centric: They have concerns over cross-platform issues, Too Microsoft-centric: They think it is too closely linked to Microsoft",,Not enough real-world code to learn from,"Not being part of the core .NET distribution, Working with C#-centric tooling, Less sophisticated tools for refactoring, etc., Difficulty in troubleshooting problems","JVM, Native",Weak tooling,,,"Books or longer articles explaining full context, Reference works or documentation with API listings or short tutorials, Recorded talks from a conference or user group",,
14/04/2016 15:36:52,5-10 years,Commercial software/web development,"No, I don't know much theory",Learner,"C#, Javascript, Python, Ruby",Less than a year,,Investigation for daily use,"Windows, Mac","Visual Studio 2015 or newer, Sublime Text, VS Code (with Ionide)",Twitter,"Conciseness of code (I can see more at a glance), Correctness (no nulls, it works first time), Having fun again, Learning functional programming in general","Immutability by default, Type inference, Type providers",,F# books,I'm willing to learn advanced concepts but only if they are relevant and practical,"More material with in-depth tutorials, More interactive tutorials (e.g. like the F# Koans)",,Not applicable. None of my F# code is used by other people,None - Just playing around,Read-only data sources such as feeds,"Windows, Mac",I don't use F# at work,,,,,,,,,,"In-person: In-depth trainings (2 or 3 days), Books or longer articles explaining full context, Reference works or documentation with API listings or short tutorials, Recorded talks from a conference or user group, In-depth online courses (e.g. Pluralsight)",,
14/04/2016 15:40:54,2-5 years,Commercial software/web development,"Yes, I enjoy computer science and mathematics",Intermediate,"C#, C++, F#, Java, Javascript",1-2 years,,I use it at work or for other commercial uses,"Windows, Mac","Visual Studio 2015 or newer, Atom (with Ionide), VS Code (with Ionide)","Twitter, F# Weekly, HN, Reddit and other programming news sites, F# bloggers","Conciseness of code (I can see more at a glance), Correctness (no nulls, it works first time), Having fun again, Learning functional programming in general, Speed of development, Functional but can be tweaked to get high performance","Active Patterns, Async workflows, Computation expressions, Easy integration with other .NET libraries, Immutability by default, Interactive development, No dependency cycles, Object-oriented features (inc. C# compatibility, conciseness), The ""piping"" idiom, Type inference, Type providers","Agents (MailboxProcessor), Object expressions, Units of measure","MSDN, Links and instructions from fsharp.org, F# books, F# bloggers, Links mentioned in F# Weekly, Structured training/workshops, Reading F# code written by experts, Fsharpforfunandprofit.com",I'm willing to learn advanced concepts but only if they are relevant and practical,"More material with in-depth tutorials, More material with real-world examples and war stories, More interactive tutorials (e.g. like the F# Koans)",Fsharpforfunandprofit is a fantastic resource we need more of that.,"Internal enterprise projects, Commercial products, Open source projects","Utilities and tools, Algorithm-heavy business applications (non-financial), Custom development/specialist markets, Machine learning, Mainstream business & enterprise applications, Commercial web site/app, Non-commercial web site/app, Other","SQL databases, NoSQL database, Event sourcing, Read-only data sources such as feeds, Analytics","Windows, Linux, Azure",It's officially endorsed in my team for critical/production areas,"Correctness: fewer bugs and less rework, More productive with fewer developers, Faster time to market, Efficiency/Performance, Easy concurrency with async and agents, Better for solving complex problems",Nothing. Everyone loves it.,I think we need to do more advocacy. This notion that functional languages are inefficient unless they are Haskell still persists.,I can't use my knowledge from C# or other imperative languages,"Lack of good wrappers for non-F# libraries, Working with C#-centric tooling, Difficulty in troubleshooting problems",Native,"I think it's biggest weakness is also its biggest strength. I think languages like Scala are less strict about backwards compatibility to Java and they are becoming the deafcto way to program on the JVM.

I think F# should be more open to beginners coming from Java and C#. I know this means less pure but there has to be a way.",,,"In-person: Shorter workshops focused on a specific topic (1 day), In-person: A talks at user groups, Books or longer articles explaining full context","Fake
Paket 
Data Providers by Patreicek 
Marvel (internal library at jet.com)",
14/04/2016 15:47:53,2-5 years,Commercial software/web development,"Yes, I enjoy computer science and mathematics",Intermediate,"C#, F#",1-2 years,,I use it at work or for other commercial uses,"Windows, Mac","Visual Studio 2015 or newer, Atom (with Ionide)","Twitter, F# Weekly, HN, Reddit and other programming news sites, F# bloggers, fsharp channel on Slack","Better domain modelling with records and unions, Conciseness of code (I can see more at a glance), Correctness (no nulls, it works first time), Learning functional programming in general, Speed of development","Active Patterns, Async workflows, Immutability by default, No dependency cycles, printf that is type checked, Simple ""one liner"" type definitions for records and DUs, The ""piping"" idiom","Agents (MailboxProcessor), Object-oriented compatibility","F# bloggers, Answers to Stack Overflow questions, Personal mentoring",I'm willing to learn advanced concepts but only if they are relevant and practical,"More material with in-depth tutorials, More material with short ""cookbook"" style information, More material with real-world examples and war stories",,Commercial products,Commercial web site/app,"SQL databases, Event sourcing, Read-only data sources such as feeds","Windows, Azure",It's officially endorsed in my team for critical/production areas,"Domain modelling: making illegal states unrepresentable, Correctness: fewer bugs and less rework, Efficiency/Performance, Easy concurrency with async and agents",Nothing. Everyone loves it.,,"Lack of good tutorials/documentation, Installation process, Don't understand the compiler errors","Not being part of the core .NET distribution, Lack of F# friendly libraries, Lack of good wrappers for non-F# libraries, Working with C#-centric tooling, Less sophisticated tools for refactoring, etc., Cross-platform issues",JVM,,,,"In-person: In-depth trainings (2 or 3 days), Books or longer articles explaining full context, Reference works or documentation with API listings or short tutorials",F# Power tools,
14/04/2016 15:52:26,10 or more years,Enterprise development,"No, I don't know much theory",Experienced,F#,Less than a year,,I use it at work or for other commercial uses,Windows,Visual Studio 2015 or newer,"F# bloggers, StackOverflow","Better domain modelling with records and unions, Conciseness of code (I can see more at a glance), Correctness (no nulls, it works first time), Speed of development, Functional but can be tweaked to get high performance","Active Patterns, Computation expressions, Immutability by default, Interactive development, No dependency cycles, The ""piping"" idiom, Type inference","Agents (MailboxProcessor), Units of measure","F# bloggers, Answers to Stack Overflow questions, Personal mentoring",I'm willing to learn advanced concepts but only if they are relevant and practical,"More material with short ""cookbook"" style information, More material with real-world examples and war stories, More short ""live coding"" videos, More interactive tutorials (e.g. like the F# Koans)",,Internal enterprise projects,"Utilities and tools, Mainstream business & enterprise applications","SQL databases, NoSQL database, Event sourcing","Windows, Azure",It's officially endorsed in my team for critical/production areas,"Domain modelling: making illegal states unrepresentable, Correctness: fewer bugs and less rework, More productive with fewer developers, Faster time to market, Efficiency/Performance, Easy concurrency with async and agents",Nothing. Everyone loves it.,,"Lack of good tutorials/documentation, Not enough real-world code to learn from","Not being part of the core .NET distribution, Lack of F# friendly libraries, Lack of good wrappers for non-F# libraries, Cross-platform issues",,,,,In-person: In-depth trainings (2 or 3 days),,
14/04/2016 16:00:37,10 or more years,Enterprise development,"Yes, I enjoy computer science and mathematics",Intermediate,"C#, Javascript, Typescript, Visual Basic",Less than a year,,I use it for hobby or side projects,Windows,Visual Studio 2015 or newer,"Twitter, F# bloggers","Better domain modelling with records and unions, Conciseness of code (I can see more at a glance), Correctness (no nulls, it works first time), Having fun again, Learning functional programming in general","Active Patterns, Agents (MailboxProcessor), Algebraic types (inc discriminated unions and tuples), Async workflows, Backtick naming, Computation expressions, Easy integration with other .NET libraries, Immutability by default, Object-oriented features (inc. C# compatibility, conciseness), Simple ""one liner"" type definitions for records and DUs, The ""piping"" idiom, Type inference, Type providers","Active Patterns, Computation expressions","F# books, F# bloggers, Videos (e.g. Community for F#), Reading F# code written by experts, github projects using f# like sqlprovider",I'm willing to learn advanced concepts but only if they are relevant and practical,"More material with in-depth tutorials, More material with short ""cookbook"" style information, More material with real-world examples and war stories, More interactive tutorials (e.g. like the F# Koans)",Create a somehow complex real world app with data access and a screen in order to get a real feel of how it works on a typical business app.,Not applicable. None of my F# code is used by other people,"Utilities and tools, Custom development/specialist markets, Mainstream business & enterprise applications, Commercial web site/app","SQL databases, NoSQL database","Windows, WinPhone, Azure, Amazon Web services",I don't use F# at work,,"No perceived benefits: They don't understand what benefits F# has over C# or other languages, Hiring: They worry about not being able to find F# developers, Training: They are worried about getting non-F# developers up to speed, No buy-in: There is lack of acceptance from other teams",Create more reference applications for business and web scenarios,"Don't understand the compiler errors, Not enough real-world code to learn from","Less sophisticated tools for refactoring, etc., Difficulty in troubleshooting problems",None -- I'm happy with the CLR/Mono,The main problem is to explain the type inference and generics situations to other. For example it is somehow hard to explain what is 'a -> b . the message should be a little bit clearer. Maybe create a link with a more detailed error description and examples to show the causes and solutions in a fancy website. The people need to feel that the infra and compiler really wants to help them.,,,"In-person: In-depth trainings (2 or 3 days), In-person: A talks at user groups, Books or longer articles explaining full context, Reference works or documentation with API listings or short tutorials, Recorded talks from a conference or user group, In-depth online courses (e.g. Pluralsight)",,
14/04/2016 16:00:53,10 or more years,Enterprise development,"No, I don't know much theory",Intermediate,"C#, Javascript, Objective-C, Ruby, Swift, Typescript",2-3 years,,I use it for hobby or side projects,"Windows, Mac","Visual Studio 2015 or newer, Visual Studio 2012 or 2013, VS Code (with Ionide)",Twitter,"Having fun again, Learning functional programming in general",,,"Links and instructions from fsharp.org, F# bloggers, Videos (e.g. Community for F#), Reading F# code written by experts",I like theory -- I'm not afraid of monads and other abstractions,"More material with short ""cookbook"" style information, More material with real-world examples and war stories, More podcasts and other audio-only material, More interactive tutorials (e.g. like the F# Koans)",,Not applicable. None of my F# code is used by other people,None - Just playing around,,,I don't use F# at work,,"Hiring: They worry about not being able to find F# developers, Money: They worry that good F# developers will cost too much, Fad: They have concerns over long term language viability, No buy-in: There is lack of acceptance from other teams",,Not enough real-world code to learn from,,,,,,"In-person: Shorter workshops focused on a specific topic (1 day), In-person: A talks at user groups, In-person: Attending a talks as part of a conference, Recorded talks from a conference or user group, In-depth online courses (e.g. Pluralsight)",,
14/04/2016 16:06:55,2-5 years,Commercial software/web development,"No, I don't know much theory",Learner,"C#, F#",Less than a year,,I use it at work or for other commercial uses,"Windows, Linux","Visual Studio 2015 or newer, VS Code (with Ionide)","Twitter, F# Weekly, F# bloggers","Conciseness of code (I can see more at a glance), Correctness (no nulls, it works first time), Great community, Having fun again, Learning functional programming in general, Speed of development","Algebraic types (inc discriminated unions and tuples), Async workflows, Easy integration with other .NET libraries, Immutability by default, No dependency cycles, Simple ""one liner"" type definitions for records and DUs, The ""piping"" idiom, Type inference","Agents (MailboxProcessor), Quotations, Type providers, Units of measure","F# bloggers, Links mentioned in F# Weekly, Videos (e.g. Community for F#), Reading F# code written by experts",I'm willing to learn advanced concepts but only if they are relevant and practical,"More material with in-depth tutorials, More material with short ""cookbook"" style information, More material with real-world examples and war stories","There are a ton of great videos/talks out there, but these can sometimes be a little inaccessible (relatively speaking).  I find information contained in blog posts to be far more accessible, and also more visible to others who aren't willing to invest time sitting through an hour long talk.  It would be really great if many of the talks could be transcribed/transformed into longer form blog posts.",Commercial products,Commercial web site/app,"SQL databases, Event sourcing",Windows,It's officially endorsed in my team for critical/production areas,,Nothing. Everyone loves it.,,,"Lack of good wrappers for non-F# libraries, Working with C#-centric tooling, Less sophisticated tools for refactoring, etc.","Javascript, LLVM, Native","1. We need tooling on par with C#.  I'd really like to see F# take advantage of advances in Roslyn tooling (and build system; that instant reload I've seen in ASP.NET demos looks really great).
2. We need more articles about how to get F# set up in a production environment, end-to-end.  We have lots of cool proof-of-concept demos, but not much about how people are using it in real world environments.
3. We need to show (more) that it is not completely dependent on Microsoft tooling.  Great strides have been made here with Ionide, but even Ionide is kind of buggy.  Plus, most demos of Ionide just show fsx scripts, not how to create multi-project solutions and then get that into an AWS VM (and it's important to show that F# can run just as well on AWS as Azure, otherwise people will irrationally fear Microsoft lock-in).",,,"Books or longer articles explaining full context, Recorded talks from a conference or user group, In-depth online courses (e.g. Pluralsight)","1. FAKE
2. Paket
3. AsyncSeq
4. Ionide",
14/04/2016 16:10:57,10 or more years,Science or related,"Yes, I enjoy computer science and mathematics",Experienced,"C#, F#",3-4 years,,I use it at work or for other commercial uses,Windows,Visual Studio 2015 or newer,"Twitter, F# Weekly, HN, Reddit and other programming news sites","Better domain modelling with records and unions, Conciseness of code (I can see more at a glance), Correctness (no nulls, it works first time), Speed of development, Type inference","Algebraic types (inc discriminated unions and tuples), Computation expressions, Immutability by default, Simple ""one liner"" type definitions for records and DUs, The ""piping"" idiom, Type inference, Type providers, Units of measure","Agents (MailboxProcessor), Interactive development, Quotations","F# bloggers, http://fsharpforfunandprofit.com",I like theory -- I'm not afraid of monads and other abstractions,"More material with short ""cookbook"" style information, More podcasts and other audio-only material",Better error messages.,"Internal enterprise projects, Commercial products","Utilities and tools, Algorithm-heavy business applications (non-financial), Data analysis/statistics","SQL databases, Read-only data sources such as feeds",Windows,It's officially endorsed in my team for critical/production areas,"Domain modelling: making illegal states unrepresentable, Correctness: fewer bugs and less rework, Easy concurrency with async and agents, Better for solving complex problems",No perceived benefits of using F# in frontend (ASP.NET),,"Lack of good tutorials/documentation, Installation process","Lack of F# friendly libraries, Lack of good wrappers for non-F# libraries, Less sophisticated tools for refactoring, etc.","LLVM, Native","FSharp.Core reference problems.
Lack of documentation/guides about using IDEs and project management tools.",,My answers regarding learning F# are related to situation 1-2 years ago.,"In-person: A talks at user groups, Books or longer articles explaining full context, Reference works or documentation with API listings or short tutorials","Visual F# Power Tools
ExtCore
FsCheck
FAKE
FsLab",
14/04/2016 16:13:39,10 or more years,Commercial software/web development,"Yes, I enjoy computer science and mathematics",Intermediate,"C#, F#, Javascript",Less than a year,,I use it for hobby or side projects,Windows,"Visual Studio 2015 or newer, VS Code (with Ionide)","Twitter, F# Weekly, F# bloggers","Better domain modelling with records and unions, Conciseness of code (I can see more at a glance), Correctness (no nulls, it works first time), Great community, Having fun again, Learning functional programming in general","Active Patterns, Easy integration with other .NET libraries, Immutability by default, No dependency cycles, Object-oriented features (inc. C# compatibility, conciseness), printf that is type checked, The ""piping"" idiom, Type inference, Type providers, Units of measure","Agents (MailboxProcessor), Computation expressions, Quotations","F# books, F# bloggers, Links mentioned in F# Weekly, Reading F# code written by experts",I want to learn functional programming but I don't like academic jargon,"More material with in-depth tutorials, More material with short ""cookbook"" style information, More interactive tutorials (e.g. like the F# Koans)",,,,,,It's used unofficially,"Domain modelling: making illegal states unrepresentable, Correctness: fewer bugs and less rework",,,,Not being part of the core .NET distribution,,,,,"Books or longer articles explaining full context, Recorded talks from a conference or user group, In-depth online courses (e.g. Pluralsight)",,
14/04/2016 16:15:03,2-5 years,Enterprise development,"Yes, I enjoy computer science and mathematics",Beginner,"C#, Java, Javascript, Typescript",Less than two months,I want to ,I use it for hobby or side projects,Windows,"Visual Studio 2015 or newer, Sublime Text","Twitter, F# Weekly","Better domain modelling with records and unions, Conciseness of code (I can see more at a glance), Correctness (no nulls, it works first time), Great community, Learning functional programming in general, Speed of development","Async workflows, Backtick naming, Easy integration with other .NET libraries, Immutability by default, Interactive development, The ""piping"" idiom, Type inference, Type providers","Active Patterns, Agents (MailboxProcessor), Integration with non-F# libraries, Units of measure","F# bloggers, Videos (e.g. Community for F#), Reading F# code written by experts, FSharp for fun and profit",I'm willing to learn advanced concepts but only if they are relevant and practical,"More material with in-depth tutorials, More material with short ""cookbook"" style information, More short ""live coding"" videos, More interactive tutorials (e.g. like the F# Koans)",More pluralsight like tutorials on web development and mobile development using Xamarin.,Not applicable. None of my F# code is used by other people,"Non-commercial web site/app, Mobile apps, Data analysis/statistics","SQL databases, NoSQL database, Event sourcing","Windows, iOS, Android, WinPhone",I don't use F# at work,"Domain modelling: making illegal states unrepresentable, Correctness: fewer bugs and less rework, More productive with fewer developers, Faster time to market, Efficiency/Performance, Easy concurrency with async and agents, Better for solving complex problems","No perceived benefits: They don't understand what benefits F# has over C# or other languages, Training: They are worried about getting non-F# developers up to speed, No buy-in: There is lack of acceptance from other teams",,"Lack of good tutorials/documentation, Not enough real-world code to learn from","Not being part of the core .NET distribution, Lack of F# friendly libraries","JVM, LLVM",,,"I love FSharp, as a beginner I'm looking for great content and tutorials on mobile(Xamarin) and web(ASP.NET) development.","In-person: In-depth trainings (2 or 3 days), Books or longer articles explaining full context, Reference works or documentation with API listings or short tutorials, Recorded talks from a conference or user group, In-depth online courses (e.g. Pluralsight)","FSharp.data
Xplot
",
14/04/2016 16:22:12,10 or more years,Enterprise development,"Yes, I enjoy computer science and mathematics",Expert,"C#, F#",4 or more years,,I use it at work or for other commercial uses,"Windows, Mac","Visual Studio 2015 or newer, Xamarin","Twitter, Google+, Jet.com tech blog","Correctness (no nulls, it works first time), Scalability","Agents (MailboxProcessor), Async workflows, Immutability by default, Object-oriented features (inc. C# compatibility, conciseness), Type inference","Quotations, Type providers, Units of measure","F# books, Links posted on social media such as Twitter, Answers to Stack Overflow questions",I'm willing to learn advanced concepts but only if they are relevant and practical,More material with real-world examples and war stories,,"Internal enterprise projects, Open source projects","Algorithm-heavy business applications (non-financial), Financial services, Commercial web site/app","SQL databases, NoSQL database, Event sourcing, Read-only data sources such as feeds","Windows, Azure",It's officially endorsed in my team for critical/production areas,"Correctness: fewer bugs and less rework, More productive with fewer developers, Efficiency/Performance, Easy concurrency with async and agents",Hiring: They worry about not being able to find F# developers,,,"Less sophisticated tools for refactoring, etc., Visual Studio debug breakpoint behavior",None -- I'm happy with the CLR/Mono,,,,"In-person: A talks at user groups, Books or longer articles explaining full context, Reference works or documentation with API listings or short tutorials","Newtonsoft.Json, FSharp.Data, Xamarin's F# support",
14/04/2016 16:29:50,10 or more years,Enterprise development,"Yes, I enjoy computer science and mathematics",Experienced,"C#, F#, Javascript, Typescript",1-2 years,,I use it at work or for other commercial uses,Windows,Visual Studio 2015 or newer,"F# Weekly, F# bloggers, fsharp channel on Slack, Company Slack/coworkers","Better domain modelling with records and unions, Conciseness of code (I can see more at a glance), Correctness (no nulls, it works first time), Great community, Having fun again, Learning functional programming in general, Speed of development, Functional but can be tweaked to get high performance","Algebraic types (inc discriminated unions and tuples), Async workflows, Computation expressions, Easy integration with other .NET libraries, Immutability by default, printf that is type checked, Simple ""one liner"" type definitions for records and DUs, The ""piping"" idiom, Type inference, Pattern matching","Active Patterns, Agents (MailboxProcessor), Interactive development, Object expressions, Quotations, Type providers, Units of measure","F# bloggers, Links mentioned in F# Weekly, Personal mentoring, Reading F# code written by experts, fsharpforfunandprofit.org",I like theory -- I'm not afraid of monads and other abstractions,,,"Internal enterprise projects, Commercial products, Open source projects","Utilities and tools, Algorithm-heavy business applications (non-financial), Custom development/specialist markets, Machine learning, Mainstream business & enterprise applications, Commercial web site/app, Data analysis/statistics, Text analysis/language parsing","SQL databases, NoSQL database, Event sourcing, Read-only data sources such as feeds, Analytics, Data integration and EAI","Windows, Linux, Azure",It's officially endorsed in my team for critical/production areas,"Domain modelling: making illegal states unrepresentable, Correctness: fewer bugs and less rework, More productive with fewer developers, Faster time to market, Efficiency/Performance, Easy concurrency with async and agents, Better for solving complex problems",Nothing. Everyone loves it.,,Don't understand the compiler errors,"Lack of good wrappers for non-F# libraries, Less sophisticated tools for refactoring, etc., Cross-platform issues",Native,,,,"In-person: Shorter workshops focused on a specific topic (1 day), Books or longer articles explaining full context, Reference works or documentation with API listings or short tutorials",,
14/04/2016 16:30:16,10 or more years,Enterprise development,"Yes, I enjoy computer science and mathematics",Experienced,"C#, F#, Haskell, Java, Javascript",1-2 years,,I use it at work or for other commercial uses,Windows,"Visual Studio 2015 or newer, Visual Studio 2012 or 2013, Sublime Text","Twitter, F# bloggers","Better domain modelling with records and unions, Conciseness of code (I can see more at a glance), Correctness (no nulls, it works first time), Having fun again","Algebraic types (inc discriminated unions and tuples), Computation expressions, Immutability by default, The ""piping"" idiom, Type providers","Agents (MailboxProcessor), Units of measure","MSDN, F# bloggers, Answers to Stack Overflow questions",I like theory -- I'm not afraid of monads and other abstractions,,,Commercial products,"Algorithm-heavy business applications (non-financial), Custom development/specialist markets, Commercial web site/app","SQL databases, Event sourcing, Read-only data sources such as feeds",Windows,It's officially endorsed in my team for critical/production areas,"Domain modelling: making illegal states unrepresentable, Correctness: fewer bugs and less rework","Hiring: They worry about not being able to find F# developers, Too Windows-centric: They have concerns over cross-platform issues, Too Microsoft-centric: They think it is too closely linked to Microsoft, No buy-in: There is lack of acceptance from other teams",,,"Lack of F# friendly libraries, Lack of good wrappers for non-F# libraries, Less sophisticated tools for refactoring, etc., Performance issues",None -- I'm happy with the CLR/Mono,,,,"Books or longer articles explaining full context, Recorded talks from a conference or user group",,
14/04/2016 16:40:28,5-10 years,Commercial software/web development,"No, I don't know much theory",Intermediate,"C#, Java, Javascript, Objective-C",Less than a year,,I use it for hobby or side projects,Mac,"Visual Studio 2015 or newer, Xamarin",Twitter,"Better domain modelling with records and unions, Conciseness of code (I can see more at a glance), Correctness (no nulls, it works first time), Learning functional programming in general","Algebraic types (inc discriminated unions and tuples), Backtick naming, Computation expressions, Immutability by default, Interactive development, No dependency cycles, Simple ""one liner"" type definitions for records and DUs, The ""piping"" idiom, Type inference, Type providers","Active Patterns, Agents (MailboxProcessor), Integration with non-F# libraries, Object expressions, Units of measure","Links posted on social media such as Twitter, Videos (e.g. Community for F#)",I'm willing to learn advanced concepts but only if they are relevant and practical,"More material with in-depth tutorials, More material with real-world examples and war stories",,Internal enterprise projects,None - Just playing around,Not doing data centric apps,Windows,I don't use F# at work,,"No perceived benefits: They don't understand what benefits F# has over C# or other languages, Training: They are worried about getting non-F# developers up to speed",More concrete and success stories. Unfortunately too few companies use F# and talk about it :(,Not enough real-world code to learn from,,"Javascript, Native",,,,"In-person: Attending a talks as part of a conference, Books or longer articles explaining full context, Recorded talks from a conference or user group, In-depth online courses (e.g. Pluralsight)",,
14/04/2016 16:43:50,10 or more years,Embedded,"Yes, I enjoy computer science and mathematics",Experienced,"C, C#, C++, Erlang, F#, Java, Bash",4 or more years,,I use it for hobby or side projects,Windows,"Visual Studio 2015 or newer, Vim, Sublime Text, VS Code (w/o Ionide)","Twitter, F# Weekly",Thinking functional,"Active Patterns, Algebraic types (inc discriminated unions and tuples), Computation expressions, Immutability by default, Object expressions, The ""piping"" idiom, Units of measure, The unit type","Quotations, Type providers","Reading F# code written by experts, Reading the reference manual/specification",I like theory -- I'm not afraid of monads and other abstractions,"More material with in-depth tutorials, More material with real-world examples and war stories",,Open source projects,"None - Just playing around, Utilities and tools, Custom development/specialist markets, Non-commercial web site/app, Text analysis/language parsing, Other","SQL databases, Not doing data centric apps","Windows, Mac, Linux",I use it to demonstrate functional concepts,"Domain modelling: making illegal states unrepresentable, Prototyping advanced concepts",JIT:ing and VM:s are no good for us. ,"For us JIT:ed languages with GC is no good. Swift in that regard is more interesting AFAIK I doesn't use neither GC nor JIT:ing (might be wrong).

In addition we need low-level memory management.

Obviously this is a huge thing and I don't expect F# but to steer in this direction but since you asked.",In the beginning it was hard to see the benefit of learning F# over C# (C# is very decent). Only much later I came to realize F# is significantly better.,Compilation times,"LLVM, Native","Unfortunately I think F# being tied to .NET is a big problem. I don't say it should be JVM neither but flexible in what it targets. Ultimately I would like a pure native F# I could run in an embedded environment.

Overall I think F# is great but I lack progress, F# seems content in being the greatest .NET language but it's not moving IMHO.
Consider what following could enable:
Type Classes
Enforcing mathematical functions through the typing system (not necessary saying Haskell Monad is the way to go)
Macros
Dependent Types
constexpr (C++11)

Evolving a language is hard but if the C++ guys manages to introduce functional concepts, constexpr, RValue references into a poorly specified language with huge code base I  think F# could too.",,,"Books or longer articles explaining full context, Reference works or documentation with API listings or short tutorials, Non-video content","FsCheck
FParsec
WebSharper (especially the Formlets)
Hopac
Streams",
14/04/2016 16:59:17,10 or more years,Commercial software/web development,"No, I don't know much theory",Experienced,"F#, Javascript, Typescript",4 or more years,,I use it at work or for other commercial uses,"Windows, Mac","Visual Studio 2015 or newer, Xamarin, Vim, VS Code (with Ionide)","Twitter, F# Weekly, Google groups, F# bloggers, fsharp channel on Slack, Community for F#","Better domain modelling with records and unions, Conciseness of code (I can see more at a glance), Correctness (no nulls, it works first time), Great community, Having fun again, Learning functional programming in general, Speed of development, Functional but can be tweaked to get high performance","Active Patterns, Agents (MailboxProcessor), Algebraic types (inc discriminated unions and tuples), Async workflows, Backtick naming, Computation expressions, Easy integration with other .NET libraries, Immutability by default, Interactive development, No dependency cycles, Object expressions, printf that is type checked, Simple ""one liner"" type definitions for records and DUs, The ""piping"" idiom, Type inference, Type providers, Units of measure, Statically resolved type parameters",,"F# bloggers, Links posted on social media such as Twitter, Links mentioned in F# Weekly, Videos (e.g. Community for F#), Reading F# code written by experts",I like theory -- I'm not afraid of monads and other abstractions,"More material with short ""cookbook"" style information, More material with real-world examples and war stories, More short ""live coding"" videos, More interactive tutorials (e.g. like the F# Koans)","Pairing and mentoring sessions work best for me. The Community for F# dojos have taught and engaged me the most, both in terms of retention and comaraderie with fellow developers.","Commercial products, Open source projects","Algorithm-heavy business applications (non-financial), Commercial web site/app, Non-commercial web site/app, Data analysis/statistics","SQL databases, Read-only data sources such as feeds, Data integration and EAI","iOS, Azure",It's officially endorsed in my team for critical/production areas,"Domain modelling: making illegal states unrepresentable, Correctness: fewer bugs and less rework, More productive with fewer developers, Faster time to market, Efficiency/Performance, Easy concurrency with async and agents, Better for solving complex problems",Nothing. Everyone loves it.,We could potentially replace our use of Python and Matlab were F# to have libraries of algorithms similar to those found in NumPy and SciPy. Support for or tools like Jupyter or the equivalent (Xamarin Workbooks look promising) would also really help offset reliance on other languages.,Nothing; I found F# far easier to learn than OO languages I learned previously,"Not being part of the core .NET distribution, Working with C#-centric tooling","Javascript, LLVM, Native, Erlang and WebAssembly","I see a few major issues:
1. Tight coupling to .NET makes it more difficult to build tools that compile to other platforms.
2. Compiler forks need to get merged back together
3. Management of compiler source code seems slow to respond in the past. The new RFC system seems like a promising change.",,,"Reference works or documentation with API listings or short tutorials, Recorded talks from a conference or user group, I learn best by pairing on a focused topic","Gluon
Suave
Freya
FAKE
Paket",
14/04/2016 17:58:06,10 or more years,Enterprise development,"No, I don't know much theory",Learner,"C#, F#, SQL",1-2 years,,I use it at work or for other commercial uses,Windows,Visual Studio 2015 or newer,"Twitter, F# Weekly, F# bloggers","Better domain modelling with records and unions, Conciseness of code (I can see more at a glance), Correctness (no nulls, it works first time), Having fun again, Learning functional programming in general","Algebraic types (inc discriminated unions and tuples), Immutability by default, Simple ""one liner"" type definitions for records and DUs, The ""piping"" idiom, Type inference, Type providers","Active Patterns, Agents (MailboxProcessor), Interactive development","F# books, F# bloggers",I like theory -- I'm not afraid of monads and other abstractions,"More material with real-world examples and war stories, More interactive tutorials (e.g. like the F# Koans)",,Internal enterprise projects,Mainstream business & enterprise applications,SQL databases,Windows,It's officially endorsed in my team for critical/production areas,"Domain modelling: making illegal states unrepresentable, Correctness: fewer bugs and less rework, Better for solving complex problems",,,,Working with C#-centric tooling,"Javascript, LLVM, Native","For better abstraction/readability, higher-kinded types and type classes would be nice.  For performance, struct support for records, tuples, and possibly even sum types would be nice.

Practically, the biggest problem is not enough investment from or mindshare at Microsoft.","The answers to the ""Would you say you have a strong academic or theoretical background?"" question are not mutually exclusive.",,"In-person: In-depth trainings (2 or 3 days), Books or longer articles explaining full context, Reference works or documentation with API listings or short tutorials, Recorded talks from a conference or user group, In-depth online courses (e.g. Pluralsight)","Visual F# Power Tools
FSharp.Data.SqlClient
FsXaml
FSharp.ViewModule
FSharp.Data (CSV provider)
",
14/04/2016 18:09:08,10 or more years,Enterprise development,"Yes, I enjoy computer science and mathematics",Intermediate,"C#, F#, Javascript, Python, R",4 or more years,,I use it at work or for other commercial uses,Windows,"Visual Studio 2015 or newer, Xamarin","Twitter, F# Weekly, Google+, Google groups, HN, Reddit and other programming news sites, F# bloggers","Better domain modelling with records and unions, Conciseness of code (I can see more at a glance), Correctness (no nulls, it works first time), Great community, Learning functional programming in general, Speed of development, Functional but can be tweaked to get high performance","Active Patterns, Async workflows, Computation expressions, Immutability by default, Object-oriented features (inc. C# compatibility, conciseness), The ""piping"" idiom, Type inference, Type providers",Units of measure,"MSDN, Links and instructions from fsharp.org, F# books, F# bloggers, Links mentioned in F# Weekly, Personal mentoring, Videos (e.g. Community for F#), Reading F# code written by experts",I like theory -- I'm not afraid of monads and other abstractions,"More material with in-depth tutorials, More material with short ""cookbook"" style information, More interactive tutorials (e.g. like the F# Koans)","Find ways to feed the Google developers to reduce their fear. If their fear is reduced it will be in more places.  If it's in more places, we will have the time to learn and apply techniques in our daily tasks.","Internal enterprise projects, Commercial products","Utilities and tools, Algorithm-heavy business applications (non-financial), Financial services, Machine learning, Mobile apps, Data analysis/statistics, Text analysis/language parsing",SQL databases,"Windows, Linux, iOS, Android, WinPhone, Azure, Amazon Web services",It's officially endorsed in my team for critical/production areas,"Domain modelling: making illegal states unrepresentable, Correctness: fewer bugs and less rework, More productive with fewer developers, Efficiency/Performance, Easy concurrency with async and agents, Better for solving complex problems","Training: They are worried about getting non-F# developers up to speed, No buy-in: There is lack of acceptance from other teams",,"Lack of good tutorials/documentation, Not enough real-world code to learn from","Not being part of the core .NET distribution, Lack of good wrappers for non-F# libraries, Less sophisticated tools for refactoring, etc.",JVM,Acceptance,,,"In-person: In-depth trainings (2 or 3 days), In-person: A talks at user groups, In-person: Attending a talks as part of a conference, Books or longer articles explaining full context, Reference works or documentation with API listings or short tutorials","Web Sharper
Visual Studio
Xamarin ",
14/04/2016 18:16:33,5-10 years,Commercial software/web development,"Yes, I enjoy computer science and mathematics",Intermediate,"C#, F#",4 or more years,,I use it at work or for other commercial uses,Windows,Visual Studio 2015 or newer,"F# Weekly, HN, Reddit and other programming news sites, Visualfsharp github repo","Conciseness of code (I can see more at a glance), Correctness (no nulls, it works first time), Speed of development, Functional but can be tweaked to get high performance","Algebraic types (inc discriminated unions and tuples), Async workflows, Easy integration with other .NET libraries, Immutability by default, Object expressions, Object-oriented features (inc. C# compatibility, conciseness), Type inference","Agents (MailboxProcessor), Interactive development, Quotations, Type providers, Units of measure","MSDN, Links mentioned in F# Weekly, Answers to Stack Overflow questions",I'm willing to learn advanced concepts but only if they are relevant and practical,"More material with in-depth tutorials, More material with real-world examples and war stories",,Commercial products,"Utilities and tools, Games",Not doing data centric apps,"Windows, Linux, iOS",It's officially endorsed in my team for critical/production areas,"Correctness: fewer bugs and less rework, More productive with fewer developers",Lack of dependency cycles can be a problem in component based systems.,,Not enough real-world code to learn from,"Working with C#-centric tooling, Less sophisticated tools for refactoring, etc., Performance issues","LLVM, Native","F# quotations are, frankly, a bit crap. No real metaprogramming story in general.

A lot of libraries are .net 4.0 or above (including type providers). We use Unity3D which is still effectively net 3.5 (using a fork of mono 2.8). 

First class lenses would be useful (or at least an extension of the existing record 'with' syntax).","The question 'What kind of data sources are you using F# with?' is a bit limited in its options (it seems database, web & analytics centric) - there are other kinds of data (e.g. parsing file formats, different forms of serialization etc).

The question 'What stops your workplace from using F# more than it does now?' should probably include an option like 'Technical reasons'. ",,"In-person: A talks at user groups, In-person: Attending a talks as part of a conference, Books or longer articles explaining full context, Recorded talks from a conference or user group",,
14/04/2016 18:29:07,5-10 years,Enterprise development,"No, I don't know much theory",Learner,"C#, Visual Basic",1-2 years,,Just tinkering,Windows,"Visual Studio 2015 or newer, VS Code (with Ionide)","Twitter, F# bloggers","Better domain modelling with records and unions, Conciseness of code (I can see more at a glance), Correctness (no nulls, it works first time), Great community, Having fun again, Learning functional programming in general","Easy integration with other .NET libraries, Immutability by default, Object-oriented features (inc. C# compatibility, conciseness)",,"F# bloggers, Videos (e.g. Community for F#)",I'm willing to learn advanced concepts but only if they are relevant and practical,"More material with short ""cookbook"" style information",,Commercial products,Algorithm-heavy business applications (non-financial),Not doing data centric apps,Windows,It's used unofficially,"Faster time to market, Better for solving complex problems","No perceived benefits: They don't understand what benefits F# has over C# or other languages, Hiring: They worry about not being able to find F# developers, No buy-in: There is lack of acceptance from other teams",,I can't use my knowledge from C# or other imperative languages,"Not being part of the core .NET distribution, Less sophisticated tools for refactoring, etc.",Native,,,,"In-person: In-depth trainings (2 or 3 days), Recorded talks from a conference or user group",,
14/04/2016 18:32:51,10 or more years,Data or analytics related,"Yes, I enjoy computer science and mathematics",Experienced,"C#, C++, F#, Go, Javascript, Scala",1-2 years,,I use it at work or for other commercial uses,"Windows, Mac, Linux","Visual Studio 2015 or newer, Xamarin, MonoDevelop, Emacs, Sublime Text, Atom (with Ionide), VS Code (with Ionide)","Twitter, F# bloggers","Conciseness of code (I can see more at a glance), Correctness (no nulls, it works first time), Learning functional programming in general","Active Patterns, Async workflows, Immutability by default",,"F# books, F# bloggers, Answers to Stack Overflow questions, Personal mentoring, Videos (e.g. Community for F#), Reading F# code written by experts",I like theory -- I'm not afraid of monads and other abstractions,"More material with short ""cookbook"" style information, More material with real-world examples and war stories, More short ""live coding"" videos",,"Internal enterprise projects, Commercial products, Open source projects","Utilities and tools, Algorithm-heavy business applications (non-financial), Custom development/specialist markets, Financial services, Machine learning","SQL databases, NoSQL database, Event sourcing, Analytics","Windows, Mac, Linux",It's officially endorsed in my team for critical/production areas,"Correctness: fewer bugs and less rework, More productive with fewer developers, Faster time to market, Efficiency/Performance, Easy concurrency with async and agents","No perceived benefits: They don't understand what benefits F# has over C# or other languages, Hiring: They worry about not being able to find F# developers",,Lack of good tutorials/documentation,Cross-platform issues,None -- I'm happy with the CLR/Mono,,,,"Recorded talks from a conference or user group, In-depth online courses (e.g. Pluralsight)",,
14/04/2016 18:45:21,5-10 years,Commercial software/web development,"Yes, I enjoy computer science and mathematics",Learner,"C#, F#, Javascript, Python",Less than a year,,I use it at work or for other commercial uses,Windows,Visual Studio 2015 or newer,"Twitter, F# Weekly, F# bloggers","Conciseness of code (I can see more at a glance), Correctness (no nulls, it works first time), Great community, Learning functional programming in general, Speed of development, Functional but can be tweaked to get high performance","Algebraic types (inc discriminated unions and tuples), Computation expressions, Easy integration with other .NET libraries, Immutability by default, Object-oriented features (inc. C# compatibility, conciseness), Type providers","Active Patterns, Agents (MailboxProcessor), Units of measure","F# books, F# bloggers, Videos (e.g. Community for F#)",I'm willing to learn advanced concepts but only if they are relevant and practical,"More material with short ""cookbook"" style information, More material with real-world examples and war stories, More short ""live coding"" videos, More interactive tutorials (e.g. like the F# Koans)",,Not applicable. None of my F# code is used by other people,"Utilities and tools, Algorithm-heavy business applications (non-financial), Machine learning, Commercial web site/app, Research/Teaching","SQL databases, Event sourcing, Analytics","Windows, Azure",It's officially endorsed in my team for critical/production areas,"Correctness: fewer bugs and less rework, More productive with fewer developers, Faster time to market, Efficiency/Performance",Nothing. Everyone loves it.,,"Installation process, Don't understand the compiler errors, Not enough real-world code to learn from","Lack of F# friendly libraries, Working with C#-centric tooling, Less sophisticated tools for refactoring, etc., Performance issues",Native,,,,"In-person: In-depth trainings (2 or 3 days), In-person: Shorter workshops focused on a specific topic (1 day), Books or longer articles explaining full context, In-depth online courses (e.g. Pluralsight)",,
14/04/2016 19:28:12,10 or more years,Commercial software/web development,"Yes, I enjoy computer science and mathematics",Intermediate,"C#, Javascript",2-3 years,,I use it for hobby or side projects,Windows,"Visual Studio 2015 or newer, VS Code (with Ionide)","Twitter, F# Weekly, F# bloggers, fsharp channel on Slack","Better domain modelling with records and unions, Conciseness of code (I can see more at a glance), Correctness (no nulls, it works first time), Having fun again, Learning functional programming in general, Speed of development","Active Patterns, Agents (MailboxProcessor), Algebraic types (inc discriminated unions and tuples), Backtick naming, Computation expressions, Immutability by default, Object expressions, Quotations, The ""piping"" idiom, Type inference, Type providers, Units of measure",Object-oriented compatibility,"F# books, F# bloggers, Links posted on social media such as Twitter, Answers to Stack Overflow questions, Personal mentoring, Reading F# code written by experts",I like theory -- I'm not afraid of monads and other abstractions,More material with real-world examples and war stories,,Open source projects,"Utilities and tools, Non-commercial web site/app",Not doing data centric apps,"Windows, Azure",I don't use F# at work,"Domain modelling: making illegal states unrepresentable, Correctness: fewer bugs and less rework, Easy concurrency with async and agents","No perceived benefits: They don't understand what benefits F# has over C# or other languages, Hiring: They worry about not being able to find F# developers, No buy-in: There is lack of acceptance from other teams",,"Lack of good tutorials/documentation, Not enough real-world code to learn from, fsharp project file system","Not being part of the core .NET distribution, Lack of F# friendly libraries, Lack of good wrappers for non-F# libraries, Working with C#-centric tooling, too dependant on the .net framework",Javascript,"It's not easy to get started.
It's failing on traction where you can see other programming languages like elixir getting improved a ton more.
I think the .net framework story is holding fsharp back",,,"Books or longer articles explaining full context, Reference works or documentation with API listings or short tutorials, Recorded talks from a conference or user group",,
14/04/2016 19:30:52,10 or more years,Consulting,"No, I don't know much theory",Intermediate,"C#, F#",1-2 years,,I use it at work or for other commercial uses,"Windows, Mac","Visual Studio 2015 or newer, Emacs","Twitter, F# Weekly","Better domain modelling with records and unions, Conciseness of code (I can see more at a glance), Correctness (no nulls, it works first time), Great community, Having fun again, Learning functional programming in general","Active Patterns, Algebraic types (inc discriminated unions and tuples), Computation expressions, Type providers",Agents (MailboxProcessor),"F# books, F# bloggers, Reading F# code written by experts",I like theory -- I'm not afraid of monads and other abstractions,"More material with real-world examples and war stories, More short ""live coding"" videos",,"Internal enterprise projects, Commercial products, Open source projects","Utilities and tools, Commercial web site/app, Text analysis/language parsing","SQL databases, NoSQL database, Event sourcing, Read-only data sources such as feeds","Azure, Amazon Web services",It's officially endorsed in my team for critical/production areas,"Domain modelling: making illegal states unrepresentable, Correctness: fewer bugs and less rework, More productive with fewer developers, Better for solving complex problems",Hiring: They worry about not being able to find F# developers,,"Installation process, Unpleasant interactions with the community","Not being part of the core .NET distribution, Working with C#-centric tooling",LLVM,"Positioning--it needs more financial support from Microsoft, and I believe the most likely way that happens is if it could be positioned as a gateway to greater consumption of Azure.",,,,"FSharp.Data
",
14/04/2016 19:39:55,10 or more years,Financial services or similar,"Yes, I enjoy computer science and mathematics",Intermediate,"C#, F#, Javascript, PLSQL",2-3 years,,I use it for hobby or side projects,Windows,Visual Studio 2015 or newer,"Twitter, F# Weekly, F# bloggers","Better domain modelling with records and unions, Having fun again, Learning functional programming in general","Active Patterns, Computation expressions, Immutability by default, Simple ""one liner"" type definitions for records and DUs, The ""piping"" idiom","Agents (MailboxProcessor), Object expressions, Quotations, Type providers, Units of measure","F# bloggers, Links mentioned in F# Weekly",I like theory -- I'm not afraid of monads and other abstractions,,,Not applicable. None of my F# code is used by other people,"Games, Other",Not doing data centric apps,Windows,I don't use F# at work,,,,,"Lack of good wrappers for non-F# libraries, Working with C#-centric tooling",Javascript,,,,Books or longer articles explaining full context,,
14/04/2016 19:44:30,2-5 years,Open source development,"Yes, I enjoy computer science and mathematics",Experienced,"C#, F#, Javascript, Typescript",2-3 years,,I use it at work or for other commercial uses,"Windows, Mac","Visual Studio 2015 or newer, Visual Studio 2012 or 2013, VS Code (with Ionide)","Twitter, F# Weekly, HN, Reddit and other programming news sites, F# bloggers, fsharp channel on Slack","Better domain modelling with records and unions, Conciseness of code (I can see more at a glance), Correctness (no nulls, it works first time), Great community, Having fun again, Learning functional programming in general, Speed of development","Easy integration with other .NET libraries, Immutability by default, Interactive development, The ""piping"" idiom, Type inference, Type providers","Agents (MailboxProcessor), Object expressions, Quotations, Static type constraints","MSDN, Links and instructions from fsharp.org, F# bloggers, Links posted on social media such as Twitter, Links mentioned in F# Weekly, Answers to Stack Overflow questions, Videos (e.g. Community for F#)",I'm willing to learn advanced concepts but only if they are relevant and practical,,,Not applicable. None of my F# code is used by other people,None - Just playing around,Read-only data sources such as feeds,"Windows, Mac, Linux",It's officially endorsed in my team for critical/production areas,"Domain modelling: making illegal states unrepresentable, Correctness: fewer bugs and less rework, More productive with fewer developers, Faster time to market, Efficiency/Performance, Better for solving complex problems","No perceived benefits: They don't understand what benefits F# has over C# or other languages, Training: They are worried about getting non-F# developers up to speed, No buy-in: There is lack of acceptance from other teams",,"Lack of good tutorials/documentation, Don't understand the compiler errors","Lack of F# friendly libraries, Working with C#-centric tooling, Less sophisticated tools for refactoring, etc.","None -- I'm happy with the CLR/Mono, JVM, Javascript, LLVM, Native","Weird relationship with Microsoft: not supported like a full product, but Microsoft's involvement makes it feel not quite like a true community project.",,Thanks so much for running this survey!,"Reference works or documentation with API listings or short tutorials, Recorded talks from a conference or user group","Ionide, dotnet CLI",
14/04/2016 19:44:57,10 or more years,Enterprise development,"Yes, I enjoy computer science and mathematics",Expert,"C#, F#",3-4 years,,I use it at work or for other commercial uses,"Windows, Mac","Visual Studio 2015 or newer, Xamarin, Vim","F# Weekly, HN, Reddit and other programming news sites, F# bloggers, fsharp channel on Slack","Better domain modelling with records and unions, Conciseness of code (I can see more at a glance), Correctness (no nulls, it works first time), Having fun again, Speed of development, Functional but can be tweaked to get high performance","Active Patterns, Algebraic types (inc discriminated unions and tuples), Async workflows, Computation expressions, Immutability by default, Interactive development, No dependency cycles, printf that is type checked, Simple ""one liner"" type definitions for records and DUs, The ""piping"" idiom, Type inference","Agents (MailboxProcessor), Integration with non-F# libraries, Object-oriented compatibility, Type providers, Units of measure","F# bloggers, Links posted on social media such as Twitter, Links mentioned in F# Weekly, Reading F# code written by experts",I like theory -- I'm not afraid of monads and other abstractions,"More material with in-depth tutorials, More material with real-world examples and war stories, More interactive tutorials (e.g. like the F# Koans)",More best practices and standards around project structure and design.,"Internal enterprise projects, Commercial products, Open source projects","Utilities and tools, Algorithm-heavy business applications (non-financial), Custom development/specialist markets, Financial services, Machine learning, Commercial web site/app, Non-commercial web site/app, Text analysis/language parsing","SQL databases, NoSQL database, Event sourcing","Windows, Linux, Azure",It's officially endorsed in my team for critical/production areas,"Domain modelling: making illegal states unrepresentable, Correctness: fewer bugs and less rework, More productive with fewer developers, Faster time to market, Efficiency/Performance, Easy concurrency with async and agents, Better for solving complex problems",Nothing. Everyone loves it.,Make it more mainstream,Not enough real-world code to learn from,"Lack of F# friendly libraries, Lack of good wrappers for non-F# libraries, Working with C#-centric tooling, Less sophisticated tools for refactoring, etc., Cross-platform issues","None -- I'm happy with the CLR/Mono, JVM, LLVM",,,,"Books or longer articles explaining full context, Reference works or documentation with API listings or short tutorials, first hand experience","FAKE, paket",
14/04/2016 20:12:29,2-5 years,,"No, I don't know much theory",Intermediate,"C#, F#, Javascript, Typescript",1-2 years,,I use it at work or for other commercial uses,Windows,Visual Studio 2015 or newer,"Twitter, F# Weekly, F# bloggers","Better domain modelling with records and unions, Conciseness of code (I can see more at a glance), Correctness (no nulls, it works first time), Having fun again","Agents (MailboxProcessor), Async workflows, Easy integration with other .NET libraries, Immutability by default, The ""piping"" idiom","Active Patterns, Computation expressions, Quotations, Units of measure","MSDN, F# books, F# bloggers, Links posted on social media such as Twitter, Links mentioned in F# Weekly, Videos (e.g. Community for F#)",I'm willing to learn advanced concepts but only if they are relevant and practical,"More short ""live coding"" videos",,"Internal enterprise projects, Commercial products",Custom development/specialist markets,"SQL databases, NoSQL database",Azure,It's officially endorsed in my team for critical/production areas,"Domain modelling: making illegal states unrepresentable, Correctness: fewer bugs and less rework, Better for solving complex problems",,,Don't understand the compiler errors,"Lack of good wrappers for non-F# libraries, Less sophisticated tools for refactoring, etc., Difficulty in troubleshooting problems",Javascript,,,,"Books or longer articles explaining full context, Recorded talks from a conference or user group, In-depth online courses (e.g. Pluralsight)",,
14/04/2016 20:29:10,10 or more years,"Academic, research, or related","Yes, I enjoy computer science and mathematics",Intermediate,"C#, F#, Python",1-2 years,,I use it for research or academic work,Windows,Visual Studio 2015 or newer,Twitter,"Better domain modelling with records and unions, Conciseness of code (I can see more at a glance), Correctness (no nulls, it works first time), Learning functional programming in general","Async workflows, Computation expressions, Easy integration with other .NET libraries, Interactive development, Object-oriented features (inc. C# compatibility, conciseness)",Units of measure,"F# bloggers, Answers to Stack Overflow questions, F# Wiki book",I like theory -- I'm not afraid of monads and other abstractions,"More material with short ""cookbook"" style information, More material with real-world examples and war stories",,"Internal enterprise projects, Commercial products","Utilities and tools, Research/Teaching, Data analysis/statistics","SQL databases, NoSQL database, Analytics",Windows,It's officially endorsed in my team for critical/production areas,"Domain modelling: making illegal states unrepresentable, Correctness: fewer bugs and less rework, Easy concurrency with async and agents, Better for solving complex problems",No perceived benefits: They don't understand what benefits F# has over C# or other languages,,Don't understand the compiler errors,"Less sophisticated tools for refactoring, etc.",None -- I'm happy with the CLR/Mono,,,,In-person: A talks at user groups,,
14/04/2016 20:32:26,2-5 years,Financial services or similar,"Yes, I enjoy computer science and mathematics",Intermediate,F#,2-3 years,,I use it at work or for other commercial uses,Windows,Visual Studio 2012 or 2013,"Twitter, F# Weekly, F# bloggers, StackOverflow chat","Better domain modelling with records and unions, Conciseness of code (I can see more at a glance), Correctness (no nulls, it works first time), Functional but can be tweaked to get high performance","Computation expressions, Interactive development, No dependency cycles, The ""piping"" idiom, Type inference","Agents (MailboxProcessor), Async workflows, Quotations, Type providers, Units of measure","F# bloggers, Links mentioned in F# Weekly, Answers to Stack Overflow questions",I like theory -- I'm not afraid of monads and other abstractions,More material with real-world examples and war stories,,Internal enterprise projects,"Financial services, Machine learning, Data analysis/statistics","SQL databases, Read-only data sources such as feeds",Windows,It's officially endorsed in my team for critical/production areas,"Correctness: fewer bugs and less rework, More productive with fewer developers, Better for solving complex problems",No buy-in: There is lack of acceptance from other teams,,Not enough real-world code to learn from,"Working with C#-centric tooling, Less sophisticated tools for refactoring, etc.",None -- I'm happy with the CLR/Mono,"F#'s eagerness to box values is at odds with it's data science remit. It forces experienced F#ers to step away from idiomatic code far more often than should be necessary (why should I have to write DateTime.op_LessThanOrEqual(x,y) whenever I work with time-series?), and repeatedly catches new users unawares with random performance hang-ups.",,,"In-person: Shorter workshops focused on a specific topic (1 day), Books or longer articles explaining full context",,
14/04/2016 20:51:44,2-5 years,Commercial software/web development,"Yes, I enjoy computer science and mathematics",Experienced,"C#, F#, Javascript, Python, OCaml",1-2 years,,I use it at work or for other commercial uses,Windows,"Visual Studio 2015 or newer, Visual Studio 2012 or 2013","Twitter, F# bloggers","Better domain modelling with records and unions, Conciseness of code (I can see more at a glance), Correctness (no nulls, it works first time), Having fun again, Speed of development, Functional but can be tweaked to get high performance","Active Patterns, Computation expressions, Easy integration with other .NET libraries, Immutability by default, No dependency cycles, printf that is type checked, The ""piping"" idiom, Type inference, Pattern Matching","Active Patterns, Agents (MailboxProcessor), Object expressions","F# books, Reading F# code written by experts, Knowing OCaml",I like theory -- I'm not afraid of monads and other abstractions,More material with real-world examples and war stories,,"Internal enterprise projects, Commercial products","Algorithm-heavy business applications (non-financial), Commercial web site/app","SQL databases, NoSQL database, Event sourcing, Read-only data sources such as feeds","Windows, Azure",It's officially endorsed in my team for critical/production areas,"Domain modelling: making illegal states unrepresentable, Correctness: fewer bugs and less rework, More productive with fewer developers, Faster time to market, Easy concurrency with async and agents, Better for solving complex problems",Nothing. Everyone loves it.,,Not enough real-world code to learn from,"Not being part of the core .NET distribution, Lack of F# friendly libraries, Lack of good wrappers for non-F# libraries, Working with C#-centric tooling, Less sophisticated tools for refactoring, etc.","None -- I'm happy with the CLR/Mono, LLVM, Native","Lack of higher kinded types (functors etc.) making generic programming more difficult. Also, interacting with non-functional and mutable code compromising ones F# code.",,,,Fable,
14/04/2016 23:08:53,5-10 years,Commercial software/web development,"No, I don't know much theory",Intermediate,C#,1-2 years,,I use it at work or for other commercial uses,Windows,Visual Studio 2015 or newer,"Twitter, F# Weekly, HN, Reddit and other programming news sites, F# bloggers, InfoQ","Better domain modelling with records and unions, Conciseness of code (I can see more at a glance), Correctness (no nulls, it works first time), Having fun again, Speed of development","Active Patterns, Easy integration with other .NET libraries, Immutability by default, Interactive development, Object-oriented features (inc. C# compatibility, conciseness), Type inference, Type providers, Units of measure","Agents (MailboxProcessor), Object expressions, Static type constraints","F# books, F# bloggers, Links mentioned in F# Weekly",I'm willing to learn advanced concepts but only if they are relevant and practical,"More material with real-world examples and war stories, More interactive tutorials (e.g. like the F# Koans)",Making people code! The theory has to be intertwined with putting it into practice.,Commercial products,Text analysis/language parsing,"SQL databases, NoSQL database, Analytics",Windows,It's officially endorsed in my team for critical/production areas,Better for solving complex problems,"No perceived benefits: They don't understand what benefits F# has over C# or other languages, Hiring: They worry about not being able to find F# developers, Training: They are worried about getting non-F# developers up to speed","Seeing it more used elsewhere. Chicken and egg problem. I think it also needs more visibility. More news, articles and talks at the news sites devs trust the most.",Not enough real-world code to learn from,"Lack of F# friendly libraries, Less sophisticated tools for refactoring, etc., Difficulty in troubleshooting problems",None -- I'm happy with the CLR/Mono,"Need more libraries, and they need to be better than C# libraries doing the same thing.",,,"In-person: In-depth trainings (2 or 3 days), In-person: Shorter workshops focused on a specific topic (1 day), Anything involving actual practice, otherwise won't remember anything","FParsec
VS integration
WebSharper",
15/04/2016 00:18:35,10 or more years,,,Experienced,"C#, F#",3-4 years,,,Windows,Visual Studio 2015 or newer,"F# bloggers, StackOverflow chat","Better domain modelling with records and unions, Conciseness of code (I can see more at a glance), Correctness (no nulls, it works first time), Great community, Learning functional programming in general, Functional but can be tweaked to get high performance","Algebraic types (inc discriminated unions and tuples), Async workflows, Computation expressions, Easy integration with other .NET libraries, Immutability by default, Interactive development, Object-oriented features (inc. C# compatibility, conciseness), Simple ""one liner"" type definitions for records and DUs, The ""piping"" idiom, Type inference, Units of measure","Quotations, Type providers","F# books, Answers to Stack Overflow questions, Reading F# code written by experts",I like theory -- I'm not afraid of monads and other abstractions,"More material with short ""cookbook"" style information, More material with real-world examples and war stories, More information quickly available in the IDE","A medium-level reference of gotchas and overlooked features might help, in case there isn't one I don't know about.

Such as: methods vs functions, module-private access, the various attributes like [<ReferenceEquality>], [<RequireQualifiedAccess>], inliner duck-typing, etc.

As is, there's a gap between beginner-level information from tutorials or the MSDN reference on one side, and the expert areas on the other. A more complete reference on the MSDN, and a team there that reacts to reported API documentation errors, would also help.","Just StackOverflow answers so far, maybe more in the future","Utilities and tools, Games, Other",Not doing data centric apps,"Windows, Linux",,,,,IntelliSense misbehaves or becomes unresponsive on complex code files,"Less sophisticated tools for refactoring, etc., Performance issues",Javascript,"Visual Studio/Compiler integration is notably sub-par when compared to flagship languages like C# or XML.

This is obvious on many occasions. Debugging is hard, has incompatible syntax, and often can't display variables that are in scope. IntelliSense is buggy and slow, and the code editor can't even collapse code or do primitive, namespace-heeding renaming.

Combined with easily missed, massive performance losses on certain types of function/sequence usage, This leads to quite a few cases where I dump the high-level features of F# in favor of imperative code, because it's otherwise too cumbersome to work out what is going on.",,,"Books or longer articles explaining full context, Reference works or documentation with API listings or short tutorials, As much info on IntelliSense as reasoably possible!","I'm not using F# dependencies, but C# dependencies work great!",
15/04/2016 01:03:41,10 or more years,Enterprise development,"No, I don't know much theory",Intermediate,"C#, F#, Javascript, Typescript",1-2 years,,I use it for hobby or side projects,"Windows, Mac","Visual Studio 2015 or newer, Xamarin, VS Code (with Ionide)","Twitter, F# Weekly, fsharp channel on Slack","Better domain modelling with records and unions, Conciseness of code (I can see more at a glance), Correctness (no nulls, it works first time), Great community","Algebraic types (inc discriminated unions and tuples), Async workflows, Easy integration with other .NET libraries, Simple ""one liner"" type definitions for records and DUs",Quotations,"F# bloggers, Links posted on social media such as Twitter, Reading F# code written by experts",I'm willing to learn advanced concepts but only if they are relevant and practical,"More material with short ""cookbook"" style information, More material with real-world examples and war stories, More short ""live coding"" videos",,"Internal enterprise projects, Open source projects","Utilities and tools, Algorithm-heavy business applications (non-financial), Text analysis/language parsing","SQL databases, Read-only data sources such as feeds",Windows,It's used unofficially,"Domain modelling: making illegal states unrepresentable, Correctness: fewer bugs and less rework, Better for solving complex problems","No perceived benefits: They don't understand what benefits F# has over C# or other languages, Hiring: They worry about not being able to find F# developers, Training: They are worried about getting non-F# developers up to speed",,I can't use my knowledge from C# or other imperative languages,"Working with C#-centric tooling, Less sophisticated tools for refactoring, etc.",LLVM,,,,"Reference works or documentation with API listings or short tutorials, Recorded talks from a conference or user group, In-depth online courses (e.g. Pluralsight)",,
15/04/2016 01:26:57,10 or more years,Enterprise development,"No, I don't know much theory",Learner,"C#, Javascript",1-2 years,,Just tinkering,Windows,"Visual Studio 2015 or newer, LinqPad","F# Weekly, F# bloggers, F# Lunch and Learn","Conciseness of code (I can see more at a glance), Correctness (no nulls, it works first time), Great community, Having fun again, Learning functional programming in general, Improves my OOP","Algebraic types (inc discriminated unions and tuples), Immutability by default, Simple ""one liner"" type definitions for records and DUs, The ""piping"" idiom, Type providers, Units of measure",,"F# books, Personal mentoring, F# Lunch and Learn",,,,Not applicable. None of my F# code is used by other people,None - Just playing around,SQL databases,Windows,It's used unofficially,Domain modelling: making illegal states unrepresentable,No buy-in: There is lack of acceptance from other teams,"Tooling, obviously",,Working with C#-centric tooling,,Tooling,,,"In-person: In-depth trainings (2 or 3 days), In-depth online courses (e.g. Pluralsight)",,
15/04/2016 06:44:10,10 or more years,"Academic, research, or related","Yes, I enjoy computer science and mathematics",Learner,"C#, Java",Less than a year,,I use it for hobby or side projects,"Windows, Linux","Visual Studio 2015 or newer, MonoDevelop","Twitter, F# Weekly, F# bloggers","Conciseness of code (I can see more at a glance), Correctness (no nulls, it works first time), Great community, Learning functional programming in general","Active Patterns, Algebraic types (inc discriminated unions and tuples), Easy integration with other .NET libraries, Immutability by default, Interactive development, The ""piping"" idiom, Type inference","Agents (MailboxProcessor), Object expressions, Quotations, Units of measure","Links and instructions from fsharp.org, F# books, F# bloggers, Links posted on social media such as Twitter, Links mentioned in F# Weekly, FSharpForFunAndProfit",I like theory -- I'm not afraid of monads and other abstractions,,There is no substitute for sitting down and writing code. There is so much good material out there that I probably spent too much time reading/watching and not enough time coding.,Not applicable. None of my F# code is used by other people,None - Just playing around,Not doing data centric apps,"Windows, Linux, Android",I sneak in little tools for my own use,"More productive with fewer developers, Faster time to market","No perceived benefits: They don't understand what benefits F# has over C# or other languages, Fad: They have concerns over long term language viability",,Don't know how to architect larger applications,"Less sophisticated tools for refactoring, etc.",LLVM,"The interactive development experience with F# has so much promise, but the reality leaves a lot to be desired. What I would wish for is an environment that better supports playing with code snippets and gradually accumulating them into larger bodies of codes, without having to think about #r and #load and assembly paths and orders of files in projects yada yada yada. ",,Thank you for all the work in putting this together!,"In-person: In-depth trainings (2 or 3 days), Books or longer articles explaining full context","FSharp.Data, PaketFsXAML",
15/04/2016 07:20:00,5-10 years,Enterprise development,"Yes, I enjoy computer science and mathematics",Experienced,"C#, F#, Visual Basic",4 or more years,,I use it at work or for other commercial uses,"Windows, Linux","Visual Studio 2015 or newer, Visual Studio 2012 or 2013, Xamarin, Atom (with Ionide)","Twitter, F# Weekly, Google+, Google groups, fsharp channel on Slack","Better domain modelling with records and unions, Correctness (no nulls, it works first time), Having fun again, Learning functional programming in general","Async workflows, Easy integration with other .NET libraries, Immutability by default, Interactive development, printf that is type checked, The ""piping"" idiom, Type providers, Units of measure",,"MSDN, F# books",,,,,,,,,,,,,,,,,,,,
15/04/2016 12:43:22,10 or more years,Student,"Yes, I enjoy computer science and mathematics",Intermediate,"C#, F#, Javascript",1-2 years,,I use it for hobby or side projects,Windows,Visual Studio 2015 or newer,Twitter,"Better domain modelling with records and unions, Learning functional programming in general","Algebraic types (inc discriminated unions and tuples), Async workflows, Computation expressions, Easy integration with other .NET libraries, Immutability by default, Object expressions, printf that is type checked, The ""piping"" idiom, Type inference","Active Patterns, Agents (MailboxProcessor), Quotations, Type providers","Links and instructions from fsharp.org, F# bloggers, Answers to Stack Overflow questions",I'm willing to learn advanced concepts but only if they are relevant and practical,,,Not applicable. None of my F# code is used by other people,None - Just playing around,Not doing data centric apps,Windows,I don't use F# at work,,,,,"Not being part of the core .NET distribution, Less sophisticated tools for refactoring, etc.",Javascript,"The compiler needs a better API, preferably one compatible with Roslyn, so you could get Compilation units from both that could be used as references for eachother. Also, last I checked, the compiler was littered with calls to a global state object for managing reading and writing files. ",,,"In-person: In-depth trainings (2 or 3 days), Books or longer articles explaining full context",,
15/04/2016 12:49:43,Less than a year,Enterprise development,"No, I don't know much theory",Learner,"C#, C++, F#",Less than a year,,I use it at work or for other commercial uses,Windows,Visual Studio 2015 or newer,F# Weekly,"Correctness (no nulls, it works first time), Learning functional programming in general","Immutability by default, The ""piping"" idiom, Type providers","Agents (MailboxProcessor), Async workflows, Units of measure","MSDN, Links and instructions from fsharp.org, F# books, Answers to Stack Overflow questions",I want to learn functional programming but I don't like academic jargon,"More material with in-depth tutorials, More material with short ""cookbook"" style information, More material with real-world examples and war stories",,Internal enterprise projects,"Mainstream business & enterprise applications, Non-commercial web site/app","SQL databases, Data integration and EAI",Windows,It's used unofficially,"Correctness: fewer bugs and less rework, Faster time to market","No perceived benefits: They don't understand what benefits F# has over C# or other languages, Hiring: They worry about not being able to find F# developers, No buy-in: There is lack of acceptance from other teams",Better integration with ASP.NET ,Not enough real-world code to learn from,"Not being part of the core .NET distribution, Working with C#-centric tooling",None -- I'm happy with the CLR/Mono,Lack of tooling with ASP.NET and should be first class language in Visual Studio.  Microsoft is ignorant for not promoting this as a top notch language.,,Good Survey and solid questions!,"In-person: In-depth trainings (2 or 3 days), Books or longer articles explaining full context, Reference works or documentation with API listings or short tutorials",,
15/04/2016 12:56:28,10 or more years,Enterprise development,"Yes, I enjoy computer science and mathematics",Experienced,"C#, F#, Typescript",1-2 years,,I use it at work or for other commercial uses,Windows,Visual Studio 2015 or newer,"F# Weekly, F# bloggers","Better domain modelling with records and unions, Conciseness of code (I can see more at a glance), Correctness (no nulls, it works first time)","Algebraic types (inc discriminated unions and tuples), Immutability by default, Type providers, Units of measure",,"F# books, F# bloggers, Structured training/workshops",I'm willing to learn advanced concepts but only if they are relevant and practical,More material with in-depth tutorials,,Internal enterprise projects,Financial services,"SQL databases, Read-only data sources such as feeds",Windows,It's officially endorsed in my team for critical/production areas,"Domain modelling: making illegal states unrepresentable, Correctness: fewer bugs and less rework, More productive with fewer developers, Faster time to market, Efficiency/Performance, Easy concurrency with async and agents, Better for solving complex problems",Nothing. Everyone loves it.,,Lack of good tutorials/documentation,"Not being part of the core .NET distribution, Lack of F# friendly libraries, Lack of good wrappers for non-F# libraries, Working with C#-centric tooling, Less sophisticated tools for refactoring, etc.",Native,,,,"In-person: In-depth trainings (2 or 3 days), In-depth online courses (e.g. Pluralsight)",,
15/04/2016 13:03:27,10 or more years,Data or analytics related,"No, I don't know much theory",Learner,"C#, F#",Less than a year,,I use it at work or for other commercial uses,Windows,Visual Studio 2015 or newer,"Twitter, F# bloggers, StackOverflow chat","Better domain modelling with records and unions, Conciseness of code (I can see more at a glance), Correctness (no nulls, it works first time), Great community, Having fun again, Learning functional programming in general, Speed of development, Functional but can be tweaked to get high performance","Active Patterns, Algebraic types (inc discriminated unions and tuples), Easy integration with other .NET libraries, Immutability by default, No dependency cycles, printf that is type checked, Simple ""one liner"" type definitions for records and DUs, The ""piping"" idiom, Type inference, Units of measure","Agents (MailboxProcessor), Async workflows, Computation expressions, Interactive development, Object-oriented compatibility, Quotations, Type providers","Links and instructions from fsharp.org, F# books, F# bloggers, Answers to Stack Overflow questions",I'm willing to learn advanced concepts but only if they are relevant and practical,"More material with in-depth tutorials, More material with short ""cookbook"" style information, More material with real-world examples and war stories",,Internal enterprise projects,"Algorithm-heavy business applications (non-financial), Machine learning, Research/Teaching, Data analysis/statistics","SQL databases, NoSQL database, Analytics",Windows,It's officially endorsed in my team for non-critical/non-production code,"Domain modelling: making illegal states unrepresentable, Correctness: fewer bugs and less rework, More productive with fewer developers, Faster time to market, Efficiency/Performance, Better for solving complex problems","No perceived benefits: They don't understand what benefits F# has over C# or other languages, Training: They are worried about getting non-F# developers up to speed, Fad: They have concerns over long term language viability, No buy-in: There is lack of acceptance from other teams",,"Lack of good tutorials/documentation, Don't understand the compiler errors","Working with C#-centric tooling, Less sophisticated tools for refactoring, etc.","LLVM, Native",,,,"Books or longer articles explaining full context, Reference works or documentation with API listings or short tutorials, Recorded talks from a conference or user group",,
15/04/2016 14:52:09,10 or more years,Commercial software/web development,"No, I don't know much theory",Intermediate,C#,1-2 years,The project lost financing.,Just tinkering,Windows,"Visual Studio 2015 or newer, Visual Studio 2012 or 2013","F# Weekly, HN, Reddit and other programming news sites, F# bloggers","Better domain modelling with records and unions, Conciseness of code (I can see more at a glance), Correctness (no nulls, it works first time), Having fun again, Learning functional programming in general, Speed of development, Functional but can be tweaked to get high performance","Active Patterns, Algebraic types (inc discriminated unions and tuples), Computation expressions, Immutability by default, Simple ""one liner"" type definitions for records and DUs, The ""piping"" idiom, Type inference","Agents (MailboxProcessor), Async workflows, Units of measure","MSDN, Links and instructions from fsharp.org, F# books, F# bloggers, Reading F# code written by experts",I like theory -- I'm not afraid of monads and other abstractions,"More material with in-depth tutorials, More material with short ""cookbook"" style information, More material with real-world examples and war stories, More interactive tutorials (e.g. like the F# Koans)",,Not applicable. None of my F# code is used by other people,"Utilities and tools, Custom development/specialist markets","SQL databases, Read-only data sources such as feeds",Windows,I don't use F# at work,"Domain modelling: making illegal states unrepresentable, Correctness: fewer bugs and less rework, More productive with fewer developers","No perceived benefits: They don't understand what benefits F# has over C# or other languages, Hiring: They worry about not being able to find F# developers",,"Lack of good tutorials/documentation, Don't understand the compiler errors, Not enough real-world code to learn from","Working with C#-centric tooling, Less sophisticated tools for refactoring, etc.","JVM, LLVM, Native",,,,"Books or longer articles explaining full context, Reference works or documentation with API listings or short tutorials, In-depth online courses (e.g. Pluralsight)",,
15/04/2016 15:03:14,10 or more years,Consulting,"Yes, I enjoy computer science and mathematics",Experienced,"C#, F#, Java, Javascript, Ocaml/SML",4 or more years,,I use it for hobby or side projects,Windows,Visual Studio 2015 or newer,"Twitter, F# Weekly, F# bloggers, fsharp channel on Slack","Better domain modelling with records and unions, Conciseness of code (I can see more at a glance), Correctness (no nulls, it works first time)","Active Patterns, Agents (MailboxProcessor), Algebraic types (inc discriminated unions and tuples), Computation expressions, Immutability by default, No dependency cycles, Type inference","Object expressions, Object-oriented compatibility, Quotations, Type providers, Units of measure","MSDN, Links mentioned in F# Weekly, Reading F# code written by experts",I like theory -- I'm not afraid of monads and other abstractions,"More material with in-depth tutorials, More interactive tutorials (e.g. like the F# Koans)",,"Internal enterprise projects, Open source projects","Utilities and tools, Custom development/specialist markets, Mainstream business & enterprise applications, Non-commercial web site/app","SQL databases, NoSQL database, Event sourcing","Windows, Azure",I don't use F# at work,,"No perceived benefits: They don't understand what benefits F# has over C# or other languages, Hiring: They worry about not being able to find F# developers, Training: They are worried about getting non-F# developers up to speed, No buy-in: There is lack of acceptance from other teams",,,"Not being part of the core .NET distribution, Lack of F# friendly libraries, Lack of good wrappers for non-F# libraries, Working with C#-centric tooling, Cross-platform issues","JVM, Javascript, LLVM, Native",Lack of well understood and supported pathway for language growth. Not enough resources to focus on things to the extent they could use.,,,"Books or longer articles explaining full context, Reference works or documentation with API listings or short tutorials",,
15/04/2016 15:07:00,10 or more years,Enterprise development,"No, I don't know much theory",Learner,"C#, Go, Ruby",I was using F# but have stopped,There are very few job offers with F#. Companies don't want to introduce anything new into the enterprise. They prefer to stay safe with C#.,Just tinkering,Windows,"Visual Studio 2015 or newer, VS Code (with Ionide)","Twitter, F# bloggers","Conciseness of code (I can see more at a glance), Learning functional programming in general","Object-oriented features (inc. C# compatibility, conciseness), Type inference, Type providers, Units of measure","Active Patterns, Agents (MailboxProcessor), Computation expressions","MSDN, Links and instructions from fsharp.org, F# books, F# bloggers, Videos (e.g. Community for F#), Reading F# code written by experts",I want to learn functional programming but I don't like academic jargon,"More material with in-depth tutorials, More material with real-world examples and war stories, More podcasts and other audio-only material",For example http://www.asp.net should provide examples on how to build websites with Web API 2 and MVC 5 with F#. ,Not applicable. None of my F# code is used by other people,None - Just playing around,SQL databases,Windows,I don't use F# at work,,"No perceived benefits: They don't understand what benefits F# has over C# or other languages, No buy-in: There is lack of acceptance from other teams, No one wants to learn a new language after having 10 years' of experience in c#",,"I can't use my knowledge from C# or other imperative languages, Not enough real-world code to learn from","Working with C#-centric tooling, No ReSharper for F#",Native,"It's trying to take away market share from C# on the same platform and very few people see the point to it. It should rival Scala, but it doesn't have enough commercial backing to promote itself with commercial services.",,Good luck,"Books or longer articles explaining full context, Reference works or documentation with API listings or short tutorials, Recorded talks from a conference or user group",,
15/04/2016 15:10:27,1-2 years,Commercial software/web development,"No, I don't know much theory",Learner,"C#, Go, Javascript, Typescript",Haven't really used it yet,,Just tinkering,"Windows, Mac","Atom (with Ionide), VS Code (with Ionide)",,,,,,,,,,,,,,,,,,,,,,,,,
15/04/2016 15:12:22,10 or more years,"Academic, research, or related","Yes, I enjoy computer science and mathematics",Intermediate,"C#, Java",Less than two months,"I think that I didn't find the courage to really do a project in F#. Haskell was tempting, even more tempting than F#, because it is ""a pure FP language"". But I stopped it too. So I think it's more about inexperience with FP that made me stop using it.",Just tinkering,"Windows, Mac, Linux","Visual Studio 2010 or older, Vim, Atom (with Ionide)",,"Better domain modelling with records and unions, Conciseness of code (I can see more at a glance), Correctness (no nulls, it works first time), Learning functional programming in general","Algebraic types (inc discriminated unions and tuples), Async workflows, Easy integration with other .NET libraries, Immutability by default, Interactive development, The ""piping"" idiom",Object-oriented compatibility,"F# bloggers, Answers to Stack Overflow questions, Personal mentoring, Reading F# code written by experts",,"More material with in-depth tutorials, More material with real-world examples and war stories, More interactive tutorials (e.g. like the F# Koans)",,"Internal enterprise projects, Open source projects","Utilities and tools, Algorithm-heavy business applications (non-financial), Mainstream business & enterprise applications, Non-commercial web site/app, Research/Teaching, Data analysis/statistics, Text analysis/language parsing","SQL databases, NoSQL database, Event sourcing, Read-only data sources such as feeds, Analytics, Data integration and EAI","Windows, Mac, Linux",I don't use F# at work,"Domain modelling: making illegal states unrepresentable, Correctness: fewer bugs and less rework, More productive with fewer developers, Easy concurrency with async and agents","No perceived benefits: They don't understand what benefits F# has over C# or other languages, Hiring: They worry about not being able to find F# developers, Fad: They have concerns over long term language viability, Too Windows-centric: They have concerns over cross-platform issues, Too Microsoft-centric: They think it is too closely linked to Microsoft",,"I can't use my knowledge from C# or other imperative languages, Not enough real-world code to learn from",,"LLVM, Native",,,,"In-person: In-depth trainings (2 or 3 days), Books or longer articles explaining full context, Reference works or documentation with API listings or short tutorials, In-depth online courses (e.g. Pluralsight)",,
15/04/2016 15:13:13,5-10 years,Enterprise development,"No, I don't know much theory",Intermediate,"C#, F#, Typescript",Less than a year,,I use it for hobby or side projects,Windows,Visual Studio 2015 or newer,"HN, Reddit and other programming news sites","Better domain modelling with records and unions, Correctness (no nulls, it works first time), Having fun again, Learning functional programming in general, Speed of development","Active Patterns, Easy integration with other .NET libraries, Immutability by default, printf that is type checked, The ""piping"" idiom, Type inference, Type providers","Agents (MailboxProcessor), Computation expressions, Interactive development, Units of measure","Links and instructions from fsharp.org, Answers to Stack Overflow questions",I'm willing to learn advanced concepts but only if they are relevant and practical,More material with real-world examples and war stories,,Commercial products,"Algorithm-heavy business applications (non-financial), Commercial web site/app, Other",SQL databases,Azure,I don't use F# at work,,"Not allowed to use it, due to having a high throughput of people where if I implement it now nobody will pick it up in the future","Marketing, making it more mainstream.",,"Lack of good wrappers for non-F# libraries, Working with C#-centric tooling, Less sophisticated tools for refactoring, etc., Tooling, especcially for web applications. F# projects in VS do not allow folders even though they are needed for all the css, html and script assets.","Javascript, LLVM",,,,Reference works or documentation with API listings or short tutorials,,
15/04/2016 15:14:51,10 or more years,Commercial software/web development,"No, I don't know much theory",Intermediate,"C#, Javascript",1-2 years,,I use it at work or for other commercial uses,"Windows, Mac","Visual Studio 2012 or 2013, Xamarin, Vim, VS Code (with Ionide)","Twitter, F# Weekly, F# bloggers, fsharp channel on Slack","Better domain modelling with records and unions, Conciseness of code (I can see more at a glance), Correctness (no nulls, it works first time), Great community, Having fun again, Speed of development","Backtick naming, Computation expressions, Immutability by default, Interactive development, Object expressions, printf that is type checked, Simple ""one liner"" type definitions for records and DUs, The ""piping"" idiom, Type inference, Type providers","Agents (MailboxProcessor), Quotations","F# bloggers, Links posted on social media such as Twitter, Links mentioned in F# Weekly, Videos (e.g. Community for F#), Reading F# code written by experts",I'm willing to learn advanced concepts but only if they are relevant and practical,"More material with in-depth tutorials, More material with short ""cookbook"" style information, More material with real-world examples and war stories",,mostly internal helper code,Utilities and tools,Not doing data centric apps,Windows,It's used unofficially,"Domain modelling: making illegal states unrepresentable, Correctness: fewer bugs and less rework, Better for solving complex problems","No perceived benefits: They don't understand what benefits F# has over C# or other languages, Hiring: They worry about not being able to find F# developers, Training: They are worried about getting non-F# developers up to speed",,Not enough real-world code to learn from,"Not being part of the core .NET distribution, Lack of F# friendly libraries, Lack of good wrappers for non-F# libraries, Working with C#-centric tooling",None -- I'm happy with the CLR/Mono,,,,"In-person: In-depth trainings (2 or 3 days), In-person: Shorter workshops focused on a specific topic (1 day), In-person: A talks at user groups, In-person: Attending a talks as part of a conference, Books or longer articles explaining full context, Recorded talks from a conference or user group","FAKE
Paket
Ionide
",
15/04/2016 15:16:55,10 or more years,Enterprise development,"Yes, I enjoy computer science and mathematics",Learner,"C#, Ruby",Less than a year,,Just tinkering,"Windows, Linux","Visual Studio 2015 or newer, Vim","Twitter, F# bloggers","Correctness (no nulls, it works first time), Having fun again, Learning functional programming in general","Algebraic types (inc discriminated unions and tuples), Backtick naming, Immutability by default, Type inference","Integration with non-F# libraries, Interactive development","Links and instructions from fsharp.org, F# books, F# bloggers, Videos (e.g. Community for F#)",I like theory -- I'm not afraid of monads and other abstractions,"More material with in-depth tutorials, More material with real-world examples and war stories",,Not applicable. None of my F# code is used by other people,None - Just playing around,Not doing data centric apps,,I don't use F# at work,,No buy-in: There is lack of acceptance from other teams,,"Not enough real-world code to learn from, Personal arrogance (""I used to TA a Haskell course, this should be easy!"")",Difficulty in troubleshooting problems,"Javascript, LLVM, Native",,,,"Books or longer articles explaining full context, In-depth online courses (e.g. Pluralsight)","NCrunch, in general, has changed my life.",
15/04/2016 15:17:40,5-10 years,Commercial software/web development,"No, I don't know much theory",Learner,"C#, Javascript, Python",Less than two months,,Just tinkering,Linux,"Vim, OmniSharp","HN, Reddit and other programming news sites","Conciseness of code (I can see more at a glance), Correctness (no nulls, it works first time), Learning functional programming in general","Active Patterns, Algebraic types (inc discriminated unions and tuples), Immutability by default, The ""piping"" idiom","Agents (MailboxProcessor), Units of measure","F# books, F# bloggers",I like theory -- I'm not afraid of monads and other abstractions,"More material with in-depth tutorials, More podcasts and other audio-only material",,Not applicable. None of my F# code is used by other people,None - Just playing around,SQL databases,Linux,I don't use F# at work,,"No perceived benefits: They don't understand what benefits F# has over C# or other languages, Hiring: They worry about not being able to find F# developers, Training: They are worried about getting non-F# developers up to speed, No buy-in: There is lack of acceptance from other teams",,"Installation process, Not enough real-world code to learn from","Working with C#-centric tooling, Cross-platform issues","JVM, LLVM, Native",,,,"In-person: Shorter workshops focused on a specific topic (1 day), Reference works or documentation with API listings or short tutorials",,
15/04/2016 15:18:40,2-5 years,Enterprise development,"Yes, I enjoy computer science and mathematics",Experienced,"C#, F#",2-3 years,,I use it for hobby or side projects,Windows,Visual Studio 2015 or newer,"F# Weekly, HN, Reddit and other programming news sites","Better domain modelling with records and unions, Correctness (no nulls, it works first time), Learning functional programming in general","Algebraic types (inc discriminated unions and tuples), Immutability by default","Object expressions, Quotations, Static type constraints, Units of measure","MSDN, F# bloggers, Answers to Stack Overflow questions",I like theory -- I'm not afraid of monads and other abstractions,,,Not applicable. None of my F# code is used by other people,Utilities and tools,SQL databases,,I use it personally as a utility/testing,,,,,"Less sophisticated tools for refactoring, etc.",None -- I'm happy with the CLR/Mono,,,,,"F# Interactive
FSharp Power Tools
",
15/04/2016 15:21:30,10 or more years,Enterprise development,"No, I don't know much theory",Experienced,"C#, F#, Go, Haskell, Java, Javascript, Scala",4 or more years,,I use it at work or for other commercial uses,"Windows, Mac","Visual Studio 2015 or newer, Atom (with Ionide)","Twitter, HN, Reddit and other programming news sites, F# bloggers","Better domain modelling with records and unions, Conciseness of code (I can see more at a glance), Correctness (no nulls, it works first time), Having fun again, Learning functional programming in general, Speed of development","Algebraic types (inc discriminated unions and tuples), Easy integration with other .NET libraries, Immutability by default, Simple ""one liner"" type definitions for records and DUs, The ""piping"" idiom, Type inference, Type providers","Active Patterns, Agents (MailboxProcessor), Quotations, Units of measure","MSDN, Links and instructions from fsharp.org, F# bloggers, Reading F# code written by experts",I'm willing to learn advanced concepts but only if they are relevant and practical,"More material with in-depth tutorials, More material with short ""cookbook"" style information, More material with real-world examples and war stories",,Internal enterprise projects,"Utilities and tools, Mainstream business & enterprise applications","SQL databases, NoSQL database",Windows,It's officially endorsed in my team for non-critical/non-production code,"Correctness: fewer bugs and less rework, More productive with fewer developers, Faster time to market","No perceived benefits: They don't understand what benefits F# has over C# or other languages, Hiring: They worry about not being able to find F# developers, No buy-in: There is lack of acceptance from other teams",,,"Not being part of the core .NET distribution, Less sophisticated tools for refactoring, etc.",None -- I'm happy with the CLR/Mono,Needs tools comparable to ReShaper for C#,,,"In-person: A talks at user groups, In-person: Attending a talks as part of a conference, Reference works or documentation with API listings or short tutorials, In-depth online courses (e.g. Pluralsight)","FsCheck
FParsec
Visual F# Power Tools
Deedle
Fake",
15/04/2016 15:22:44,10 or more years,Financial services or similar,"No, I don't know much theory",Intermediate,"C#, F#, Javascript, Typescript",3-4 years,,I use it at work or for other commercial uses,Windows,Visual Studio 2015 or newer,"F# Weekly, Google groups, HN, Reddit and other programming news sites, F# bloggers, fsharp channel on Slack","Better domain modelling with records and unions, Learning functional programming in general","Computation expressions, Easy integration with other .NET libraries, Immutability by default, Quotations, The ""piping"" idiom","Agents (MailboxProcessor), Interactive development, Type providers, Units of measure","F# books, F# bloggers, Reading F# code written by experts",I want to learn functional programming but I don't like academic jargon,More podcasts and other audio-only material,,Internal enterprise projects,"Utilities and tools, Algorithm-heavy business applications (non-financial), Custom development/specialist markets, Financial services","SQL databases, NoSQL database, Event sourcing, Read-only data sources such as feeds, Analytics, Data integration and EAI","Windows, Azure",It's officially endorsed in my team for critical/production areas,"Domain modelling: making illegal states unrepresentable, Correctness: fewer bugs and less rework, More productive with fewer developers, Faster time to market, Better for solving complex problems",,,"Installation process, Unpleasant interactions with the community",,"Javascript, Native, Erlang/OTP, .NET Native",,,,Books or longer articles explaining full context,"Visual F# Power Tools
FParsec
Paket
FAKE
Fsharpx",
15/04/2016 15:25:38,1-2 years,Student,"Yes, I enjoy computer science and mathematics",Learner,"Java, PHP, Visual Basic",Haven't really used it yet,,,Windows,"Visual Studio 2015 or newer, Visual Studio 2010 or older, Sublime Text","HN, Reddit and other programming news sites",,,,,,,,,,,,,,,,,,,,,,,,
15/04/2016 15:25:50,10 or more years,Enterprise development,"Yes, I enjoy computer science and mathematics",Experienced,"C#, F#, Java, Javascript, Python",1-2 years,,I use it for hobby or side projects,"Mac, Linux","Xamarin, Emacs, Atom (with Ionide), VS Code (with Ionide)","Twitter, F# Weekly, HN, Reddit and other programming news sites","Better domain modelling with records and unions, Conciseness of code (I can see more at a glance), Correctness (no nulls, it works first time), Great community, Having fun again, Learning functional programming in general","Active Patterns, Agents (MailboxProcessor), Algebraic types (inc discriminated unions and tuples), Async workflows, Backtick naming, Computation expressions, Easy integration with other .NET libraries, Immutability by default, Simple ""one liner"" type definitions for records and DUs, The ""piping"" idiom, Type inference, Type providers","Interactive development, Object expressions, Object-oriented compatibility, Quotations, Static type constraints, Units of measure","MSDN, Links mentioned in F# Weekly, Answers to Stack Overflow questions, Fun and profit site",I like theory -- I'm not afraid of monads and other abstractions,"More material with in-depth tutorials, More material with short ""cookbook"" style information, More material with real-world examples and war stories, More short ""live coding"" videos, More interactive tutorials (e.g. like the F# Koans)",,Internal enterprise projects,"Utilities and tools, Non-commercial web site/app, Text analysis/language parsing",Read-only data sources such as feeds,"Linux, Amazon Web services",I don't use F# at work,Easy concurrency with async and agents,"Too Windows-centric: They have concerns over cross-platform issues, No buy-in: There is lack of acceptance from other teams",,"Installation process, Don't understand the compiler errors, Not enough real-world code to learn from","Lack of F# friendly libraries, Lack of good wrappers for non-F# libraries, Working with C#-centric tooling, Less sophisticated tools for refactoring, etc., Difficulty in troubleshooting problems, Cross-platform issues","JVM, Javascript",,,,"Books or longer articles explaining full context, Reference works or documentation with API listings or short tutorials, Recorded talks from a conference or user group",Real-world functional programming,
15/04/2016 15:27:09,10 or more years,Commercial software/web development,"No, I don't know much theory",Intermediate,"C#, C++",Less than a year,,I use it for hobby or side projects,"Windows, Linux","Visual Studio 2015 or newer, Emacs","F# Weekly, HN, Reddit and other programming news sites","Better domain modelling with records and unions, Conciseness of code (I can see more at a glance), Correctness (no nulls, it works first time), Having fun again, Learning functional programming in general, Speed of development","Backtick naming, Easy integration with other .NET libraries, Immutability by default, Interactive development, The ""piping"" idiom, Type inference, Type providers",,"Links and instructions from fsharp.org, F# bloggers, Reading F# code written by experts",I'm willing to learn advanced concepts but only if they are relevant and practical,"More material with real-world examples and war stories, More interactive tutorials (e.g. like the F# Koans)",I enjoy interactive tutorials and short problems.  I don't need the page to provide an interactive editing experience - I prefer to use my own local editor/compiler.,Not applicable. None of my F# code is used by other people,"Non-commercial web site/app, Mobile apps, Data analysis/statistics","SQL databases, NoSQL database",Linux,It's used unofficially,More productive with fewer developers,"Too Microsoft-centric: They think it is too closely linked to Microsoft, No buy-in: There is lack of acceptance from other teams, Concern over language fragmentation in our code base.",,Not enough real-world code to learn from,,None -- I'm happy with the CLR/Mono,"I think F# isn't great at providing direction for certain tasks.  When I look at starting a new project in F# I see a lot of high quality individual pieces but it's hard to find guidance on what combinations work well in practice.

For example - I'm interested in finding a high productivity web development stack.  I've been tracking Elixir and F#.  It might be that Elixir is simply younger but at each step there seems to be one clear answer to how to do something.  With F# - do I use Suave or Websharper? Do I use javascript in the same project for the front end or use Funscript? Maybe Fable or use websharper for everything.  (I guess Websharper is a full solution - but it's also fairly daunting when new to F#).",,,"Books or longer articles explaining full context, Reference works or documentation with API listings or short tutorials",,
15/04/2016 15:28:34,10 or more years,Enterprise development,"Yes, I enjoy computer science and mathematics",Intermediate,"C, Go, Java, Javascript, Python, Swift",Haven't really used it yet,,I don't use it,,"Vim, Atom (with Ionide), LightIDE","HN, Reddit and other programming news sites",Haven't really used F#,Haven't really used F#,,Haven't learned F#,I'm willing to learn advanced concepts but only if they are relevant and practical,More interactive tutorials (e.g. like the F# Koans),Free F# books to everyone,Have not created such code,Other,,Other,I don't use F# at work,,,,,,"Javascript, LLVM, Native","Too connected to Mono/.NET/Microsoft, even though it's open source.",Easier way to answer questions for people that haven't really used F#.,F# looks really promising!,Not looking for any of the above,,
15/04/2016 15:28:35,10 or more years,"Academic, research, or related","Yes, I enjoy computer science and mathematics",Intermediate,"C++, Ocaml/SML, Python",Less than two months,,Just tinkering,Linux,"MonoDevelop, Emacs","HN, Reddit and other programming news sites, F# bloggers",,"Algebraic types (inc discriminated unions and tuples), Async workflows, Immutability by default, Type inference, Type providers, Units of measure",,"F# books, F# bloggers",I'm willing to learn advanced concepts but only if they are relevant and practical,More material with real-world examples and war stories,,Not applicable. None of my F# code is used by other people,None - Just playing around,,,I don't use F# at work,,Nothing; it's largely up to me,,,"Difficulty in troubleshooting problems, Cross-platform issues","Javascript, LLVM, Native",,,,Books or longer articles explaining full context,,
15/04/2016 15:28:37,10 or more years,Consulting,"Yes, I enjoy computer science and mathematics",Learner,"C#, Javascript, PHP, Typescript",1-2 years,,I use it for hobby or side projects,"Windows, Mac","Visual Studio 2015 or newer, Xamarin, VS Code (with Ionide)","Twitter, F# Weekly, F# bloggers","Conciseness of code (I can see more at a glance), Having fun again, Learning functional programming in general","Immutability by default, Simple ""one liner"" type definitions for records and DUs, Type inference, Type providers",Active Patterns,"MSDN, F# books, F# bloggers, Links mentioned in F# Weekly, Videos (e.g. Community for F#)",I'm willing to learn advanced concepts but only if they are relevant and practical,"More material with in-depth tutorials, More material with real-world examples and war stories, More short ""live coding"" videos",,,,,,It's used unofficially,,"Hiring: They worry about not being able to find F# developers, Money: They worry that good F# developers will cost too much",,,Lack of good wrappers for non-F# libraries,"None -- I'm happy with the CLR/Mono, Javascript",,,,"Books or longer articles explaining full context, Reference works or documentation with API listings or short tutorials, Recorded talks from a conference or user group",,
15/04/2016 15:29:02,10 or more years,Science or related,"Yes, I enjoy computer science and mathematics",Intermediate,"C#, F#, Python",3-4 years,"Less advanced tooling support (R#, Linux, when compared to C#)
No support for unsafe code (for the 0.1% code that is in the fast path)",I use it at work or for other commercial uses,"Windows, Linux",Visual Studio 2015 or newer,Twitter,"Correctness (no nulls, it works first time), Great community, Having fun again, Learning functional programming in general, Speed of development","Active Patterns, Algebraic types (inc discriminated unions and tuples), Computation expressions, Easy integration with other .NET libraries, Immutability by default, Interactive development, Object-oriented features (inc. C# compatibility, conciseness), The ""piping"" idiom, Type inference, Type providers, Units of measure","Agents (MailboxProcessor), Async workflows","Links and instructions from fsharp.org, F# books, F# bloggers, Links posted on social media such as Twitter, Links mentioned in F# Weekly",I'm willing to learn advanced concepts but only if they are relevant and practical,"More material with in-depth tutorials, More material with real-world examples and war stories, More short ""live coding"" videos, More interactive tutorials (e.g. like the F# Koans)",,Internal enterprise projects,"Utilities and tools, Machine learning, Data analysis/statistics","SQL databases, Read-only data sources such as feeds","Windows, Linux",It's officially endorsed in my team for non-critical/non-production code,"Domain modelling: making illegal states unrepresentable, Correctness: fewer bugs and less rework, Better for solving complex problems","Hiring: They worry about not being able to find F# developers, Training: They are worried about getting non-F# developers up to speed, No buy-in: There is lack of acceptance from other teams",,"Don't understand the compiler errors, Stop with the FSharp.Core binding redirect madness","Lack of F# friendly libraries, Lack of good wrappers for non-F# libraries, Working with C#-centric tooling, Less sophisticated tools for refactoring, etc., FSharp.Core binding redirects","LLVM, Native","That C# is copying enough of it, so not enough developers will ever be incentivized to make a complete jump to it.",,,"In-person: In-depth trainings (2 or 3 days), Books or longer articles explaining full context, Recorded talks from a conference or user group, In-depth online courses (e.g. Pluralsight)",,
15/04/2016 15:30:28,10 or more years,Enterprise development,"Yes, I enjoy computer science and mathematics",Intermediate,"C#, F#, Java, Scala",1-2 years,,I use it for hobby or side projects,Windows,"Visual Studio 2015 or newer, Visual Studio 2012 or 2013, VS Code (with Ionide)","HN, Reddit and other programming news sites","Conciseness of code (I can see more at a glance), Learning functional programming in general, Speed of development","Active Patterns, Algebraic types (inc discriminated unions and tuples), Easy integration with other .NET libraries, Immutability by default, Interactive development, Object-oriented features (inc. C# compatibility, conciseness), Simple ""one liner"" type definitions for records and DUs, The ""piping"" idiom","Agents (MailboxProcessor), Units of measure","Links and instructions from fsharp.org, F# books, F# bloggers",I like theory -- I'm not afraid of monads and other abstractions,"More material with real-world examples and war stories, More interactive tutorials (e.g. like the F# Koans)",Easier installation on non-Windows platforms,Internal enterprise projects,Utilities and tools,Not doing data centric apps,Windows,It's used unofficially,More productive with fewer developers,"Hiring: They worry about not being able to find F# developers, Money: They worry that good F# developers will cost too much, Training: They are worried about getting non-F# developers up to speed, No buy-in: There is lack of acceptance from other teams","Promote language, and perhaps specifically highlight things C#/VB.NET can't favorably compare on.",Not enough real-world code to learn from,"Working with C#-centric tooling, Less sophisticated tools for refactoring, etc.","None -- I'm happy with the CLR/Mono, LLVM","It takes a far more ""pure FP"" approach than languages like Scala, which may put people off if they are not ready to embrace FP. C#'s success at integrating FP features (e.g. LINQ) seem to make people feel that it is ""good enough"" and less likely to embrace F#. F# installation on non-Windows platforms is not as easy and feels ""second-class"" (albeit improving with the continual opening of the .NET platform).",,,Books or longer articles explaining full context,"FAKE
fsi",
15/04/2016 15:32:05,10 or more years,Commercial software/web development,"Yes, I enjoy computer science and mathematics",Learner,"C#, F#, Objective-C, Swift",Less than a year,,I use it for hobby or side projects,"Windows, Mac","Visual Studio 2015 or newer, Xamarin, Vim, VS Code (with Ionide)","Twitter, F# Weekly, HN, Reddit and other programming news sites","Better domain modelling with records and unions, Conciseness of code (I can see more at a glance), Correctness (no nulls, it works first time), Great community, Having fun again, Learning functional programming in general, Speed of development","Active Patterns, Algebraic types (inc discriminated unions and tuples), Async workflows, Computation expressions, Immutability by default, Simple ""one liner"" type definitions for records and DUs, Type inference","Agents (MailboxProcessor), Integration with non-F# libraries, Object expressions, Object-oriented compatibility, Type providers, Units of measure","F# books, Personal mentoring",I like theory -- I'm not afraid of monads and other abstractions,"More material with in-depth tutorials, More material with real-world examples and war stories, More short ""live coding"" videos",,Open source projects,"None - Just playing around, Utilities and tools, Non-commercial web site/app",Not doing data centric apps,"Windows, Mac, Linux",It's officially endorsed in my team for critical/production areas,"Domain modelling: making illegal states unrepresentable, Correctness: fewer bugs and less rework, Easy concurrency with async and agents, Better for solving complex problems",Nothing. Everyone loves it.,,"Lack of good tutorials/documentation, Not enough real-world code to learn from","Less sophisticated tools for refactoring, etc.","JVM, LLVM",,,,"In-person: In-depth trainings (2 or 3 days), In-person: Shorter workshops focused on a specific topic (1 day), In-person: A talks at user groups, In-person: Attending a talks as part of a conference, Books or longer articles explaining full context, Reference works or documentation with API listings or short tutorials, Recorded talks from a conference or user group, In-depth online courses (e.g. Pluralsight)",,
15/04/2016 15:32:45,5-10 years,Commercial software/web development,"No, I don't know much theory",Intermediate,"C#, Javascript",Less than two months,,I use it for hobby or side projects,Windows,Visual Studio 2015 or newer,,"Better domain modelling with records and unions, Conciseness of code (I can see more at a glance), Correctness (no nulls, it works first time), Having fun again","Algebraic types (inc discriminated unions and tuples), Async workflows, Computation expressions, Easy integration with other .NET libraries, Immutability by default, The ""piping"" idiom","Agents (MailboxProcessor), Quotations","F# bloggers, Answers to Stack Overflow questions, Reading F# code written by experts",I'm willing to learn advanced concepts but only if they are relevant and practical,"More material with short ""cookbook"" style information, More material with real-world examples and war stories, More interactive tutorials (e.g. like the F# Koans)","It is possible to start writing code in f# without a deep understanding of monads and other functional concepts. Libraries however, make many assumptions about your knowledge of these concepts which made it pretty difficult at first to start working with libraries that didn't have extensive example code.

This is definitely a problem for begginer's. At least it was for me.",Commercial products,Commercial web site/app,"NoSQL database, Event sourcing",Azure,It's officially endorsed in my team for non-critical/non-production code,,"No perceived benefits: They don't understand what benefits F# has over C# or other languages, Hiring: They worry about not being able to find F# developers, Training: They are worried about getting non-F# developers up to speed, Fad: They have concerns over long term language viability, No buy-in: There is lack of acceptance from other teams",,"Lack of good tutorials/documentation, Not enough real-world code to learn from","Lack of good wrappers for non-F# libraries, Less sophisticated tools for refactoring, etc.",None -- I'm happy with the CLR/Mono,,,,"Books or longer articles explaining full context, Reference works or documentation with API listings or short tutorials, Recorded talks from a conference or user group, In-depth online courses (e.g. Pluralsight)",,
15/04/2016 15:34:19,10 or more years,"Academic, research, or related","No, I don't know much theory",Learner,"F#, Java, Javascript, PHP, Python",Less than two months,,I use it for hobby or side projects,Windows,Visual Studio 2015 or newer,"HN, Reddit and other programming news sites, F# bloggers","Correctness (no nulls, it works first time), Learning functional programming in general, Functional but can be tweaked to get high performance",,,,I'm willing to learn advanced concepts but only if they are relevant and practical,"More material with short ""cookbook"" style information",,,Custom development/specialist markets,,,I don't use F# at work,,,,"Don't understand the compiler errors, Not enough real-world code to learn from",Difficulty in troubleshooting problems,"JVM, Native",Code is difficult to read,,,"Books or longer articles explaining full context, Reference works or documentation with API listings or short tutorials, Recorded talks from a conference or user group",,
15/04/2016 15:34:35,5-10 years,Commercial software/web development,"No, I don't know much theory",Intermediate,"C#, F#, Go, Java, Rust",1-2 years,,I use it at work or for other commercial uses,"Windows, Linux","Visual Studio 2015 or newer, Atom (with Ionide), VS Code (with Ionide)","HN, Reddit and other programming news sites","Better domain modelling with records and unions, Correctness (no nulls, it works first time), Learning functional programming in general","Easy integration with other .NET libraries, Immutability by default, The ""piping"" idiom, Type inference",,Links and instructions from fsharp.org,I like theory -- I'm not afraid of monads and other abstractions,"More material with in-depth tutorials, More material with short ""cookbook"" style information",,Commercial products,Commercial web site/app,SQL databases,"Windows, Linux",It's officially endorsed in my team for critical/production areas,"Domain modelling: making illegal states unrepresentable, Correctness: fewer bugs and less rework, More productive with fewer developers, Better for solving complex problems",,,,"Less sophisticated tools for refactoring, etc.","LLVM, Native",,,,"Reference works or documentation with API listings or short tutorials, In-depth online courses (e.g. Pluralsight)",,
15/04/2016 15:37:24,5-10 years,"Academic, research, or related","Yes, I enjoy computer science and mathematics",Intermediate,"F#, Haskell, Python",1-2 years,,I use it for research or academic work,"Windows, Linux","Visual Studio 2015 or newer, Vim, Atom (with Ionide), VS Code (with Ionide)","HN, Reddit and other programming news sites","Correctness (no nulls, it works first time), Learning functional programming in general","The ""piping"" idiom","Async workflows, Type providers",Answers to Stack Overflow questions,I want to learn functional programming but I don't like academic jargon,"More material with short ""cookbook"" style information, More interactive tutorials (e.g. like the F# Koans)",,"Internal enterprise projects, Open source projects","Algorithm-heavy business applications (non-financial), Research/Teaching, Data analysis/statistics",Read-only data sources such as feeds,"Windows, Linux",It's officially endorsed in my team for critical/production areas,,Nothing. Everyone loves it.,,MSBuild/Visual Studio/.Net,"Working with C#-centric tooling, Difficulty in troubleshooting problems, Cross-platform issues","JVM, Javascript, LLVM, Native",Poor Linux tools ,,,Reference works or documentation with API listings or short tutorials,"FAKE, Ionide, Paket, Mathnet Numerics, Ifsharp, XPlot.",
15/04/2016 15:38:07,10 or more years,Commercial software/web development,"Yes, I enjoy computer science and mathematics",Expert,"C#, F#, Javascript, Ocaml/SML, Python",1-2 years,,I use it for hobby or side projects,"Windows, Linux","Visual Studio 2015 or newer, Vim, VS Code (with Ionide)","Twitter, F# Weekly, HN, Reddit and other programming news sites","Better domain modelling with records and unions, Conciseness of code (I can see more at a glance), Correctness (no nulls, it works first time), Learning functional programming in general, Speed of development","Active Patterns, Algebraic types (inc discriminated unions and tuples), Backtick naming, Easy integration with other .NET libraries, Immutability by default, Object expressions, Object-oriented features (inc. C# compatibility, conciseness), printf that is type checked, Quotations, Simple ""one liner"" type definitions for records and DUs, The ""piping"" idiom, Type inference, Type providers","Agents (MailboxProcessor), Units of measure","MSDN, Links and instructions from fsharp.org, Links mentioned in F# Weekly, Answers to Stack Overflow questions",I'm willing to learn advanced concepts but only if they are relevant and practical,,,Not applicable. None of my F# code is used by other people,None - Just playing around,Not doing data centric apps,"Windows, Linux",I don't use F# at work,,,,,"Not being part of the core .NET distribution, Less sophisticated tools for refactoring, etc., Lack of advanced typing features found in OCaml","Javascript, LLVM, Native",,,,,,
15/04/2016 15:38:30,2-5 years,Data or analytics related,"No, I don't know much theory",Experienced,"Rust, Scala",Less than a year,Xamarin support was pretty badly implemented,I use it for hobby or side projects,"Windows, Linux","Visual Studio 2015 or newer, Xamarin, MonoDevelop","HN, Reddit and other programming news sites","Better domain modelling with records and unions, Conciseness of code (I can see more at a glance), Correctness (no nulls, it works first time)","Active Patterns, Agents (MailboxProcessor), Algebraic types (inc discriminated unions and tuples), Async workflows, Immutability by default, Type providers, Units of measure",Quotations,"Links and instructions from fsharp.org, F# bloggers",I'm willing to learn advanced concepts but only if they are relevant and practical,"More material with in-depth tutorials, More material with short ""cookbook"" style information, More material with real-world examples and war stories",Find ways to teach people with no .NET or C# background,Not applicable. None of my F# code is used by other people,"Mobile apps, Data analysis/statistics","SQL databases, Event sourcing, Read-only data sources such as feeds, Analytics","Linux, iOS, Android, WinPhone",I don't use F# at work,,"No perceived benefits: They don't understand what benefits F# has over C# or other languages, Too Windows-centric: They have concerns over cross-platform issues, Too Microsoft-centric: They think it is too closely linked to Microsoft",Continue doing what they're doing,Don't understand the compiler errors,"Not being part of the core .NET distribution, Lack of F# friendly libraries, Lack of good wrappers for non-F# libraries, Working with C#-centric tooling, Undocumented libraries","LLVM, Native","Lack of modular implicits for type classes, and lack of higher kinded types",,,"Books or longer articles explaining full context, Reference works or documentation with API listings or short tutorials",F# Data Tools and Type Providers,
15/04/2016 15:39:50,10 or more years,Commercial software/web development,"Yes, I enjoy computer science and mathematics",Experienced,"C#, C++, F#, Haskell, Perl, Elm",4 or more years,,I use it for hobby or side projects,Windows,Visual Studio 2015 or newer,"Twitter, HN, Reddit and other programming news sites","Better domain modelling with records and unions, Conciseness of code (I can see more at a glance), Correctness (no nulls, it works first time), Having fun again, Speed of development","Algebraic types (inc discriminated unions and tuples), Async workflows, Computation expressions, Easy integration with other .NET libraries, Immutability by default, Interactive development, printf that is type checked, The ""piping"" idiom, Type inference, Type providers, Units of measure","Active Patterns, Quotations","MSDN, F# bloggers, Answers to Stack Overflow questions",I like theory -- I'm not afraid of monads and other abstractions,More material with real-world examples and war stories,"I don't think it needs to be made easier, I think people need a reason to do it.",Internal enterprise projects,"Utilities and tools, Algorithm-heavy business applications (non-financial), Text analysis/language parsing",Not doing data centric apps,Windows,It's used unofficially,"Domain modelling: making illegal states unrepresentable, Correctness: fewer bugs and less rework, More productive with fewer developers, Better for solving complex problems","No perceived benefits: They don't understand what benefits F# has over C# or other languages, Hiring: They worry about not being able to find F# developers, Training: They are worried about getting non-F# developers up to speed, Fad: They have concerns over long term language viability, No buy-in: There is lack of acceptance from other teams",,,"Not being part of the core .NET distribution, Working with C#-centric tooling, Less sophisticated tools for refactoring, etc.",Native,"Can't implement a generic interface multiple types with different type parameters, as I can in C#. This makes using some C#-oriented libraries impossible and thus impedes mixed-language solutions.",,,,,
15/04/2016 15:42:18,5-10 years,Student,"Yes, I enjoy computer science and mathematics",Learner,"C, C#, C++, Javascript, Typescript, Bash",Less than two months,Take time to learn a new program. My main language is C#. I switch to TypeScript learning because I have a direct use of it.,Just tinkering,"Windows, Linux","Visual Studio 2015 or newer, VS Code (with Ionide)","HN, Reddit and other programming news sites",Learning functional programming in general,"Async workflows, Easy integration with other .NET libraries, Immutability by default, Interactive development, Object-oriented features (inc. C# compatibility, conciseness)",,"Links and instructions from fsharp.org, F# bloggers, Answers to Stack Overflow questions, Reading F# code written by experts",I'm willing to learn advanced concepts but only if they are relevant and practical,"More material with in-depth tutorials, More material with short ""cookbook"" style information, More material with real-world examples and war stories",More projects to read online,Open source projects,None - Just playing around,Not doing data centric apps,"Windows, Linux, WinPhone",I don't use F# at work,I dont know it enough to be efficient,I dont know it enough to be efficient,Give we more time to practice or a PM who ask me to use it.,I dont have enought time to practize. Everything else is neat.,"not enough time to play with it,",None -- I'm happy with the CLR/Mono,dunno,dunno,Thank for the poll. Hope to play again with the language.,"In-person: In-depth trainings (2 or 3 days), Books or longer articles explaining full context, Reference works or documentation with API listings or short tutorials, In-depth online courses (e.g. Pluralsight)",VS,
15/04/2016 15:43:14,10 or more years,Enterprise development,"No, I don't know much theory",Intermediate,"C, C#, C++, F#, Python",3-4 years,,I use it for hobby or side projects,"Windows, Linux","Visual Studio 2010 or older, MonoDevelop, Vim","HN, Reddit and other programming news sites","Better domain modelling with records and unions, Conciseness of code (I can see more at a glance), Correctness (no nulls, it works first time), Learning functional programming in general, Speed of development","Active Patterns, Algebraic types (inc discriminated unions and tuples), Async workflows, Easy integration with other .NET libraries, printf that is type checked, The ""piping"" idiom, Type inference","Agents (MailboxProcessor), Quotations","MSDN, Links and instructions from fsharp.org, F# bloggers, Answers to Stack Overflow questions, Reading F# code written by experts",I like theory -- I'm not afraid of monads and other abstractions,"More material with in-depth tutorials, More material with short ""cookbook"" style information, More material with real-world examples and war stories",,Internal enterprise projects,"Utilities and tools, Text analysis/language parsing",Not doing data centric apps,"Windows, Linux",It's used unofficially,"Domain modelling: making illegal states unrepresentable, Correctness: fewer bugs and less rework, Better for solving complex problems",Hiring: They worry about not being able to find F# developers,,Installation process,"Not being part of the core .NET distribution, Less sophisticated tools for refactoring, etc.",Native,For big projects it's often a pain to have to worry about the order of definitions,,,"Books or longer articles explaining full context, Reference works or documentation with API listings or short tutorials",I only use the built-in ones,
15/04/2016 15:44:36,10 or more years,Consulting,"Yes, I enjoy computer science and mathematics",Intermediate,"C#, F#, Javascript, Typescript",3-4 years,,I use it for hobby or side projects,Windows,"Visual Studio 2015 or newer, VS Code (with Ionide)","HN, Reddit and other programming news sites, Fsharp github repo","Conciseness of code (I can see more at a glance), Correctness (no nulls, it works first time), Having fun again, Learning functional programming in general, Functional but can be tweaked to get high performance","Algebraic types (inc discriminated unions and tuples), Async workflows, Computation expressions, Easy integration with other .NET libraries, Immutability by default, No dependency cycles, The ""piping"" idiom, Type inference","Interactive development, Quotations, Type providers","MSDN, Links and instructions from fsharp.org, F# bloggers, Reading F# code written by experts",I like theory -- I'm not afraid of monads and other abstractions,,,Open source projects,"Utilities and tools, Algorithm-heavy business applications (non-financial), Games",Read-only data sources such as feeds,Windows,It's used unofficially,,"Hiring: They worry about not being able to find F# developers, Training: They are worried about getting non-F# developers up to speed, No buy-in: There is lack of acceptance from other teams",,,Working with C#-centric tooling,None -- I'm happy with the CLR/Mono,No support (yet) for building UWP apps with F#.,,,,,
15/04/2016 15:45:20,5-10 years,Student,"Yes, I enjoy computer science and mathematics",Learner,"C++, Java, Python",Haven't really used it yet,,I use it for student work,Windows,Visual Studio 2015 or newer,"HN, Reddit and other programming news sites",,,,,,,,,,,,,,,,,,,,,,,,
15/04/2016 15:45:47,2-5 years,Enterprise development,"Yes, I enjoy computer science and mathematics",Intermediate,"C#, Java, Javascript, Kotlin, Python",Haven't really used it yet,,Just tinkering,Windows,"Visual Studio 2015 or newer, VS Code (with Ionide)","HN, Reddit and other programming news sites",,,,,,,,,,,,,,,,,,,,,,,,
15/04/2016 15:45:47,5-10 years,Financial services or similar,"Yes, I enjoy computer science and mathematics",Intermediate,"C#, F#, Java, Javascript",2-3 years,,I use it for hobby or side projects,Windows,Visual Studio 2015 or newer,"Twitter, F# Weekly, fsharp channel on Slack","Better domain modelling with records and unions, Conciseness of code (I can see more at a glance), Correctness (no nulls, it works first time), Functional but can be tweaked to get high performance","Active Patterns, Algebraic types (inc discriminated unions and tuples), Immutability by default, No dependency cycles, Simple ""one liner"" type definitions for records and DUs","Agents (MailboxProcessor), Quotations, Type providers, Units of measure","MSDN, Answers to Stack Overflow questions, Reading F# code written by experts",I'm willing to learn advanced concepts but only if they are relevant and practical,"More material with in-depth tutorials, More podcasts and other audio-only material",,Open source projects,"Utilities and tools, Financial services",Not doing data centric apps,"Windows, Mac, Linux",It's used unofficially,,"Too Windows-centric: They have concerns over cross-platform issues, Too Microsoft-centric: They think it is too closely linked to Microsoft, JVM based projects",,,Performance issues,JVM,,,,,,
15/04/2016 15:47:03,2-5 years,Consulting,"Yes, I enjoy computer science and mathematics",Learner,"C#, Javascript",Less than a year,,Just tinkering,"Windows, Linux","Visual Studio 2015 or newer, MonoDevelop",,Conciseness of code (I can see more at a glance),"Algebraic types (inc discriminated unions and tuples), Backtick naming, Immutability by default, Type inference",,"MSDN, Links and instructions from fsharp.org, F# bloggers, Videos (e.g. Community for F#)",I'm willing to learn advanced concepts but only if they are relevant and practical,"More material with real-world examples and war stories, More interactive tutorials (e.g. like the F# Koans)",,Not applicable. None of my F# code is used by other people,None - Just playing around,Not doing data centric apps,"Windows, Linux",I don't use F# at work,,,,Not enough real-world code to learn from,,Javascript,,,,"Books or longer articles explaining full context, Reference works or documentation with API listings or short tutorials, Recorded talks from a conference or user group, In-depth online courses (e.g. Pluralsight)",,
15/04/2016 15:48:18,10 or more years,Commercial software/web development,"Yes, I enjoy computer science and mathematics",Experienced,"C#, Javascript, Python, Rust, Typescript",Less than a year,,Just tinkering,Mac,VS Code (with Ionide),"HN, Reddit and other programming news sites",ML on .Net,"Easy integration with other .NET libraries, Immutability by default, printf that is type checked, Type inference",Agents (MailboxProcessor),"MSDN, F# bloggers",I like theory -- I'm not afraid of monads and other abstractions,More material with real-world examples and war stories,,Not applicable. None of my F# code is used by other people,"None - Just playing around, Games, Mobile apps",SQL databases,"Windows, Mac, iOS, Android, Amazon Web services",I don't use F# at work,"Domain modelling: making illegal states unrepresentable, Correctness: fewer bugs and less rework","No perceived benefits: They don't understand what benefits F# has over C# or other languages, Hiring: They worry about not being able to find F# developers, Too Microsoft-centric: They think it is too closely linked to Microsoft",,"Lack of good tutorials/documentation, Not enough real-world code to learn from","Not being part of the core .NET distribution, Lack of F# friendly libraries, Lack of good wrappers for non-F# libraries, Working with C#-centric tooling","Javascript, Native",,,,"Books or longer articles explaining full context, Reference works or documentation with API listings or short tutorials, Recorded talks from a conference or user group",,
15/04/2016 15:48:42,10 or more years,Enterprise development,"Yes, I enjoy computer science and mathematics",Experienced,"C#, F#",1-2 years,,I use it at work or for other commercial uses,Windows,Visual Studio 2015 or newer,"HN, Reddit and other programming news sites","Better domain modelling with records and unions, Conciseness of code (I can see more at a glance), Learning functional programming in general","Computation expressions, Immutability by default, The ""piping"" idiom, Type inference","Active Patterns, Agents (MailboxProcessor), Units of measure","F# books, Personal mentoring, Reading F# code written by experts",I like theory -- I'm not afraid of monads and other abstractions,"More material with in-depth tutorials, More material with real-world examples and war stories",,Internal enterprise projects,Games,"SQL databases, NoSQL database, Event sourcing",Windows,It's officially endorsed in my team for critical/production areas,"Domain modelling: making illegal states unrepresentable, Better for solving complex problems","No perceived benefits: They don't understand what benefits F# has over C# or other languages, Hiring: They worry about not being able to find F# developers, Training: They are worried about getting non-F# developers up to speed",,Not enough real-world code to learn from,"Less sophisticated tools for refactoring, etc.",None -- I'm happy with the CLR/Mono,,,,"In-person: In-depth trainings (2 or 3 days), Books or longer articles explaining full context","F# Power Tools, FSharpx, FAKE, Paket, Foq",
15/04/2016 15:48:48,,,,,,4 or more years,,I use it for research or academic work,,,,,,,,,,,,,,,,,,,,,,,,,,,
15/04/2016 15:48:52,10 or more years,Enterprise development,"No, I don't know much theory",Learner,C#,Less than a year,,I use it for hobby or side projects,"Windows, Linux","Visual Studio 2015 or newer, MonoDevelop","Twitter, F# Weekly","Great community, Learning functional programming in general","Active Patterns, Algebraic types (inc discriminated unions and tuples), Easy integration with other .NET libraries, Immutability by default, Type inference","Integration with non-F# libraries, Quotations, Type providers","F# bloggers, Videos (e.g. Community for F#)",I'm willing to learn advanced concepts but only if they are relevant and practical,"More material with in-depth tutorials, More material with real-world examples and war stories, More short ""live coding"" videos","- More understanding of data structures, esp. List, Seq, Array functions
- C# to F# (analogy based)
- developing a mini or micro project or library
",Not applicable. None of my F# code is used by other people,None - Just playing around,Not doing data centric apps,,It's used unofficially,"Domain modelling: making illegal states unrepresentable, Better for solving complex problems, terseness of language ","No perceived benefits: They don't understand what benefits F# has over C# or other languages, Too Microsoft-centric: They think it is too closely linked to Microsoft",,,"Lack of F# friendly libraries, Working with C#-centric tooling, Less sophisticated tools for refactoring, etc.","JVM, LLVM","There is no shiny product, to get people started. Scala has Spark, F# has ? (I know fake, paket, TypeProviders) but not ooomph product and segment.",,"I love F#, even though my own knowledge of it has glaring blind-spots. More workshop or cookbook style helps. Its more well organized in London and UK, and skillsmatter et al, workshops this side of the pond, would be great.","In-person: In-depth trainings (2 or 3 days), In-person: Attending a talks as part of a conference, Books or longer articles explaining full context, Recorded talks from a conference or user group, In-depth online courses (e.g. Pluralsight)",,
15/04/2016 15:49:15,10 or more years,"Academic, research, or related","Yes, I enjoy computer science and mathematics",Intermediate,"C, Go, Java",Less than two months,,Just tinkering,"Mac, Linux","Vim, Atom (with Ionide)","HN, Reddit and other programming news sites","Conciseness of code (I can see more at a glance), Having fun again",,,,,,,,,,,,,,,,,,,,,,,
15/04/2016 15:50:45,10 or more years,Enterprise development,"No, I don't know much theory",Intermediate,"C#, F#, Ruby",1-2 years,,I use it at work or for other commercial uses,"Windows, Mac","Visual Studio 2015 or newer, Xamarin, VS Code (with Ionide)","F# Weekly, F# bloggers","Better domain modelling with records and unions, Conciseness of code (I can see more at a glance), Correctness (no nulls, it works first time), Having fun again","Agents (MailboxProcessor), Algebraic types (inc discriminated unions and tuples), Easy integration with other .NET libraries, Interactive development, Simple ""one liner"" type definitions for records and DUs, Type inference",,"MSDN, F# books, F# bloggers",I'm willing to learn advanced concepts but only if they are relevant and practical,More material with in-depth tutorials,,Internal enterprise projects,"Utilities and tools, Custom development/specialist markets, Data analysis/statistics",SQL databases,"Windows, iOS, Android",It's officially endorsed in my team for critical/production areas,Domain modelling: making illegal states unrepresentable,Training: They are worried about getting non-F# developers up to speed,,,"Not being part of the core .NET distribution, Less sophisticated tools for refactoring, etc.","Javascript, LLVM","not much, just size of the community",,,Books or longer articles explaining full context,,
15/04/2016 15:52:03,2-5 years,Data or analytics related,"Yes, I enjoy computer science and mathematics",Experienced,"Clojure, F#, Haskell, Java, Python, R, Ruby, Scala",1-2 years,,I use it at work or for other commercial uses,"Windows, Linux","Visual Studio 2015 or newer, Xamarin, MonoDevelop, Emacs, Atom (with Ionide), OmniSharp","Twitter, F# Weekly, Google groups, F# bloggers, fsharp channel on Slack, IRC, StackOverflow chat","Conciseness of code (I can see more at a glance), Speed of development, Functional but can be tweaked to get high performance","Active Patterns, Agents (MailboxProcessor), Async workflows, Computation expressions, Interactive development, No dependency cycles","Object-oriented compatibility, Units of measure","MSDN, F# books, F# bloggers, Links posted on social media such as Twitter, Links mentioned in F# Weekly, Answers to Stack Overflow questions, Personal mentoring, Reading F# code written by experts",I like theory -- I'm not afraid of monads and other abstractions,"More material with in-depth tutorials, More material with short ""cookbook"" style information, More interactive tutorials (e.g. like the F# Koans)",,"Internal enterprise projects, Commercial products","Algorithm-heavy business applications (non-financial), Financial services, Machine learning, Mainstream business & enterprise applications, Research/Teaching, Data analysis/statistics, Text analysis/language parsing","NoSQL database, Event sourcing, Read-only data sources such as feeds, Data integration and EAI","Windows, Linux, Amazon Web services",It's officially endorsed in my team for non-critical/non-production code,"More productive with fewer developers, Better for solving complex problems","Hiring: They worry about not being able to find F# developers, Fad: They have concerns over long term language viability, Too Microsoft-centric: They think it is too closely linked to Microsoft",,"Lack of good tutorials/documentation, Unpleasant interactions with the community","Lack of good wrappers for non-F# libraries, Less sophisticated tools for refactoring, etc., Cross-platform issues","JVM, LLVM, Native",,,,"In-person: In-depth trainings (2 or 3 days), Books or longer articles explaining full context, Reference works or documentation with API listings or short tutorials, In-depth online courses (e.g. Pluralsight)",,
15/04/2016 15:53:10,5-10 years,Student,"Yes, I enjoy computer science and mathematics",Intermediate,"C, C++, Clojure, Haskell, Ocaml/SML, Python, Rust, Scheme/CL",Less than a year,"I use Linux as a daily driver, but I have F# + VisualStudio installed on Windows - The VS trial has expired despite having a student license and Community edition. I'd prefer to use a command line compiler plus Emacs anyway, but I haven't gotten  around to installing fsharpc (nor was I aware there was an F# compiler available for Linux until I looked it up five minutes ago)",I use it for hobby or side projects,Windows,"Visual Studio 2015 or newer, Emacs","HN, Reddit and other programming news sites, IRC","Better domain modelling with records and unions, Conciseness of code (I can see more at a glance), Correctness (no nulls, it works first time), Having fun again","Algebraic types (inc discriminated unions and tuples), Computation expressions, Interactive development, Simple ""one liner"" type definitions for records and DUs, The ""piping"" idiom, Type inference, Type providers","Integration with non-F# libraries, Object expressions, Object-oriented compatibility, Units of measure","MSDN, Links and instructions from fsharp.org",I like theory -- I'm not afraid of monads and other abstractions,"More material with in-depth tutorials, More material with short ""cookbook"" style information, More material with real-world examples and war stories, More interactive tutorials (e.g. like the F# Koans)",,Not applicable. None of my F# code is used by other people,None - Just playing around,Read-only data sources such as feeds,,I don't use F# at work,,,,"Lack of good tutorials/documentation, Not enough real-world code to learn from","Not being part of the core .NET distribution, Working with C#-centric tooling","JVM, Javascript, LLVM, Native",,,,"Books or longer articles explaining full context, Reference works or documentation with API listings or short tutorials",,
15/04/2016 15:53:44,5-10 years,"Academic, research, or related","Yes, I enjoy computer science and mathematics",Intermediate,Scala,Haven't really used it yet,,,,,"HN, Reddit and other programming news sites",,"Algebraic types (inc discriminated unions and tuples), Computation expressions, Immutability by default, Type inference",,,I like theory -- I'm not afraid of monads and other abstractions,"More material with in-depth tutorials, More material with short ""cookbook"" style information",,,,,,,,,,,,JVM,Type classes,,,"Books or longer articles explaining full context, Reference works or documentation with API listings or short tutorials, Recorded talks from a conference or user group",,
15/04/2016 15:54:38,10 or more years,Enterprise development,"Yes, I enjoy computer science and mathematics",Experienced,"C#, Javascript",1-2 years,,Just tinkering,Windows,"Visual Studio 2015 or newer, Visual Studio 2012 or 2013","HN, Reddit and other programming news sites, F# bloggers","Conciseness of code (I can see more at a glance), Correctness (no nulls, it works first time), Having fun again, Speed of development","Agents (MailboxProcessor), Algebraic types (inc discriminated unions and tuples), Async workflows, Computation expressions, Easy integration with other .NET libraries, Immutability by default, Interactive development, Object expressions, Type inference, Type providers, Units of measure","Active Patterns, Quotations","F# books, F# bloggers, Links mentioned in F# Weekly, Answers to Stack Overflow questions",,"More material with short ""cookbook"" style information, More interactive tutorials (e.g. like the F# Koans)",,Not applicable. None of my F# code is used by other people,"None - Just playing around, Non-commercial web site/app, Mobile apps","SQL databases, NoSQL database, Analytics","Windows, Linux, iOS, Android",I don't use F# at work,"Domain modelling: making illegal states unrepresentable, Correctness: fewer bugs and less rework, More productive with fewer developers, Faster time to market, Efficiency/Performance, Easy concurrency with async and agents, Better for solving complex problems","No perceived benefits: They don't understand what benefits F# has over C# or other languages, Hiring: They worry about not being able to find F# developers, Training: They are worried about getting non-F# developers up to speed",,Better industry adoption and MS support,"Less sophisticated tools for refactoring, etc.",LLVM,,,,"Books or longer articles explaining full context, Recorded talks from a conference or user group",,
15/04/2016 15:54:41,2-5 years,Commercial software/web development,"No, I don't know much theory",Learner,"C, Javascript, Python",Less than two months,,Just tinkering,"Windows, Mac, Linux","Emacs, Atom (with Ionide), VS Code (with Ionide)",,,"Algebraic types (inc discriminated unions and tuples), Async workflows, Object-oriented features (inc. C# compatibility, conciseness), printf that is type checked, The ""piping"" idiom, Type inference",,"Links and instructions from fsharp.org, F# bloggers, Answers to Stack Overflow questions, Reading F# code written by experts",I like theory -- I'm not afraid of monads and other abstractions,"More material with in-depth tutorials, More short ""live coding"" videos, More podcasts and other audio-only material",,Not applicable. None of my F# code is used by other people,None - Just playing around,Not doing data centric apps,,It's used unofficially,"Correctness: fewer bugs and less rework, Easy concurrency with async and agents",,,,,Javascript,,,,"In-person: In-depth trainings (2 or 3 days), Books or longer articles explaining full context, Reference works or documentation with API listings or short tutorials, Recorded talks from a conference or user group",,
15/04/2016 15:54:51,10 or more years,Enterprise development,"No, I don't know much theory",Learner,"Elixir, Javascript, Ruby, Smalltalk",Less than a year,,Just tinkering,"Windows, Mac","Sublime Text, Atom (with Ionide), VS Code (with Ionide)","Twitter, HN, Reddit and other programming news sites","Correctness (no nulls, it works first time), Learning functional programming in general","Immutability by default, Interactive development, The ""piping"" idiom, Type inference",,"MSDN, Links and instructions from fsharp.org, F# bloggers, Links posted on social media such as Twitter",I want to learn functional programming but I don't like academic jargon,"More material with in-depth tutorials, More material with short ""cookbook"" style information",,Internal enterprise projects,Financial services,SQL databases,"Windows, Azure",It's officially endorsed in my team for non-critical/non-production code,,"Training: They are worried about getting non-F# developers up to speed, Fad: They have concerns over long term language viability, Too Windows-centric: They have concerns over cross-platform issues",,I can't use my knowledge from C# or other imperative languages,Lack of good wrappers for non-F# libraries,None -- I'm happy with the CLR/Mono,,,,In-person: In-depth trainings (2 or 3 days),,
15/04/2016 15:54:58,10 or more years,Game Development,"Yes, I enjoy computer science and mathematics",Experienced,"C#, Erlang, Python",Less than a year,,I use it for hobby or side projects,"Mac, Linux",MonoDevelop,"Twitter, HN, Reddit and other programming news sites",Having fun again,"Active Patterns, Algebraic types (inc discriminated unions and tuples), Computation expressions, Immutability by default, Interactive development, The ""piping"" idiom, Type inference, Type providers","Object expressions, Quotations, Type providers, Units of measure","F# bloggers, Personal mentoring",I like theory -- I'm not afraid of monads and other abstractions,"More material with in-depth tutorials, More material with short ""cookbook"" style information, More material with real-world examples and war stories, More short ""live coding"" videos, More interactive tutorials (e.g. like the F# Koans)","just increase the volume of documentation, posts, etc.",Commercial products,"Games, Mobile apps","SQL databases, NoSQL database, Event sourcing, Read-only data sources such as feeds, Analytics","Linux, Amazon Web services, Other",It's used unofficially,"Domain modelling: making illegal states unrepresentable, Correctness: fewer bugs and less rework, More productive with fewer developers","Hiring: They worry about not being able to find F# developers, Training: They are worried about getting non-F# developers up to speed, Too Windows-centric: They have concerns over cross-platform issues, not deployable to non-windows boxes in production capacity yet",increase the speed at which it is deployable in production on freebsd and linux servers,"Lack of good tutorials/documentation, Installation process, Don't understand the compiler errors, Not enough real-world code to learn from","Not being part of the core .NET distribution, Working with C#-centric tooling, Difficulty in troubleshooting problems, Cross-platform issues","LLVM, Native",deployability on non-MS platforms,many of the questions had no proper answer and no fill in the blank explanation alternative,,"Books or longer articles explaining full context, Reference works or documentation with API listings or short tutorials, Recorded talks from a conference or user group",,
15/04/2016 15:57:09,2-5 years,Enterprise development,"No, I don't know much theory",Learner,"C#, Visual Basic",Haven't really used it yet,,,Windows,"Visual Studio 2015 or newer, Sublime Text",,Learning functional programming in general,"Easy integration with other .NET libraries, Object-oriented features (inc. C# compatibility, conciseness)","Active Patterns, Agents (MailboxProcessor), Async workflows, Computation expressions, Integration with non-F# libraries, Interactive development, Object expressions, Quotations, Static type constraints, Units of measure",Links and instructions from fsharp.org,I'm willing to learn advanced concepts but only if they are relevant and practical,"More material with real-world examples and war stories, More interactive tutorials (e.g. like the F# Koans)",,Not applicable. None of my F# code is used by other people,None - Just playing around,Not doing data centric apps,"Windows, Mac, Linux",I don't use F# at work,,,,"Lack of good tutorials/documentation, I can't use my knowledge from C# or other imperative languages, Not enough real-world code to learn from","Less sophisticated tools for refactoring, etc.",Javascript,,,,"Books or longer articles explaining full context, In-depth online courses (e.g. Pluralsight)",,
15/04/2016 16:00:55,10 or more years,Commercial software/web development,"No, I don't know much theory",Intermediate,"Clojure, Javascript, Ruby, Typescript",Haven't really used it yet,,Just tinkering,Linux,"Atom (with Ionide), VS Code (with Ionide)","HN, Reddit and other programming news sites","Correctness (no nulls, it works first time), Learning functional programming in general, Functional but can be tweaked to get high performance","Immutability by default, Simple ""one liner"" type definitions for records and DUs, The ""piping"" idiom, Type inference",,"Links and instructions from fsharp.org, F# bloggers",I'm willing to learn advanced concepts but only if they are relevant and practical,"More material with in-depth tutorials, More material with short ""cookbook"" style information, More material with real-world examples and war stories",,Not applicable. None of my F# code is used by other people,"None - Just playing around, Utilities and tools, Non-commercial web site/app","SQL databases, Read-only data sources such as feeds",Linux,I don't use F# at work,,"Too Windows-centric: They have concerns over cross-platform issues, Too Microsoft-centric: They think it is too closely linked to Microsoft",,"Lack of good tutorials/documentation, Installation process","Not being part of the core .NET distribution, Lack of F# friendly libraries, Difficulty in troubleshooting problems","Javascript, LLVM, Native",Linux!,,,"In-person: A talks at user groups, Books or longer articles explaining full context, Reference works or documentation with API listings or short tutorials",,
15/04/2016 16:01:20,10 or more years,Commercial software/web development,"Yes, I enjoy computer science and mathematics",Experienced,"C#, F#, Haskell, Lua",Less than a year,,I use it for hobby or side projects,Mac,"Visual Studio 2012 or 2013, Vim","HN, Reddit and other programming news sites",,"Algebraic types (inc discriminated unions and tuples), Computation expressions, Immutability by default, The ""piping"" idiom, Type inference, Units of measure","Integration with non-F# libraries, Object-oriented compatibility",Links and instructions from fsharp.org,I like theory -- I'm not afraid of monads and other abstractions,"More material with in-depth tutorials, More material with short ""cookbook"" style information",,Not applicable. None of my F# code is used by other people,"Utilities and tools, Custom development/specialist markets",SQL databases,,It's used unofficially,"Domain modelling: making illegal states unrepresentable, Correctness: fewer bugs and less rework, Better for solving complex problems","No perceived benefits: They don't understand what benefits F# has over C# or other languages, Training: They are worried about getting non-F# developers up to speed, No buy-in: There is lack of acceptance from other teams",,,"Not being part of the core .NET distribution, Difficulty in troubleshooting problems","LLVM, Native",,,,"Books or longer articles explaining full context, Reference works or documentation with API listings or short tutorials, Recorded talks from a conference or user group",,
15/04/2016 16:01:35,10 or more years,Commercial software/web development,"Yes, I enjoy computer science and mathematics",Learner,"C#, Javascript",Haven't really used it yet,,Just tinkering,Windows,Visual Studio 2012 or 2013,"HN, Reddit and other programming news sites",Learning functional programming in general,"Async workflows, Computation expressions, Easy integration with other .NET libraries, Immutability by default, Object-oriented features (inc. C# compatibility, conciseness), Type inference",Units of measure,Links and instructions from fsharp.org,I'm willing to learn advanced concepts but only if they are relevant and practical,"More material with in-depth tutorials, More material with short ""cookbook"" style information",,Not applicable. None of my F# code is used by other people,Custom development/specialist markets,SQL databases,Windows,I don't use F# at work,,"Too Windows-centric: They have concerns over cross-platform issues, Too Microsoft-centric: They think it is too closely linked to Microsoft, Lack of GADTs, lack of full tail recursion optimization in .net",,"I can't use my knowledge from C# or other imperative languages, GADTs, better tail recursion","Not being part of the core .NET distribution, Less sophisticated tools for refactoring, etc.","Javascript, LLVM","Lack of GADTs, poor .net platform support for tail recursion optimization.",,,Books or longer articles explaining full context,,
15/04/2016 16:02:31,10 or more years,Consulting,"Yes, I enjoy computer science and mathematics",Experienced,"C#, F#, Javascript, Typescript",4 or more years,,I use it at work or for other commercial uses,Windows,Visual Studio 2015 or newer,"Twitter, F# Weekly, fsharp channel on Slack","Having fun again, Learning functional programming in general","Agents (MailboxProcessor), Algebraic types (inc discriminated unions and tuples), Immutability by default, The ""piping"" idiom, Type inference","Active Patterns, Interactive development, Quotations, Static type constraints, Units of measure","F# books, F# bloggers, Links mentioned in F# Weekly, Videos (e.g. Community for F#)",I'm willing to learn advanced concepts but only if they are relevant and practical,More material with real-world examples and war stories,,"Internal enterprise projects, Open source projects","Utilities and tools, Commercial web site/app",SQL databases,"Windows, Azure",It's officially endorsed in my team for critical/production areas,"Domain modelling: making illegal states unrepresentable, Correctness: fewer bugs and less rework, Easy concurrency with async and agents","No perceived benefits: They don't understand what benefits F# has over C# or other languages, Fad: They have concerns over long term language viability",,Not enough real-world code to learn from,Working with C#-centric tooling,None -- I'm happy with the CLR/Mono,,,,"Books or longer articles explaining full context, Recorded talks from a conference or user group",,
15/04/2016 16:04:23,10 or more years,Enterprise development,"Yes, I enjoy computer science and mathematics",Intermediate,"C#, F#, Java, Javascript",1-2 years,,I use it for hobby or side projects,Windows,"Visual Studio 2015 or newer, Emacs, VS Code (with Ionide)","Twitter, F# Weekly","Conciseness of code (I can see more at a glance), Correctness (no nulls, it works first time), Having fun again, Learning functional programming in general, Speed of development","The ""piping"" idiom",Object expressions,"MSDN, Videos (e.g. Community for F#)",I like theory -- I'm not afraid of monads and other abstractions,"More material with short ""cookbook"" style information, More material with real-world examples and war stories",,Internal enterprise projects,None - Just playing around,Not doing data centric apps,Windows,It's used unofficially,"More productive with fewer developers, Faster time to market, Efficiency/Performance, Easy concurrency with async and agents","No perceived benefits: They don't understand what benefits F# has over C# or other languages, No buy-in: There is lack of acceptance from other teams",,Lack of good tutorials/documentation,"Working with C#-centric tooling, Less sophisticated tools for refactoring, etc.","JVM, Javascript, LLVM, Native",,,,"In-person: In-depth trainings (2 or 3 days), In-person: A talks at user groups","WebSharper
FSharp.Data
",
15/04/2016 16:08:23,5-10 years,Enterprise development,"No, I don't know much theory",Intermediate,"C#, F#, Javascript, Python, Scala, Visual Basic",1-2 years,,I use it at work or for other commercial uses,Windows,"Visual Studio 2012 or 2013, VS Code (with Ionide)","F# Weekly, F# bloggers","Better domain modelling with records and unions, Conciseness of code (I can see more at a glance), Correctness (no nulls, it works first time), Having fun again, Learning functional programming in general, Functional but can be tweaked to get high performance, Another point of view on programming, patterns, architecture","Agents (MailboxProcessor), Algebraic types (inc discriminated unions and tuples), Easy integration with other .NET libraries, Immutability by default, Interactive development, Simple ""one liner"" type definitions for records and DUs, The ""piping"" idiom, Type inference, Type providers",Units of measure,"MSDN, Links and instructions from fsharp.org, F# books, F# bloggers, Links mentioned in F# Weekly, Answers to Stack Overflow questions, Reading F# code written by experts, fsharpforfunandprofit.com",I like theory -- I'm not afraid of monads and other abstractions,More material with real-world examples and war stories,It is a lot easier with those great advances in tooling.,Internal enterprise projects,"None - Just playing around, Financial services, Mainstream business & enterprise applications",SQL databases,Windows,I start new projects with F# silently and rush as fast as possible to the point when it is to late to roll back to C#,"Domain modelling: making illegal states unrepresentable, Correctness: fewer bugs and less rework, More productive with fewer developers, Faster time to market, Efficiency/Performance, Easy concurrency with async and agents, Better for solving complex problems, less boilerplate, ability to use objectivity only where appropriate","No perceived benefits: They don't understand what benefits F# has over C# or other languages, Hiring: They worry about not being able to find F# developers, Training: They are worried about getting non-F# developers up to speed, conservatism - C# works and is proven, so why would we switch to F#?",kill some people?,syntax is much different compared to C descendants,No acceptance from other developers,"None -- I'm happy with the CLR/Mono, LLVM, Native","Community is very active, but not numerous. It's not popular enough to get support of every new APIs.",,I ♥ F#,"Books or longer articles explaining full context, Reference works or documentation with API listings or short tutorials, Recorded talks from a conference or user group, for other languages, Coursera is great","- Fsharp.Data
- MS sql type providers
- FAKE
- Websharper
- MailboxProcessor",
15/04/2016 16:08:31,10 or more years,,,Experienced,"C#, Erlang, F#",4 or more years,,I use it at work or for other commercial uses,"Windows, Mac, Linux","Visual Studio 2015 or newer, Visual Studio 2012 or 2013, Vim","Twitter, F# Weekly, fsharp channel on Slack","Better domain modelling with records and unions, Conciseness of code (I can see more at a glance), Correctness (no nulls, it works first time), Great community, Having fun again, Learning functional programming in general, Speed of development, Functional but can be tweaked to get high performance","Active Patterns, Agents (MailboxProcessor), Algebraic types (inc discriminated unions and tuples), Async workflows, Immutability by default, Interactive development, Type inference","Quotations, Type providers","F# books, Reading F# code written by experts",I like theory -- I'm not afraid of monads and other abstractions,More material with real-world examples and war stories,,"Internal enterprise projects, Open source projects","Utilities and tools, Mainstream business & enterprise applications, Commercial web site/app","NoSQL database, Event sourcing","Windows, Linux",It's officially endorsed in my team for critical/production areas,"Domain modelling: making illegal states unrepresentable, Correctness: fewer bugs and less rework, More productive with fewer developers, Faster time to market, Efficiency/Performance, Easy concurrency with async and agents, Better for solving complex problems","No perceived benefits: They don't understand what benefits F# has over C# or other languages, Hiring: They worry about not being able to find F# developers, Training: They are worried about getting non-F# developers up to speed, No buy-in: There is lack of acceptance from other teams",,Not enough real-world code to learn from,"Working with C#-centric tooling, Cross-platform issues",Native,"dependency on BCL

a more idomatic set of base class functions would be nice which don't require bcl",,,Books or longer articles explaining full context,,
15/04/2016 16:10:04,10 or more years,aerospace,"No, I don't know much theory",Learner,"C, C++, Java, Python",Haven't really used it yet,,Just tinkering,Windows,tryfsharp,"HN, Reddit and other programming news sites","Conciseness of code (I can see more at a glance), Correctness (no nulls, it works first time), Having fun again, Learning functional programming in general","Immutability by default, Interactive development, Simple ""one liner"" type definitions for records and DUs, The ""piping"" idiom, Type inference, Units of measure","Active Patterns, Agents (MailboxProcessor), Async workflows, Integration with non-F# libraries, Quotations, Type providers",Links and instructions from fsharp.org,I want to learn functional programming but I don't like academic jargon,"More material with in-depth tutorials, More material with short ""cookbook"" style information, More material with real-world examples and war stories",,Not applicable. None of my F# code is used by other people,None - Just playing around,Not doing data centric apps,Windows,I don't use F# at work,"Domain modelling: making illegal states unrepresentable, Correctness: fewer bugs and less rework","No perceived benefits: They don't understand what benefits F# has over C# or other languages, Hiring: They worry about not being able to find F# developers, Training: They are worried about getting non-F# developers up to speed, Fad: They have concerns over long term language viability",,"Don't understand the compiler errors, Not enough real-world code to learn from","Lack of F# friendly libraries, Less sophisticated tools for refactoring, etc., Difficulty in troubleshooting problems",Native,,,,"Books or longer articles explaining full context, Reference works or documentation with API listings or short tutorials, Recorded talks from a conference or user group",,
15/04/2016 16:11:40,2-5 years,Consulting,"Yes, I enjoy computer science and mathematics",Experienced,F#,2-3 years,,I use it at work or for other commercial uses,Windows,"Visual Studio 2015 or newer, Visual Studio 2012 or 2013","Twitter, F# Weekly","Better domain modelling with records and unions, Conciseness of code (I can see more at a glance), Correctness (no nulls, it works first time), Learning functional programming in general, Speed of development, Functional but can be tweaked to get high performance","Active Patterns, Algebraic types (inc discriminated unions and tuples), Computation expressions, Easy integration with other .NET libraries, Immutability by default, Interactive development, Quotations, Simple ""one liner"" type definitions for records and DUs, The ""piping"" idiom, Type inference","Agents (MailboxProcessor), Async workflows","MSDN, Links and instructions from fsharp.org, Personal mentoring, Reading F# code written by experts",I like theory -- I'm not afraid of monads and other abstractions,,,"Internal enterprise projects, Commercial products","Algorithm-heavy business applications (non-financial), Financial services, Machine learning, Mainstream business & enterprise applications",NoSQL database,"Windows, Azure",It's officially endorsed in my team for critical/production areas,"Domain modelling: making illegal states unrepresentable, Correctness: fewer bugs and less rework, More productive with fewer developers, Better for solving complex problems",Nothing. Everyone loves it.,,,"Not being part of the core .NET distribution, Less sophisticated tools for refactoring, etc., Difficulty in troubleshooting problems, Cross-platform issues",Native,,,,,"- Akka.NET 
- Hopac
- F# Power Tools (VS extension)
- Task Parallel Library / Rx
- Deedle ",
15/04/2016 16:12:08,Less than a year,Consulting,"No, I don't know much theory",Beginner,"C#, F#, Javascript, Typescript",4 or more years,,I use it for hobby or side projects,"Windows, Mac, Linux","Visual Studio 2015 or newer, VS Code (with Ionide), OmniSharp, Cloudsharper","F# Weekly, HN, Reddit and other programming news sites, F# bloggers, StackOverflow chat","Conciseness of code (I can see more at a glance), Correctness (no nulls, it works first time), Speed of development, Functional but can be tweaked to get high performance","Agents (MailboxProcessor), Async workflows, Easy integration with other .NET libraries, The ""piping"" idiom, Type inference, Type providers",Computation expressions,"Links and instructions from fsharp.org, F# bloggers, Links mentioned in F# Weekly, Videos (e.g. Community for F#), Reading F# code written by experts",I'm willing to learn advanced concepts but only if they are relevant and practical,"More material with in-depth tutorials, More material with real-world examples and war stories, More interactive tutorials (e.g. like the F# Koans)",Having more active open source examples of F# projects to refer to ,"Internal enterprise projects, Open source projects","None - Just playing around, Utilities and tools, Non-commercial web site/app","SQL databases, NoSQL database","Windows, Mac, WinPhone, Azure, Amazon Web services",It's used unofficially,"Correctness: fewer bugs and less rework, More productive with fewer developers, Faster time to market, Efficiency/Performance, Better for solving complex problems","No perceived benefits: They don't understand what benefits F# has over C# or other languages, Hiring: They worry about not being able to find F# developers, Money: They worry that good F# developers will cost too much, Training: They are worried about getting non-F# developers up to speed","Better training material

More production-ready and tested tools and libraries, especially targeted towards web and enterprise projects


","Lack of good tutorials/documentation, Not enough real-world code to learn from","Not being part of the core .NET distribution, Lack of F# friendly libraries, Lack of good wrappers for non-F# libraries, Working with C#-centric tooling",None -- I'm happy with the CLR/Mono,"Lack of what seems like ""buy-in"" from MSFT. Things like .NET Native and core .NET not being released with F# support from day 1 give the impression that F# is not thought of as a first class .NET language at MSFT",,,"Books or longer articles explaining full context, Reference works or documentation with API listings or short tutorials, Recorded talks from a conference or user group, Blog Posts","VS 2015
Suave
Paket
Type Providers

",
15/04/2016 16:12:12,10 or more years,Technical Project Manager,"No, I don't know much theory",Learner,"C, C#, C++, Elixir, Erlang, F#, Java, Objective-C, Perl, Python",Less than a year,"Learning Elixir.  Was working on an F# project at my previous job, but it was cut short.  I'd like to pick it back up again & open source the idea was working on.",I use it for hobby or side projects,Windows,Visual Studio 2012 or 2013,"F# bloggers, StackOverflow chat","Conciseness of code (I can see more at a glance), Having fun again, Learning functional programming in general","Easy integration with other .NET libraries, Immutability by default, The ""piping"" idiom",Integration with non-F# libraries,"Links and instructions from fsharp.org, F# bloggers, Answers to Stack Overflow questions",I'm willing to learn advanced concepts but only if they are relevant and practical,"More material with in-depth tutorials, More material with short ""cookbook"" style information, More material with real-world examples and war stories, More interactive tutorials (e.g. like the F# Koans)",,"Internal enterprise projects, Not applicable. None of my F# code is used by other people","None - Just playing around, Utilities and tools",Not doing data centric apps,Windows,It's used unofficially,Correctness: fewer bugs and less rework,"No perceived benefits: They don't understand what benefits F# has over C# or other languages, Fad: They have concerns over long term language viability, No buy-in: There is lack of acceptance from other teams",,"Lack of good tutorials/documentation, Not enough real-world code to learn from","Lack of F# friendly libraries, Lack of good wrappers for non-F# libraries",None -- I'm happy with the CLR/Mono,It's owned by Microsoft and it's tied to the entire Microsoft .Net domain,,,"In-person: In-depth trainings (2 or 3 days), Books or longer articles explaining full context, Reference works or documentation with API listings or short tutorials, Recorded talks from a conference or user group",FParsec,
15/04/2016 16:12:45,10 or more years,Consulting,"No, I don't know much theory",Experienced,F#,3-4 years,,I use it for hobby or side projects,Linux,Visual Studio 2012 or 2013,"HN, Reddit and other programming news sites","Conciseness of code (I can see more at a glance), Correctness (no nulls, it works first time), Having fun again, Learning functional programming in general, Speed of development","Immutability by default, The ""piping"" idiom",Object-oriented compatibility,"F# books, F# bloggers, Reading F# code written by experts",I like theory -- I'm not afraid of monads and other abstractions,,,"Internal enterprise projects, Commercial products","Utilities and tools, Algorithm-heavy business applications (non-financial), Mainstream business & enterprise applications, Commercial web site/app, Mobile apps, Text analysis/language parsing","SQL databases, NoSQL database, Read-only data sources such as feeds",Linux,I don't use F# at work,,,,"More like OCAML and Haskell, pure FP. Less functional programming for C# dudes",Drifting away from OCAML. There was a tremendous learning/integration potential there,None -- I'm happy with the CLR/Mono,,,,,"PowerPack
FParsec
",
15/04/2016 16:12:46,2-5 years,Student,"Yes, I enjoy computer science and mathematics",Intermediate,"C#, F#, Haskell",1-2 years,,I use it for hobby or side projects,Windows,Visual Studio 2015 or newer,"Twitter, HN, Reddit and other programming news sites","Better domain modelling with records and unions, Conciseness of code (I can see more at a glance), Correctness (no nulls, it works first time), Having fun again, Learning functional programming in general","Algebraic types (inc discriminated unions and tuples), Async workflows, Backtick naming, Computation expressions, Immutability by default, No dependency cycles, printf that is type checked, Simple ""one liner"" type definitions for records and DUs, The ""piping"" idiom, Type inference","Active Patterns, Agents (MailboxProcessor), Interactive development, Object expressions, Object-oriented compatibility, Quotations, Static type constraints, Units of measure",F# bloggers,I like theory -- I'm not afraid of monads and other abstractions,"More short ""live coding"" videos",,Not applicable. None of my F# code is used by other people,Games,"SQL databases, NoSQL database, Event sourcing",Windows,I don't use F# at work,"Domain modelling: making illegal states unrepresentable, Correctness: fewer bugs and less rework","Hiring: They worry about not being able to find F# developers, Training: They are worried about getting non-F# developers up to speed, Too Windows-centric: They have concerns over cross-platform issues, No buy-in: There is lack of acceptance from other teams",,Not enough real-world code to learn from,"Not being part of the core .NET distribution, Lack of good wrappers for non-F# libraries, Less sophisticated tools for refactoring, etc., Cross-platform issues","JVM, LLVM, Native",Lack of .NET Core or poor tooling (compared to ReSharper),,,"Recorded talks from a conference or user group, In-depth online courses (e.g. Pluralsight)","Fsharpx
FsCheck",
15/04/2016 16:13:43,10 or more years,Data or analytics related,"No, I don't know much theory",Intermediate,"C#, F#",1-2 years,,I use it at work or for other commercial uses,Windows,Visual Studio 2015 or newer,"F# Weekly, HN, Reddit and other programming news sites","Better domain modelling with records and unions, Conciseness of code (I can see more at a glance), Correctness (no nulls, it works first time), Speed of development","Agents (MailboxProcessor), Algebraic types (inc discriminated unions and tuples), Async workflows, Backtick naming, Computation expressions, Immutability by default, Interactive development, No dependency cycles, printf that is type checked, Simple ""one liner"" type definitions for records and DUs, The ""piping"" idiom, Type inference, Type providers, Units of measure","Active Patterns, Object expressions, Object-oriented compatibility, Quotations, Static type constraints",F# books,I'm willing to learn advanced concepts but only if they are relevant and practical,More material with real-world examples and war stories,,Internal enterprise projects,"Utilities and tools, Financial services, Non-commercial web site/app, Data analysis/statistics",SQL databases,Windows,It's officially endorsed in my team for critical/production areas,"More productive with fewer developers, Easy concurrency with async and agents",Nothing. Everyone loves it.,,,,None -- I'm happy with the CLR/Mono,,,,Books or longer articles explaining full context,,
15/04/2016 16:14:23,5-10 years,Commercial software/web development,"Yes, I enjoy computer science and mathematics",Intermediate,"C#, F#, Javascript",Haven't really used it yet,,Just tinkering,Windows,"Visual Studio 2015 or newer, Visual Studio 2012 or 2013, Linqpad",F# bloggers,"Better domain modelling with records and unions, Conciseness of code (I can see more at a glance), Learning functional programming in general","Easy integration with other .NET libraries, The ""piping"" idiom, Type inference, Type providers","Active Patterns, Agents (MailboxProcessor)","F# books, F# bloggers",I like theory -- I'm not afraid of monads and other abstractions,"More material with in-depth tutorials, More short ""live coding"" videos",,Not applicable. None of my F# code is used by other people,None - Just playing around,"SQL databases, Read-only data sources such as feeds",Windows,I don't use F# at work,Better for solving complex problems,"Hiring: They worry about not being able to find F# developers, Training: They are worried about getting non-F# developers up to speed",,Not enough real-world code to learn from,,None -- I'm happy with the CLR/Mono,,,,"In-person: In-depth trainings (2 or 3 days), Recorded talks from a conference or user group",,
15/04/2016 16:16:05,2-5 years,Mechanical Engineering,"No, I don't know much theory",Intermediate,"C#, F#, Labview",Less than a year,,I use it at work or for other commercial uses,Windows,Visual Studio 2015 or newer,"HN, Reddit and other programming news sites","Learning functional programming in general, Speed of development","Easy integration with other .NET libraries, Interactive development, The ""piping"" idiom","Agents (MailboxProcessor), Object expressions, Object-oriented compatibility, Quotations, Type providers, Units of measure","Links and instructions from fsharp.org, F# books, F# bloggers, Answers to Stack Overflow questions",I'm willing to learn advanced concepts but only if they are relevant and practical,"More material with short ""cookbook"" style information, More material with real-world examples and war stories",,Internal enterprise projects,"Utilities and tools, Algorithm-heavy business applications (non-financial), Custom development/specialist markets, Text analysis/language parsing",Not doing data centric apps,Windows,It's officially endorsed in my team for critical/production areas,"Correctness: fewer bugs and less rework, Faster time to market, Better for solving complex problems",No buy-in: There is lack of acceptance from other teams,,Not enough real-world code to learn from,,None -- I'm happy with the CLR/Mono,,,,Books or longer articles explaining full context,"Interactive window, C# integration.",
15/04/2016 16:16:23,10 or more years,Commercial software/web development,"Yes, I enjoy computer science and mathematics",Intermediate,"C#, Javascript, Typescript",Less than two months,,Just tinkering,"Windows, Mac","Visual Studio 2015 or newer, Xamarin, VS Code (with Ionide)","Twitter, HN, Reddit and other programming news sites, F# bloggers",Learning functional programming in general,"Immutability by default, Units of measure",,F# bloggers,I want to learn functional programming but I don't like academic jargon,More interactive tutorials (e.g. like the F# Koans),,Not applicable. None of my F# code is used by other people,None - Just playing around,,"Windows, Mac, Linux",I don't use F# at work,,"No perceived benefits: They don't understand what benefits F# has over C# or other languages, Hiring: They worry about not being able to find F# developers",,Don't understand the compiler errors,Difficulty in troubleshooting problems,"LLVM, Native",Compiler errors are too difficult to understand for me as a beginner in F#,,,,,
15/04/2016 16:18:32,10 or more years,"Academic, research, or related","Yes, I enjoy computer science and mathematics",Intermediate,"C, Java, Python, Rust, Scheme/CL",Haven't really used it yet,,Just tinkering,Linux,,"HN, Reddit and other programming news sites","Conciseness of code (I can see more at a glance), Correctness (no nulls, it works first time), Functional but can be tweaked to get high performance","Algebraic types (inc discriminated unions and tuples), Immutability by default, Interactive development",,"MSDN, Links and instructions from fsharp.org, Answers to Stack Overflow questions, Reading F# code written by experts",I like theory -- I'm not afraid of monads and other abstractions,More material with real-world examples and war stories,,Not applicable. None of my F# code is used by other people,None - Just playing around,,,I don't use F# at work,,,,Lack of good tutorials/documentation,"Less sophisticated tools for refactoring, etc., Cross-platform issues","JVM, LLVM, Native",,,,"In-person: In-depth trainings (2 or 3 days), In-person: Shorter workshops focused on a specific topic (1 day), Reference works or documentation with API listings or short tutorials, Recorded talks from a conference or user group",,
15/04/2016 16:24:10,10 or more years,Enterprise development,"Yes, I enjoy computer science and mathematics",Intermediate,"C, Ceylon, Python",Haven't really used it yet,,Just tinkering,Linux,Vim,"HN, Reddit and other programming news sites, F# bloggers",Learning functional programming in general,,,"Links and instructions from fsharp.org, F# books, F# bloggers, Answers to Stack Overflow questions",I like theory -- I'm not afraid of monads and other abstractions,"More material with in-depth tutorials, More material with short ""cookbook"" style information, More material with real-world examples and war stories, More interactive tutorials (e.g. like the F# Koans)",,,None - Just playing around,,Linux,I don't use F# at work,,"Fad: They have concerns over long term language viability, No buy-in: There is lack of acceptance from other teams",,,,"JVM, LLVM, Native",,,,"In-person: In-depth trainings (2 or 3 days), In-person: Shorter workshops focused on a specific topic (1 day), In-person: A talks at user groups, In-person: Attending a talks as part of a conference, Books or longer articles explaining full context, Reference works or documentation with API listings or short tutorials, Recorded talks from a conference or user group",,
15/04/2016 16:24:58,10 or more years,Commercial software/web development,"No, I don't know much theory",Experienced,"C, C#, F#, Rust",4 or more years,,I use it at work or for other commercial uses,"Windows, Linux","Visual Studio 2015 or newer, Vim, Emacs","HN, Reddit and other programming news sites, Don Syme/F# team blog","Conciseness of code (I can see more at a glance), Correctness (no nulls, it works first time), Having fun again, Functional but can be tweaked to get high performance","Active Patterns, Agents (MailboxProcessor), Algebraic types (inc discriminated unions and tuples), Immutability by default, Interactive development, Quotations, The ""piping"" idiom, Nested code (func in func etc)","Computation expressions, Units of measure",Personal mentoring,I like theory -- I'm not afraid of monads and other abstractions,,"Teach fundamentals. Show how ""let add a b = a + b"" is equivalent to ""let add = fun a -> fun b -> a + b"". Show how lists can be built simply from a simple recursive type. Show how ""pipelining"" doesn't exist. It's just a simple ""let (|>) x f = f x"". Getting the basics means the rest falls in place because F# has a coherent, elegant, design.","Internal enterprise projects, Commercial products, Open source projects","Utilities and tools, Mainstream business & enterprise applications, Commercial web site/app, Data analysis/statistics, Other","SQL databases, NoSQL database, Read-only data sources such as feeds, Analytics","Windows, Linux, Other",It's officially endorsed in my team for critical/production areas,"Domain modelling: making illegal states unrepresentable, Correctness: fewer bugs and less rework, More productive with fewer developers, Better for solving complex problems","Hiring: They worry about not being able to find F# developers, Too Windows-centric: They have concerns over cross-platform issues, Idiocy. People think F# is hard. Some people are apparently honestly unable to understand things. They seem to be the types that think verbosity=readability. I even had one customer say he was worried his company valuation might be less if he used F# vs C#.","Make F# first-class in VS. Get MS to stop acting like morons and show that F# is totally C#'s equal, and not just ""for scientists and quants"". Even this questionnaire is skewed in that direction. Apart from GUI tooling, F# beats C# in every use case. Kill this stupid ""right tool for the right job"" excuse?

Then promote how easy F# is and how there's nothing to fear. That the decision tree should be ""Are you tied to legacy code in C#? No -> use F#.""",,"Not being part of the core .NET distribution, Working with C#-centric tooling, Less sophisticated tools for refactoring, etc.","Javascript, LLVM, Native","Microsoft's poor support; treating it as a second child. It's obvious MS is embarrassed that despite hiring a top guy to build Delphi++, MSR Cambridge comes out of nowhere and no only handles the generics work MSCorp couldn't do, but also delivers a superior language.

Get MS to stop underselling F# and F# will rule.",,,,"FParsec
VS integration
Otherwise I'm fairly vanilla",
15/04/2016 16:25:16,10 or more years,Commercial software/web development,"Yes, I enjoy computer science and mathematics",Experienced,C++,Less than two months,,Just tinkering,"Windows, Mac, Linux","Visual Studio 2012 or 2013, Sublime Text","HN, Reddit and other programming news sites","Conciseness of code (I can see more at a glance), Correctness (no nulls, it works first time), Having fun again","Agents (MailboxProcessor), Algebraic types (inc discriminated unions and tuples), Object-oriented features (inc. C# compatibility, conciseness), printf that is type checked, Simple ""one liner"" type definitions for records and DUs",,"MSDN, F# books, Reading F# code written by experts",I like theory -- I'm not afraid of monads and other abstractions,"More material with in-depth tutorials, More material with real-world examples and war stories",,Not applicable. None of my F# code is used by other people,None - Just playing around,"SQL databases, NoSQL database, Not doing data centric apps","Windows, Mac, Linux, iOS, Android",I don't use F# at work,"Domain modelling: making illegal states unrepresentable, Correctness: fewer bugs and less rework",Too Windows-centric: They have concerns over cross-platform issues,,,Not being part of the core .NET distribution,"LLVM, Native",,,,"Books or longer articles explaining full context, Reference works or documentation with API listings or short tutorials, Recorded talks from a conference or user group, In-depth online courses (e.g. Pluralsight)",,
15/04/2016 16:25:27,2-5 years,"Academic, research, or related","Yes, I enjoy computer science and mathematics",Intermediate,"C, C++, Ocaml/SML",Less than two months,,I use it for research or academic work,"Windows, Linux","Visual Studio 2015 or newer, MonoDevelop, Emacs","Twitter, F# Weekly, HN, Reddit and other programming news sites","Correctness (no nulls, it works first time), Having fun again, Learning functional programming in general, Speed of development, Functional but can be tweaked to get high performance","Algebraic types (inc discriminated unions and tuples), Computation expressions, Easy integration with other .NET libraries, Object expressions, Object-oriented features (inc. C# compatibility, conciseness), Type inference",Active Patterns,F# books,I like theory -- I'm not afraid of monads and other abstractions,More material with in-depth tutorials,,Open source projects,Research/Teaching,Not doing data centric apps,"Windows, Linux",It's used unofficially,"More productive with fewer developers, Efficiency/Performance, Easy concurrency with async and agents",Nothing. Everyone loves it.,,Not enough real-world code to learn from,Lack of F# friendly libraries,"LLVM, Native",,,,Books or longer articles explaining full context,,
15/04/2016 16:26:04,5-10 years,Commercial software/web development,"Yes, I enjoy computer science and mathematics",Experienced,"C#, Clojure, F#",1-2 years,,I use it at work or for other commercial uses,Windows,Visual Studio 2015 or newer,"Twitter, fsharp channel on Slack","Conciseness of code (I can see more at a glance), Correctness (no nulls, it works first time)","Active Patterns, Agents (MailboxProcessor), Algebraic types (inc discriminated unions and tuples), Interactive development, Simple ""one liner"" type definitions for records and DUs","Computation expressions, Quotations, Units of measure","MSDN, F# books, F# bloggers, Links posted on social media such as Twitter, Links mentioned in F# Weekly, #fsharp Slack",I'm willing to learn advanced concepts but only if they are relevant and practical,More material with real-world examples and war stories,More top notch open source software created in F#.,"Internal enterprise projects, Commercial products, Open source projects","Algorithm-heavy business applications (non-financial), Commercial web site/app, Text analysis/language parsing",SQL databases,Windows,It's officially endorsed in my team for critical/production areas,"Correctness: fewer bugs and less rework, More productive with fewer developers, Better for solving complex problems","Training: They are worried about getting non-F# developers up to speed, No buy-in: There is lack of acceptance from other teams",,"Too many half finished F# features (e.g., Type Providers) and projects (e.g., FunScript) endorsed by community with no caveats",Working with C#-centric tooling,"JVM, Javascript, LLVM","Half completed features. Features that were added without really thinking about how they would interact with other language features. For example, creating type providers is a complete mess (especially via Quotations), and only supports a subset of the language (e.g., no generics, no records, etc), leading to a lot of complexity for type provider authors.",,,In-person: A talks at user groups,"FParsec
Paket
FAKE
ProjectScaffold
Suave",
15/04/2016 16:27:14,10 or more years,Enterprise development,"No, I don't know much theory",Learner,"C#, Typescript",Less than a year,,I use it at work or for other commercial uses,Windows,"Visual Studio 2015 or newer, Visual Studio 2012 or 2013",,"Better domain modelling with records and unions, Having fun again, Learning functional programming in general","Algebraic types (inc discriminated unions and tuples), Easy integration with other .NET libraries, Immutability by default, printf that is type checked, Type inference","Agents (MailboxProcessor), Async workflows, Computation expressions, Interactive development, Quotations, Type providers, Units of measure","MSDN, Links and instructions from fsharp.org, Reading F# code written by experts",I want to learn functional programming but I don't like academic jargon,"More material with in-depth tutorials, More material with short ""cookbook"" style information",,Internal enterprise projects,Utilities and tools,Not doing data centric apps,Windows,It's officially endorsed in my team for non-critical/non-production code,Domain modelling: making illegal states unrepresentable,"No perceived benefits: They don't understand what benefits F# has over C# or other languages, Training: They are worried about getting non-F# developers up to speed",,"I can't use my knowledge from C# or other imperative languages, Don't understand the compiler errors","Less sophisticated tools for refactoring, etc., Difficulty in troubleshooting problems",None -- I'm happy with the CLR/Mono,,,,"Books or longer articles explaining full context, Reference works or documentation with API listings or short tutorials, Recorded talks from a conference or user group, In-depth online courses (e.g. Pluralsight)",,
15/04/2016 16:29:03,10 or more years,Enterprise development,"Yes, I enjoy computer science and mathematics",Intermediate,"Java, Perl, PHP, Python, Ruby, Scheme/CL, Visual Basic",Less than a year,,I use it at work or for other commercial uses,"Windows, Mac","Xamarin, VS Code (with Ionide)",F# Weekly,Having fun again,"Easy integration with other .NET libraries, Immutability by default, Interactive development",,"F# books, F# bloggers",I'm willing to learn advanced concepts but only if they are relevant and practical,"More material with in-depth tutorials, More material with short ""cookbook"" style information, More material with real-world examples and war stories, More short ""live coding"" videos, More podcasts and other audio-only material, More interactive tutorials (e.g. like the F# Koans)",,"Commercial products, Open source projects",Commercial web site/app,Not doing data centric apps,"Windows, Mac",I don't use F# at work,,,,,,None -- I'm happy with the CLR/Mono,,,,"Books or longer articles explaining full context, Recorded talks from a conference or user group, In-depth online courses (e.g. Pluralsight)",,
15/04/2016 16:29:39,1-2 years,Commercial software/web development,"Yes, I enjoy computer science and mathematics",Intermediate,"C#, Javascript, Visual Basic",Less than a year,,I use it for hobby or side projects,"Windows, Linux","Visual Studio 2015 or newer, MonoDevelop, VS Code (with Ionide), Cloudsharper","HN, Reddit and other programming news sites, F# bloggers, fsharp channel on Slack","Better domain modelling with records and unions, Conciseness of code (I can see more at a glance), Correctness (no nulls, it works first time), Having fun again, Learning functional programming in general","Algebraic types (inc discriminated unions and tuples), No dependency cycles, The ""piping"" idiom, Type inference, Type providers",Quotations,"F# books, F# bloggers, Links mentioned in F# Weekly, Answers to Stack Overflow questions, fsharpforfunandprofit.org",I'm willing to learn advanced concepts but only if they are relevant and practical,"More material with short ""cookbook"" style information, More material with real-world examples and war stories",,Not applicable. None of my F# code is used by other people,Utilities and tools,SQL databases,Windows,It's used unofficially,"Domain modelling: making illegal states unrepresentable, More productive with fewer developers, Faster time to market","Training: They are worried about getting non-F# developers up to speed, Fad: They have concerns over long term language viability",,"Installation process, Not enough real-world code to learn from","Not being part of the core .NET distribution, Lack of good wrappers for non-F# libraries, Working with C#-centric tooling","Javascript, LLVM","Paucity of ""out-of-the-box"" solutions. With C# you have tons of templates and examples for every kind of project you can think of, be it desktop, web or mobile. Many will even include a ""standard"" implementation of persistence, authentication, etc.

With F# you're lucky if you have a ""Hello world!"" template from 2014 that barely compiles. And forget about, say, a working Identity implementation.",,,"In-person: In-depth trainings (2 or 3 days), Books or longer articles explaining full context, Reference works or documentation with API listings or short tutorials","FSharp.Data.SqlClient
F# Interactive
WebSharper
CSV type provider
Paket
",
15/04/2016 16:31:57,5-10 years,Enterprise development,"Yes, I enjoy computer science and mathematics",Experienced,"C#, Elixir, F#, Typescript",3-4 years,,I use it at work or for other commercial uses,Windows,"Visual Studio 2015 or newer, Emacs","Twitter, F# Weekly, F# bloggers","Better domain modelling with records and unions, Conciseness of code (I can see more at a glance), Correctness (no nulls, it works first time)","Agents (MailboxProcessor), Algebraic types (inc discriminated unions and tuples), Computation expressions, Immutability by default, Interactive development","Active Patterns, Quotations, Static type constraints, Type providers",F# books,I'm willing to learn advanced concepts but only if they are relevant and practical,"More material with short ""cookbook"" style information, More material with real-world examples and war stories",,Internal enterprise projects,"Utilities and tools, Algorithm-heavy business applications (non-financial), Custom development/specialist markets, Mainstream business & enterprise applications","SQL databases, NoSQL database, Event sourcing","Windows, Linux",It's officially endorsed in my team for critical/production areas,"Domain modelling: making illegal states unrepresentable, Correctness: fewer bugs and less rework, Easy concurrency with async and agents, Better for solving complex problems","No perceived benefits: They don't understand what benefits F# has over C# or other languages, Hiring: They worry about not being able to find F# developers, Money: They worry that good F# developers will cost too much, Training: They are worried about getting non-F# developers up to speed, No buy-in: There is lack of acceptance from other teams",,Unpleasant interactions with the community,"Not being part of the core .NET distribution, Working with C#-centric tooling",None -- I'm happy with the CLR/Mono,,,,Books or longer articles explaining full context,,
15/04/2016 16:32:01,10 or more years,Commercial software/web development,"Yes, I enjoy computer science and mathematics",Experienced,"C#, C++, Python",I was using F# but have stopped,Lack tooling compared with C#. I work with a large C# and C++ codebase. Hard to make a case to train many developers and switch ,Just tinkering,"Windows, Mac","Visual Studio 2015 or newer, MonoDevelop",,"Better domain modelling with records and unions, Conciseness of code (I can see more at a glance), Correctness (no nulls, it works first time)","Algebraic types (inc discriminated unions and tuples), Easy integration with other .NET libraries, Immutability by default",,,I'm willing to learn advanced concepts but only if they are relevant and practical,,,Not applicable. None of my F# code is used by other people,None - Just playing around,Not doing data centric apps,,I don't use F# at work,,"No perceived benefits: They don't understand what benefits F# has over C# or other languages, Hiring: They worry about not being able to find F# developers, No buy-in: There is lack of acceptance from other teams",,,"Less sophisticated tools for refactoring, etc.",,Lack of Resharper :),,,,,
15/04/2016 16:33:52,5-10 years,Enterprise development,"No, I don't know much theory",Intermediate,"C#, F#",Less than a year,,I use it at work or for other commercial uses,Windows,Visual Studio 2015 or newer,"HN, Reddit and other programming news sites","Better domain modelling with records and unions, Conciseness of code (I can see more at a glance), Correctness (no nulls, it works first time), Having fun again, Learning functional programming in general","Easy integration with other .NET libraries, Immutability by default, Simple ""one liner"" type definitions for records and DUs, The ""piping"" idiom, Type inference, Type providers","Active Patterns, Computation expressions, Quotations",F# bloggers,I'm willing to learn advanced concepts but only if they are relevant and practical,"More material with in-depth tutorials, More material with short ""cookbook"" style information, More material with real-world examples and war stories",,"Internal enterprise projects, Commercial products","Custom development/specialist markets, Mainstream business & enterprise applications, Other",SQL databases,Windows,It's officially endorsed in my team for critical/production areas,Correctness: fewer bugs and less rework,Nothing. Everyone loves it.,,Not enough real-world code to learn from,"Lack of F# friendly libraries, Working with C#-centric tooling, Less sophisticated tools for refactoring, etc.",None -- I'm happy with the CLR/Mono,Weird OOP syntax rules,,,Books or longer articles explaining full context,,
15/04/2016 16:34:31,5-10 years,Consulting,"No, I don't know much theory",Beginner,C#,Less than a year,,I use it at work or for other commercial uses,"Windows, Mac","Visual Studio 2015 or newer, Xamarin",F# bloggers,,,,"F# books, F# bloggers, Answers to Stack Overflow questions, Personal mentoring, Videos (e.g. Community for F#)",I want to learn functional programming but I don't like academic jargon,"More material with in-depth tutorials, More material with short ""cookbook"" style information, More material with real-world examples and war stories, More short ""live coding"" videos, More material that isn't heavy on having a ComSci, math, statistics, or other academic background","I don't know, I'm currently having alot of trouble.  I wish everyone that has their hand up as ""We support F#"" would offer some real-world examples and support for using F# with their products (mainly Xamarin)",Commercial products,"Custom development/specialist markets, Mobile apps",,iOS,It's officially endorsed in my team for critical/production areas,"Correctness: fewer bugs and less rework, Faster time to market",Nothing. Everyone loves it.,,"Lack of good tutorials/documentation, I can't use my knowledge from C# or other imperative languages, Don't understand the compiler errors, Not enough real-world code to learn from","Lack of F# friendly libraries, Lack of good wrappers for non-F# libraries, Working with C#-centric tooling, Less sophisticated tools for refactoring, etc., Difficulty in troubleshooting problems",,"The training materials, presentations, and videos are all very Computer Science or academic heavy. 95% of my work is forms over data and CRUD against a database or webapi, and I have yet to see either a beginner ""hello world"" or an intermediate best-practices resource on how to build such systems.  ",,,"In-person: In-depth trainings (2 or 3 days), In-person: Shorter workshops focused on a specific topic (1 day), In-person: A talks at user groups, In-person: Attending a talks as part of a conference, Books or longer articles explaining full context, Reference works or documentation with API listings or short tutorials, Practical and lengthy tutorials for implementing ""everyday"" systems",,
15/04/2016 16:34:33,2-5 years,Commercial software/web development,"Yes, I enjoy computer science and mathematics",Learner,"C#, Ruby, ActionScript (for a legacy project)",Less than a year,,Just tinkering,"Windows, Mac","Visual Studio 2015 or newer, Xamarin, MonoDevelop, Atom (with Ionide)",Twitter,"Conciseness of code (I can see more at a glance), Having fun again, Learning functional programming in general","Immutability by default, Type inference, Type providers","Agents (MailboxProcessor), Integration with non-F# libraries","F# bloggers, Reading F# code written by experts",I like theory -- I'm not afraid of monads and other abstractions,"More material with in-depth tutorials, More material with short ""cookbook"" style information, More material with real-world examples and war stories, More short ""live coding"" videos, More podcasts and other audio-only material, More interactive tutorials (e.g. like the F# Koans)",Accessible examples of F# solving general programming tasks. A super simple example of a web service or something like that. Perhaps one that looks at some data processing using various different databases etc.,Not applicable. None of my F# code is used by other people,None - Just playing around,"SQL databases, NoSQL database","Windows, Mac",It's used unofficially,Domain modelling: making illegal states unrepresentable,No perceived benefits: They don't understand what benefits F# has over C# or other languages,"It's not generally targeted at what we do. We're mostly very visual apps, but making the tools friendly and easy to pick up would be great.","Lack of good tutorials/documentation, Installation process, Don't understand the compiler errors, Not enough real-world code to learn from",Difficulty in troubleshooting problems,"JVM, LLVM, Native",Lack of libraries and centralised hub. I'm still not really sure where to go for F# details or even the latest builds. It feels like it's microsofty but I know it's not.,,,"Books or longer articles explaining full context, Reference works or documentation with API listings or short tutorials, Recorded talks from a conference or user group",FAKE is really cool and I've been using it a lot for many different projects. I've not done a huge amount with F# yet as it's my first functional language so I'm still trying to figure out what to do with it.,
15/04/2016 16:35:05,10 or more years,Financial services or similar,"No, I don't know much theory",Learner,"C#, Javascript, Python",I was using F# but have stopped,"My team mates know only C# so I haven't been able to use F# for ""serious"" projects.",I use it for hobby or side projects,"Windows, Mac","Visual Studio 2012 or 2013, Sublime Text",F# bloggers,"Better domain modelling with records and unions, Correctness (no nulls, it works first time), Having fun again, Learning functional programming in general","Algebraic types (inc discriminated unions and tuples), Easy integration with other .NET libraries, Immutability by default, Type inference","Agents (MailboxProcessor), Async workflows, Computation expressions, Integration with non-F# libraries, Type providers, Units of measure","F# bloggers, Answers to Stack Overflow questions",I like theory -- I'm not afraid of monads and other abstractions,"More material with in-depth tutorials, More material with real-world examples and war stories",Real world examples that use advanced language features.,Not applicable. None of my F# code is used by other people,"Utilities and tools, Text analysis/language parsing",Not doing data centric apps,"Windows, Mac",I don't use F# at work,,"Hiring: They worry about not being able to find F# developers, No buy-in: There is lack of acceptance from other teams",,Not enough real-world code to learn from,"Not being part of the core .NET distribution, Less sophisticated tools for refactoring, etc.",None -- I'm happy with the CLR/Mono,"Tooling support (refactoring, code analysis, etc) is not as mature as languages like Java and C#",,,"Books or longer articles explaining full context, In-depth online courses (e.g. Pluralsight)",The available unit testing frameworks and libraries.,
15/04/2016 16:36:08,5-10 years,Enterprise development,"No, I don't know much theory",Learner,C#,Less than a year,,Just tinkering,Windows,"Visual Studio 2015 or newer, Visual Studio 2012 or 2013, Vim","Twitter, F# Weekly, HN, Reddit and other programming news sites","Having fun again, Learning functional programming in general","Algebraic types (inc discriminated unions and tuples), Computation expressions, Immutability by default, Interactive development, printf that is type checked, The ""piping"" idiom, Type inference","Active Patterns, Agents (MailboxProcessor), Async workflows, Object expressions, Object-oriented compatibility, Quotations, Units of measure","MSDN, F# bloggers, Links mentioned in F# Weekly, Answers to Stack Overflow questions, Reading F# code written by experts, fsharpforfunandprofit",I'm willing to learn advanced concepts but only if they are relevant and practical,"More material with in-depth tutorials, More material with real-world examples and war stories, More short ""live coding"" videos, More podcasts and other audio-only material","It's pretty easy right now. Tons of great resources. I suppose for someone not familiar with the more advanced abstract and foreign concepts (compared to C languages) such as computation expressions (monads) and type providers, there could be more clear real world resources...maybe not though...still learning.

One thing that many people seem to like are very well thought out _short_ video series. I'm thinking something similar to elixirsips.com or that other one for clojure...","Open source projects, Not applicable. None of my F# code is used by other people","Non-commercial web site/app, Other",Not doing data centric apps,,"unofficial, FAKE ;)",,,,Don't understand the compiler errors,,,,,,"Books or longer articles explaining full context, Reference works or documentation with API listings or short tutorials, Recorded talks from a conference or user group","fsi
VS fsharp tools",
15/04/2016 16:36:46,5-10 years,Enterprise development,"Yes, I enjoy computer science and mathematics",Learner,"C#, C++, Javascript, Typescript",Haven't really used it yet,,Just tinkering,Windows,Visual Studio 2015 or newer,"HN, Reddit and other programming news sites",Learning functional programming in general,Immutability by default,,"MSDN, Links and instructions from fsharp.org, Answers to Stack Overflow questions",I want to learn functional programming but I don't like academic jargon,"More material with short ""cookbook"" style information, More interactive tutorials (e.g. like the F# Koans)",,Not applicable. None of my F# code is used by other people,None - Just playing around,Not doing data centric apps,Windows,I don't use F# at work,,"No perceived benefits: They don't understand what benefits F# has over C# or other languages, Training: They are worried about getting non-F# developers up to speed",,"Lack of good tutorials/documentation, I can't use my knowledge from C# or other imperative languages",Not being part of the core .NET distribution,"Javascript, LLVM, Native",,,,"Books or longer articles explaining full context, Reference works or documentation with API listings or short tutorials, In-depth online courses (e.g. Pluralsight)",,
15/04/2016 16:37:42,10 or more years,Commercial software/web development,"No, I don't know much theory",Intermediate,"C#, Javascript",Less than a year,,Just tinkering,Windows,"Visual Studio 2015 or newer, VS Code (with Ionide)",Twitter,"Correctness (no nulls, it works first time), Learning functional programming in general","Algebraic types (inc discriminated unions and tuples), Immutability by default, Interactive development, The ""piping"" idiom, Type inference, Type providers",Agents (MailboxProcessor),"Links and instructions from fsharp.org, Videos (e.g. Community for F#)",I like theory -- I'm not afraid of monads and other abstractions,"More material with real-world examples and war stories, More interactive tutorials (e.g. like the F# Koans)",,,,,,I don't use F# at work,,"No perceived benefits: They don't understand what benefits F# has over C# or other languages, Hiring: They worry about not being able to find F# developers, Money: They worry that good F# developers will cost too much, Training: They are worried about getting non-F# developers up to speed",,"Lack of good tutorials/documentation, Not enough real-world code to learn from",Working with C#-centric tooling,,"I'm very impressed with the F# community.  My only feedback is to re-built the online interactive tutorial here:  http://www.tryfsharp.org/Learn/getting-started

It's very nice, but a little old(?), and not well-designed in terms of instruction, IMO.  I think a re-imagined interactive ""official"" tutorial series which caters to a larger, less-experienced developer audience, would do a lot of good.",,,"In-person: In-depth trainings (2 or 3 days), Books or longer articles explaining full context, Reference works or documentation with API listings or short tutorials, In-depth online courses (e.g. Pluralsight)",,
15/04/2016 16:38:31,10 or more years,"Academic, research, or related","Yes, I enjoy computer science and mathematics",Learner,"C#, C++, MATLAB",Haven't really used it yet,,Just tinkering,Windows,"Visual Studio 2015 or newer, VS Code (with Ionide)","Twitter, HN, Reddit and other programming news sites",Learning functional programming in general,,,"MSDN, Links and instructions from fsharp.org, Answers to Stack Overflow questions, Reading F# code written by experts",I like theory -- I'm not afraid of monads and other abstractions,,,Not applicable. None of my F# code is used by other people,None - Just playing around,Not doing data centric apps,Windows,I don't use F# at work,,,,Not enough real-world code to learn from,,None -- I'm happy with the CLR/Mono,,,,"Books or longer articles explaining full context, Reference works or documentation with API listings or short tutorials, Recorded talks from a conference or user group",,
15/04/2016 16:41:17,10 or more years,design and engineering,"Yes, I enjoy computer science and mathematics",Experienced,"Python, Scheme/CL",Less than a year,,Just tinkering,Windows,Sublime Text,"HN, Reddit and other programming news sites","Correctness (no nulls, it works first time)","Easy integration with other .NET libraries, No dependency cycles",,Links and instructions from fsharp.org,I like theory -- I'm not afraid of monads and other abstractions,More material with in-depth tutorials,,Not applicable. None of my F# code is used by other people,,Not doing data centric apps,,It's used unofficially,,,,,,None -- I'm happy with the CLR/Mono,,,,"Books or longer articles explaining full context, Reference works or documentation with API listings or short tutorials",,
15/04/2016 16:41:38,10 or more years,Commercial software/web development,"Yes, I enjoy computer science and mathematics",Intermediate,"C#, Javascript",Less than a year,,I use it for hobby or side projects,Windows,"Visual Studio 2015 or newer, VS Code (with Ionide)","F# Weekly, HN, Reddit and other programming news sites, F# bloggers","Conciseness of code (I can see more at a glance), Correctness (no nulls, it works first time), Having fun again, Learning functional programming in general","Algebraic types (inc discriminated unions and tuples), Immutability by default, Interactive development, Simple ""one liner"" type definitions for records and DUs, The ""piping"" idiom, Type inference","Agents (MailboxProcessor), Async workflows","Links and instructions from fsharp.org, F# bloggers, Links mentioned in F# Weekly, Videos (e.g. Community for F#), Reading F# code written by experts",I like theory -- I'm not afraid of monads and other abstractions,"More material with in-depth tutorials, More material with short ""cookbook"" style information, More material with real-world examples and war stories, More short ""live coding"" videos",,,,,,I don't use F# at work,,,,,,,,,,Reference works or documentation with API listings or short tutorials,,
15/04/2016 16:51:15,10 or more years,Enterprise development,"No, I don't know much theory",Intermediate,"Clojure, Ruby",Haven't really used it yet,Lack of time. I wanted to use it instead of C# on an algo trading platform. ,Just tinkering,Windows,Visual Studio 2012 or 2013,,"Conciseness of code (I can see more at a glance), Correctness (no nulls, it works first time)",,,"Links and instructions from fsharp.org, F# books",I'm willing to learn advanced concepts but only if they are relevant and practical,,,Not applicable. None of my F# code is used by other people,Financial services,Read-only data sources such as feeds,Windows,I don't use F# at work,,"Too Windows-centric: They have concerns over cross-platform issues, Too Microsoft-centric: They think it is too closely linked to Microsoft, Clojure is better fit in a Java environment",,,,"JVM, Native",,,,Books or longer articles explaining full context,,
15/04/2016 16:46:14,10 or more years,Commercial software/web development,"No, I don't know much theory",Beginner,"C#, C++, Swift, Typescript",Haven't really used it yet,,,,,"HN, Reddit and other programming news sites",,,,,I want to learn functional programming but I don't like academic jargon,"More material with short ""cookbook"" style information",,Not applicable. None of my F# code is used by other people,None - Just playing around,,,I don't use F# at work,,,,,,,,,,"Books or longer articles explaining full context, Reference works or documentation with API listings or short tutorials",,
15/04/2016 16:46:14,5-10 years,Commercial software/web development,"Yes, I enjoy computer science and mathematics",Intermediate,"C#, F#",1-2 years,,I use it at work or for other commercial uses,Windows,Visual Studio 2012 or 2013,"F# Weekly, HN, Reddit and other programming news sites, F# bloggers","Better domain modelling with records and unions, Conciseness of code (I can see more at a glance), Correctness (no nulls, it works first time), Learning functional programming in general","Algebraic types (inc discriminated unions and tuples), Async workflows, Computation expressions, Easy integration with other .NET libraries, Immutability by default, Interactive development, The ""piping"" idiom, Type inference","Active Patterns, Agents (MailboxProcessor), Quotations, Units of measure","MSDN, F# books, F# bloggers, Links mentioned in F# Weekly, Answers to Stack Overflow questions, Personal mentoring",I'm willing to learn advanced concepts but only if they are relevant and practical,"More material with in-depth tutorials, More material with short ""cookbook"" style information, More interactive tutorials (e.g. like the F# Koans)",,"Internal enterprise projects, Commercial products","Utilities and tools, Algorithm-heavy business applications (non-financial), Machine learning, Commercial web site/app","SQL databases, NoSQL database, Event sourcing","Windows, Azure",It's officially endorsed in my team for critical/production areas,"Domain modelling: making illegal states unrepresentable, Correctness: fewer bugs and less rework, More productive with fewer developers, Faster time to market, Efficiency/Performance, Easy concurrency with async and agents, Better for solving complex problems",Nothing. Everyone loves it.,,"Resharper-like tools would be helpful, powertools is so heavy.","Less sophisticated tools for refactoring, etc., Difficulty in troubleshooting problems",,Visual Studio templates.  Make it super easy for beginners to set up a website in F#.,,,"Books or longer articles explaining full context, Reference works or documentation with API listings or short tutorials, In-depth online courses (e.g. Pluralsight)","fake
F# Outlining",
15/04/2016 16:46:25,10 or more years,Commercial software/web development,"Yes, I enjoy computer science and mathematics",Learner,"C#, Javascript",Less than two months,,Just tinkering,Linux,"MonoDevelop, VS Code (with Ionide)","Twitter, F# Weekly, Google groups, HN, Reddit and other programming news sites","Better domain modelling with records and unions, Correctness (no nulls, it works first time), Learning functional programming in general","Algebraic types (inc discriminated unions and tuples), Computation expressions, printf that is type checked, Simple ""one liner"" type definitions for records and DUs, Type providers, Units of measure",,"Links and instructions from fsharp.org, F# books, F# bloggers",I like theory -- I'm not afraid of monads and other abstractions,,,Not applicable. None of my F# code is used by other people,,,,I don't use F# at work,,,,,,,,,,,,
15/04/2016 16:46:54,10 or more years,Commercial software/web development,"Yes, I enjoy computer science and mathematics",Experienced,F#,4 or more years,,I use it at work or for other commercial uses,Windows,"Visual Studio 2015 or newer, Visual Studio 2012 or 2013",F# bloggers,"Better domain modelling with records and unions, Conciseness of code (I can see more at a glance), Correctness (no nulls, it works first time), Having fun again, Learning functional programming in general","Active Patterns, Algebraic types (inc discriminated unions and tuples), Computation expressions, Easy integration with other .NET libraries, Immutability by default, No dependency cycles, The ""piping"" idiom, Type inference","Interactive development, Quotations, Type providers, Units of measure","MSDN, F# books, F# bloggers, Answers to Stack Overflow questions, Personal mentoring",I like theory -- I'm not afraid of monads and other abstractions,"More material with in-depth tutorials, More material with short ""cookbook"" style information",,Commercial products,"Utilities and tools, Algorithm-heavy business applications (non-financial), Custom development/specialist markets, Machine learning, Mainstream business & enterprise applications, Data analysis/statistics, Text analysis/language parsing","SQL databases, NoSQL database","Windows, Azure, Amazon Web services",It's officially endorsed in my team for critical/production areas,"More productive with fewer developers, Better for solving complex problems",Nothing. Everyone loves it.,,,Working with C#-centric tooling,None -- I'm happy with the CLR/Mono,,,,"Books or longer articles explaining full context, Reference works or documentation with API listings or short tutorials, Recorded talks from a conference or user group",,
15/04/2016 16:47:01,10 or more years,Commercial software/web development,"Yes, I enjoy computer science and mathematics",Intermediate,"C#, Javascript, Swift",Less than a year,Lack of IDE support. Difficult to maintain the existing codebase.,I use it for hobby or side projects,Windows,Visual Studio 2015 or newer,"HN, Reddit and other programming news sites","Better domain modelling with records and unions, Speed of development","Immutability by default, The ""piping"" idiom, Type inference, Units of measure",,"F# books, Answers to Stack Overflow questions",I'm willing to learn advanced concepts but only if they are relevant and practical,More material with real-world examples and war stories,,Not applicable. None of my F# code is used by other people,"Algorithm-heavy business applications (non-financial), Other",Not doing data centric apps,Windows,I don't use F# at work,,"Hiring: They worry about not being able to find F# developers, lack of IDE support. not possible to work with unit tests and debug efficiently",,,"Less sophisticated tools for refactoring, etc., Difficulty in troubleshooting problems",None -- I'm happy with the CLR/Mono,,,,"In-person: A talks at user groups, In-person: Attending a talks as part of a conference",,
15/04/2016 16:48:17,5-10 years,Game development,"No, I don't know much theory",Intermediate,"C#, Python",Less than a year,"Still use at home for hobby projects, can't use at work as the rest of our .net codebase is in c# and nobody wants to support a multilanguage base.
",I use it for hobby or side projects,Windows,Visual Studio 2015 or newer,F# Weekly,"Conciseness of code (I can see more at a glance), Learning functional programming in general, Type providers","Easy integration with other .NET libraries, No dependency cycles, The ""piping"" idiom, Type inference",,"F# books, F# bloggers, Answers to Stack Overflow questions",I'm willing to learn advanced concepts but only if they are relevant and practical,"More material with in-depth tutorials, More material with short ""cookbook"" style information",,Not applicable. None of my F# code is used by other people,"Utilities and tools, Games",Not doing data centric apps,Windows,I don't use F# at work,...,No buy-in: There is lack of acceptance from other teams,"Probably nothing, its a cultural thing.",Installation process,Not being part of the core .NET distribution,Native,"Installation and setup issues.
It works great in visual studio, but any other editor's I've attempted to use have been pretty awful.
",,,"Books or longer articles explaining full context, Reference works or documentation with API listings or short tutorials","Visual studio
FSharp power tools
FAKE
",
15/04/2016 16:51:42,10 or more years,Commercial software/web development,"No, I don't know much theory",Learner,"C, C#, Elixir, Ruby",Less than a year,,I use it for hobby or side projects,"Windows, Mac","Visual Studio 2015 or newer, Xamarin","Twitter, HN, Reddit and other programming news sites","Correctness (no nulls, it works first time), Learning functional programming in general","Active Patterns, Algebraic types (inc discriminated unions and tuples), Immutability by default","Agents (MailboxProcessor), Computation expressions, Quotations, Type providers, Units of measure","Links and instructions from fsharp.org, F# books, F# bloggers, Links posted on social media such as Twitter, Reading F# code written by experts",I'm willing to learn advanced concepts but only if they are relevant and practical,"More material with in-depth tutorials, More material with short ""cookbook"" style information",,Internal enterprise projects,"Utilities and tools, Mobile apps",Not doing data centric apps,"iOS, Android",It's used unofficially,Correctness: fewer bugs and less rework,No buy-in: There is lack of acceptance from other teams,,"Unpleasant interactions with the community, Not enough real-world code to learn from","Not being part of the core .NET distribution, Lack of F# friendly libraries, Less sophisticated tools for refactoring, etc.",None -- I'm happy with the CLR/Mono,,,,"Books or longer articles explaining full context, Reference works or documentation with API listings or short tutorials, Recorded talks from a conference or user group, In-depth online courses (e.g. Pluralsight)",,
15/04/2016 16:52:16,10 or more years,Data or analytics related,"Yes, I enjoy computer science and mathematics",Learner,"Javascript, Python",Less than two months,,Just tinkering,"Windows, Mac, Linux","Visual Studio 2015 or newer, SharpDevelop, Sublime Text","HN, Reddit and other programming news sites","Better domain modelling with records and unions, Conciseness of code (I can see more at a glance), Correctness (no nulls, it works first time), Having fun again, Learning functional programming in general","Active Patterns, Algebraic types (inc discriminated unions and tuples), Async workflows, Easy integration with other .NET libraries, Immutability by default, Interactive development, No dependency cycles, Type inference",,"MSDN, Links and instructions from fsharp.org, F# bloggers, Answers to Stack Overflow questions",I'm willing to learn advanced concepts but only if they are relevant and practical,"More material with in-depth tutorials, More material with short ""cookbook"" style information, More material with real-world examples and war stories, More short ""live coding"" videos",,Not applicable. None of my F# code is used by other people,"None - Just playing around, Utilities and tools, Games, Mainstream business & enterprise applications, Commercial web site/app, Non-commercial web site/app","SQL databases, NoSQL database","Windows, Mac, Linux",It's used unofficially,"Domain modelling: making illegal states unrepresentable, Correctness: fewer bugs and less rework, Efficiency/Performance",Hiring: They worry about not being able to find F# developers,,"Lack of good tutorials/documentation, I can't use my knowledge from C# or other imperative languages, Not enough real-world code to learn from",,"Javascript, LLVM",,,Answered some comments from the perspective of where I want to go with F# instead of my current use of it.,"In-person: A talks at user groups, Books or longer articles explaining full context, Reference works or documentation with API listings or short tutorials, Recorded talks from a conference or user group",,
15/04/2016 16:55:10,2-5 years,Commercial software/web development,"No, I don't know much theory",Experienced,"C, C#, C++, Go, Javascript, Typescript",Less than a year,,I use it for hobby or side projects,"Windows, Mac","Visual Studio 2015 or newer, VS Code (with Ionide)","Twitter, HN, Reddit and other programming news sites",Learning functional programming in general,"Active Patterns, Async workflows, Easy integration with other .NET libraries, Immutability by default, Object-oriented features (inc. C# compatibility, conciseness), Simple ""one liner"" type definitions for records and DUs, The ""piping"" idiom, Type inference, Type providers",Units of measure,"F# bloggers, Links posted on social media such as Twitter, Reading F# code written by experts",I'm willing to learn advanced concepts but only if they are relevant and practical,"More short ""live coding"" videos, More interactive tutorials (e.g. like the F# Koans)",,"Internal enterprise projects, Open source projects","Utilities and tools, Algorithm-heavy business applications (non-financial), Non-commercial web site/app, Other","SQL databases, Event sourcing","Windows, Mac, Azure, Amazon Web services",It's used unofficially,"Domain modelling: making illegal states unrepresentable, Efficiency/Performance, Easy concurrency with async and agents","Hiring: They worry about not being able to find F# developers, Money: They worry that good F# developers will cost too much, Training: They are worried about getting non-F# developers up to speed, Fad: They have concerns over long term language viability, Too Windows-centric: They have concerns over cross-platform issues, Too Microsoft-centric: They think it is too closely linked to Microsoft, No buy-in: There is lack of acceptance from other teams",,"Lack of good tutorials/documentation, Not enough real-world code to learn from","Not being part of the core .NET distribution, Less sophisticated tools for refactoring, etc.","Javascript, LLVM",,,,"Reference works or documentation with API listings or short tutorials, Recorded talks from a conference or user group",,
15/04/2016 16:56:27,10 or more years,Enterprise development,"Yes, I enjoy computer science and mathematics",Experienced,C#,1-2 years,,I use it for hobby or side projects,"Windows, Mac","Visual Studio 2015 or newer, Visual Studio 2012 or 2013, Xamarin","Twitter, F# Weekly","Better domain modelling with records and unions, Conciseness of code (I can see more at a glance), Correctness (no nulls, it works first time), Great community, Having fun again, Learning functional programming in general","Algebraic types (inc discriminated unions and tuples), Easy integration with other .NET libraries, Immutability by default, Interactive development, No dependency cycles, The ""piping"" idiom, Type inference","Agents (MailboxProcessor), Async workflows, Computation expressions, Quotations, Units of measure","MSDN, Links and instructions from fsharp.org, F# books, F# bloggers, Links posted on social media such as Twitter",I like theory -- I'm not afraid of monads and other abstractions,More material with real-world examples and war stories,,"Internal enterprise projects, Open source projects","Utilities and tools, Mainstream business & enterprise applications, Non-commercial web site/app","SQL databases, NoSQL database, Event sourcing","Windows, Azure",It's used unofficially,"Domain modelling: making illegal states unrepresentable, Correctness: fewer bugs and less rework, Faster time to market","No perceived benefits: They don't understand what benefits F# has over C# or other languages, Hiring: They worry about not being able to find F# developers, Training: They are worried about getting non-F# developers up to speed",Tooling x 100000,Uneven learning curve,"Lack of F# friendly libraries, Less sophisticated tools for refactoring, etc., Push-back from co-workers ","None -- I'm happy with the CLR/Mono, LLVM, Web assembly","Tooling, AND the continual lack of full-throated support for F# in Redmond up to and including staffing PMs and developer staff sufficient to handle the GitHub load AND push new internal-first features.",,@brodyberg,Books or longer articles explaining full context,Power tools,
15/04/2016 16:56:35,5-10 years,Student,"Yes, I enjoy computer science and mathematics",Intermediate,"C#, Haskell, PHP, Python, Ruby",Less than a year,,Just tinkering,"Windows, Linux",Vim,"Twitter, HN, Reddit and other programming news sites","Having fun again, Learning functional programming in general, Speed of development, Functional but can be tweaked to get high performance","Algebraic types (inc discriminated unions and tuples), Easy integration with other .NET libraries, Immutability by default, printf that is type checked, The ""piping"" idiom, Type inference, Units of measure","Agents (MailboxProcessor), Object expressions, Object-oriented compatibility","MSDN, Answers to Stack Overflow questions",I like theory -- I'm not afraid of monads and other abstractions,"More material with in-depth tutorials, More material with short ""cookbook"" style information, More material with real-world examples and war stories, More short ""live coding"" videos, More podcasts and other audio-only material, More interactive tutorials (e.g. like the F# Koans)",,Not applicable. None of my F# code is used by other people,"None - Just playing around, Utilities and tools, Non-commercial web site/app, Data analysis/statistics",SQL databases,"Windows, Linux",I don't use F# at work,,,,"Lack of good tutorials/documentation, Installation process, Don't understand the compiler errors, Not enough real-world code to learn from","Less sophisticated tools for refactoring, etc., Difficulty in troubleshooting problems, Performance issues, Cross-platform issues","LLVM, Native",,,,"In-person: In-depth trainings (2 or 3 days), Books or longer articles explaining full context, Reference works or documentation with API listings or short tutorials","Charting
Suave.io
Vim",
15/04/2016 16:56:47,10 or more years,Commercial software/web development,"No, I don't know much theory",Intermediate,"C#, F#, Javascript, Typescript",1-2 years,,I use it at work or for other commercial uses,Windows,"Visual Studio 2015 or newer, VS Code (with Ionide)","F# Weekly, HN, Reddit and other programming news sites, F# bloggers","Better domain modelling with records and unions, Conciseness of code (I can see more at a glance), Correctness (no nulls, it works first time), Great community, Having fun again, Learning functional programming in general, Speed of development","Algebraic types (inc discriminated unions and tuples), Async workflows, Immutability by default, No dependency cycles, Simple ""one liner"" type definitions for records and DUs, The ""piping"" idiom, Type inference","Agents (MailboxProcessor), Computation expressions, Integration with non-F# libraries, Object expressions, Object-oriented compatibility, Units of measure","F# bloggers, Links mentioned in F# Weekly, Videos (e.g. Community for F#)",I like theory -- I'm not afraid of monads and other abstractions,"More material with in-depth tutorials, More material with real-world examples and war stories, More short ""live coding"" videos, More interactive tutorials (e.g. like the F# Koans)",,Internal enterprise projects,"Utilities and tools, Mainstream business & enterprise applications, Data analysis/statistics","SQL databases, Event sourcing",Windows,It's officially endorsed in my team for non-critical/non-production code,"Domain modelling: making illegal states unrepresentable, Correctness: fewer bugs and less rework, Easy concurrency with async and agents, Better for solving complex problems","Training: They are worried about getting non-F# developers up to speed, No buy-in: There is lack of acceptance from other teams",,"I can't use my knowledge from C# or other imperative languages, Not enough real-world code to learn from","Lack of good wrappers for non-F# libraries, Difficulty in troubleshooting problems","Javascript, Native",,,,"Books or longer articles explaining full context, Recorded talks from a conference or user group, In-depth online courses (e.g. Pluralsight)","Paket
FAKE
Suave
Akka.Net
Fleece",
15/04/2016 16:57:12,5-10 years,Enterprise development,"Yes, I enjoy computer science and mathematics",Beginner,"C, C++, Java, Javascript, Python, Ruby, Swift, Visual Basic",Haven't really used it yet,,Just tinkering,,,,,,,,,,,,,,,,,,,,,,,,,,,
15/04/2016 16:57:48,10 or more years,Commercial software/web development,"Yes, I enjoy computer science and mathematics",Learner,"C, C#, C++, Python",Less than two months,,Just tinkering,"Windows, Mac, Linux","Visual Studio 2015 or newer, Emacs","HN, Reddit and other programming news sites",Learning functional programming in general,,,Links and instructions from fsharp.org,I'm willing to learn advanced concepts but only if they are relevant and practical,"More material with short ""cookbook"" style information, More material with real-world examples and war stories",,Commercial products,None - Just playing around,,"Windows, Mac, Linux",I don't use F# at work,,,,,,LLVM,,,,,,
15/04/2016 16:58:25,10 or more years,Enterprise development,"No, I don't know much theory",Intermediate,"C#, F#",1-2 years,,I use it at work or for other commercial uses,Windows,"Visual Studio 2015 or newer, VS Code (with Ionide)","F# Weekly, HN, Reddit and other programming news sites","Better domain modelling with records and unions, Conciseness of code (I can see more at a glance), Correctness (no nulls, it works first time), Having fun again, Learning functional programming in general, Speed of development","Active Patterns, Agents (MailboxProcessor), Algebraic types (inc discriminated unions and tuples), Async workflows, Easy integration with other .NET libraries, Immutability by default, printf that is type checked, Simple ""one liner"" type definitions for records and DUs, The ""piping"" idiom, Type inference","Quotations, Type providers, Units of measure","F# books, F# bloggers, Links mentioned in F# Weekly, Structured training/workshops, Reading F# code written by experts",I like theory -- I'm not afraid of monads and other abstractions,"More material with in-depth tutorials, More material with real-world examples and war stories",,"Internal enterprise projects, Commercial products","Utilities and tools, Algorithm-heavy business applications (non-financial), Custom development/specialist markets, Mainstream business & enterprise applications","SQL databases, NoSQL database, Event sourcing",Windows,It's officially endorsed in my team for critical/production areas,"Domain modelling: making illegal states unrepresentable, Correctness: fewer bugs and less rework, More productive with fewer developers, Faster time to market, Efficiency/Performance, Easy concurrency with async and agents, Better for solving complex problems",Nothing. Everyone loves it.,,,Not being part of the core .NET distribution,None -- I'm happy with the CLR/Mono,,,,"In-person: In-depth trainings (2 or 3 days), In-person: Attending a talks as part of a conference, Books or longer articles explaining full context, Recorded talks from a conference or user group",,
15/04/2016 16:58:25,10 or more years,Enterprise development,"Yes, I enjoy computer science and mathematics",Learner,"C#, Javascript, Typescript",Less than a year,,Just tinkering,Windows,"Visual Studio 2015 or newer, VS Code (with Ionide)","Twitter, HN, Reddit and other programming news sites, F# bloggers","Better domain modelling with records and unions, Conciseness of code (I can see more at a glance), Correctness (no nulls, it works first time), Learning functional programming in general, Functional but can be tweaked to get high performance","Active Patterns, Agents (MailboxProcessor), Algebraic types (inc discriminated unions and tuples), Async workflows, Computation expressions, Easy integration with other .NET libraries, Immutability by default, Object-oriented features (inc. C# compatibility, conciseness), Simple ""one liner"" type definitions for records and DUs, The ""piping"" idiom, Type inference, Type providers, Units of measure","Quotations, Units of measure","Links and instructions from fsharp.org, F# books, F# bloggers, Links posted on social media such as Twitter, Videos (e.g. Community for F#)",I like theory -- I'm not afraid of monads and other abstractions,"More material with in-depth tutorials, More material with short ""cookbook"" style information, More material with real-world examples and war stories",,Not applicable. None of my F# code is used by other people,"Mainstream business & enterprise applications, Non-commercial web site/app, Data analysis/statistics","SQL databases, Event sourcing",Windows,It's officially endorsed in my team for critical/production areas,"Domain modelling: making illegal states unrepresentable, Correctness: fewer bugs and less rework, Easy concurrency with async and agents, Better for solving complex problems","No perceived benefits: They don't understand what benefits F# has over C# or other languages, Nothing. Everyone loves it.",,"Lack of good tutorials/documentation, Not enough real-world code to learn from",,None -- I'm happy with the CLR/Mono,,,,"In-person: Attending a talks as part of a conference, Books or longer articles explaining full context, Recorded talks from a conference or user group, In-depth online courses (e.g. Pluralsight)",,
15/04/2016 17:02:10,10 or more years,Enterprise development,"Yes, I enjoy computer science and mathematics",Learner,"C#, Python, Visual Basic, SQL",Less than two months,"Too little time to practise and catch up with the language specifics. Hence, not really used it for long and serious projects.",Just tinkering,Windows,"Visual Studio 2015 or newer, Visual Studio 2012 or 2013, Notepad++, Geany",none,"Correctness (no nulls, it works first time), Learning functional programming in general","Easy integration with other .NET libraries, Object-oriented features (inc. C# compatibility, conciseness)","Active Patterns, Agents (MailboxProcessor)","MSDN, Answers to Stack Overflow questions, Personal mentoring",I like theory -- I'm not afraid of monads and other abstractions,"More material with in-depth tutorials, More material with short ""cookbook"" style information, More material with real-world examples and war stories",,Not applicable. None of my F# code is used by other people,None - Just playing around,Not doing data centric apps,Windows,I don't use F# at work,,"No perceived benefits: They don't understand what benefits F# has over C# or other languages, Training: They are worried about getting non-F# developers up to speed, No buy-in: There is lack of acceptance from other teams",,"Lack of good tutorials/documentation, Unpleasant interactions with the community, Not enough real-world code to learn from","Less sophisticated tools for refactoring, etc., Difficulty in troubleshooting problems, Cross-platform issues",Native,,,,"In-person: In-depth trainings (2 or 3 days), Books or longer articles explaining full context, Reference works or documentation with API listings or short tutorials, Recorded talks from a conference or user group, In-depth online courses (e.g. Pluralsight)",,
15/04/2016 17:03:41,10 or more years,Commercial software/web development,"Yes, I enjoy computer science and mathematics",Intermediate,C#,Less than two months,,Just tinkering,Windows,Visual Studio 2015 or newer,F# bloggers,Learning functional programming in general,"No dependency cycles, Object-oriented features (inc. C# compatibility, conciseness)",,"MSDN, F# bloggers",I like theory -- I'm not afraid of monads and other abstractions,"More material with in-depth tutorials, More material with short ""cookbook"" style information, More material with real-world examples and war stories, More short ""live coding"" videos",,Not applicable. None of my F# code is used by other people,None - Just playing around,"SQL databases, Event sourcing",Windows,It's used unofficially,"Correctness: fewer bugs and less rework, Easy concurrency with async and agents",Nothing. Everyone loves it.,,Lack of good tutorials/documentation,Our team's experience,None -- I'm happy with the CLR/Mono,,,,"Books or longer articles explaining full context, Reference works or documentation with API listings or short tutorials, Recorded talks from a conference or user group",,
15/04/2016 17:04:01,5-10 years,Commercial software/web development,"No, I don't know much theory",Intermediate,"C#, F#",1-2 years,,I use it at work or for other commercial uses,Windows,"Visual Studio 2015 or newer, Visual Studio 2012 or 2013","HN, Reddit and other programming news sites","Conciseness of code (I can see more at a glance), Correctness (no nulls, it works first time), Having fun again, Learning functional programming in general, Speed of development","Algebraic types (inc discriminated unions and tuples), The ""piping"" idiom, Type inference","Agents (MailboxProcessor), Object-oriented compatibility, Units of measure","F# bloggers, Answers to Stack Overflow questions",I'm willing to learn advanced concepts but only if they are relevant and practical,"More material with in-depth tutorials, More material with real-world examples and war stories",,Internal enterprise projects,"Algorithm-heavy business applications (non-financial), Commercial web site/app",SQL databases,Windows,It's officially endorsed in my team for critical/production areas,"Correctness: fewer bugs and less rework, More productive with fewer developers, Faster time to market",Training: They are worried about getting non-F# developers up to speed,,Not enough real-world code to learn from,"Less sophisticated tools for refactoring, etc.",,number of big companies using it,,,In-person: In-depth trainings (2 or 3 days),,
15/04/2016 17:06:28,10 or more years,Most of the above,"Yes, I enjoy computer science and mathematics",Expert,"C#, C++, F#, Javascript",4 or more years,,Most of the above,"Windows, Mac, Linux","Visual Studio 2015 or newer, Xamarin, MonoDevelop, Vim, VS Code (with Ionide)","HN, Reddit and other programming news sites, F# bloggers","Better domain modelling with records and unions, Conciseness of code (I can see more at a glance), Correctness (no nulls, it works first time), Great community, Having fun again, Speed of development, Functional but can be tweaked to get high performance","Active Patterns, Agents (MailboxProcessor), Algebraic types (inc discriminated unions and tuples), Async workflows, Computation expressions, Easy integration with other .NET libraries, Immutability by default, Interactive development, No dependency cycles, Object expressions, Object-oriented features (inc. C# compatibility, conciseness), printf that is type checked, Simple ""one liner"" type definitions for records and DUs, The ""piping"" idiom, Type inference, Type providers, Units of measure",Quotations,"F# books, F# bloggers, Reading F# code written by experts",I'm willing to learn advanced concepts but only if they are relevant and practical,"More material with in-depth tutorials, More material with short ""cookbook"" style information, More material with real-world examples and war stories",,"Internal enterprise projects, Commercial products, Open source projects","Utilities and tools, Custom development/specialist markets, Mainstream business & enterprise applications, Commercial web site/app","SQL databases, NoSQL database, Event sourcing","Windows, Linux, Azure",It's officially endorsed in my team for critical/production areas,"Domain modelling: making illegal states unrepresentable, Correctness: fewer bugs and less rework, More productive with fewer developers, Faster time to market, Efficiency/Performance, Easy concurrency with async and agents, Better for solving complex problems",Nothing. Everyone loves it.,,,"Less sophisticated tools for refactoring, etc., F# tooling is a bit behind compared to C#","LLVM, Native",Missing parameterized modules,,,"Books or longer articles explaining full context, Reference works or documentation with API listings or short tutorials, Recorded talks from a conference or user group","- FSharpData
- Fake
- FsCheck
- WebSharper
- FSharpCompilerServices",
15/04/2016 17:07:34,10 or more years,Commercial software/web development,"Yes, I enjoy computer science and mathematics",Experienced,"C#, F#, Javascript",1-2 years,,I use it for hobby or side projects,"Windows, Mac","Visual Studio 2015 or newer, Vim, Atom (with Ionide), VS Code (with Ionide)","F# Weekly, HN, Reddit and other programming news sites","Better domain modelling with records and unions, Conciseness of code (I can see more at a glance), Correctness (no nulls, it works first time), Speed of development","Algebraic types (inc discriminated unions and tuples), Computation expressions, Immutability by default, Interactive development, No dependency cycles, Simple ""one liner"" type definitions for records and DUs, The ""piping"" idiom, Type inference, Type providers","Active Patterns, Agents (MailboxProcessor), Async workflows, Integration with non-F# libraries, Quotations, Static type constraints, Units of measure","F# books, F# bloggers",I like theory -- I'm not afraid of monads and other abstractions,"More material with short ""cookbook"" style information, More material with real-world examples and war stories, More interactive tutorials (e.g. like the F# Koans)",,Not applicable. None of my F# code is used by other people,"Utilities and tools, Games, Text analysis/language parsing",Not doing data centric apps,"Windows, Mac",I don't use F# at work,,"Hiring: They worry about not being able to find F# developers, Fad: They have concerns over long term language viability, Too Microsoft-centric: They think it is too closely linked to Microsoft",,,"Working with C#-centric tooling, For a long time it was too tied to .NET framework and VS ","LLVM, Native",,,,Anything but videos please!,"FsCheck
FSharpx.Extras
Argv
FSharp.Configuration
FAKE",
15/04/2016 17:08:03,10 or more years,Data or analytics related,"No, I don't know much theory",Learner,"C#, Javascript",Haven't really used it yet,,Just tinkering,Windows,Visual Studio 2015 or newer,"Google+, HN, Reddit and other programming news sites","Conciseness of code (I can see more at a glance), Great community, Learning functional programming in general","Immutability by default, The ""piping"" idiom, Type inference","Active Patterns, Agents (MailboxProcessor)","Links and instructions from fsharp.org, F# books, F# bloggers",I want to learn functional programming but I don't like academic jargon,"More material with in-depth tutorials, More material with short ""cookbook"" style information, More interactive tutorials (e.g. like the F# Koans)",Web and apps - lots of focus on how to integrate f# into these easily without having to use a whole new framework.,Not applicable. None of my F# code is used by other people,Utilities and tools,SQL databases,Windows,I don't use F# at work,,"No perceived benefits: They don't understand what benefits F# has over C# or other languages, Training: They are worried about getting non-F# developers up to speed, No buy-in: There is lack of acceptance from other teams",It has to reach acceptance near-parity with C# before there will be much interest here unfortunately.,"Lack of good tutorials/documentation, Not enough real-world code to learn from",lack of full interoperability in the default MVC stack,None -- I'm happy with the CLR/Mono,"Web. There are a lot of efforts in F# to reinvent MVC, but what will it take to just use F# for models and controllers and views in the default MVC stack?",,"Really liking the bigger effort for having more F# coding dojos/katas and better real world examples. The more tutorials and examples that are out there the less frustrating it will be searching for something relevant to exactly the question/probably I have at the time. 

Also it might be worth trying to segment off some of the advanced theory concepts - how much about monads and category theory is it necessary to know to achieve huge results coming from an OO background? Not that much, so don't lead with theory, lead with practical, leave the theory as an exercise for the reader to lookup. ","In-person: A talks at user groups, Books or longer articles explaining full context, Reference works or documentation with API listings or short tutorials, In-depth online courses (e.g. Pluralsight)",,
15/04/2016 17:08:14,5-10 years,Financial services or similar,"Yes, I enjoy computer science and mathematics",Intermediate,"C#, Javascript",I was using F# but have stopped,"Used for academic reasons, have not had a chance to use it in production development",Just tinkering,Windows,Visual Studio 2015 or newer,"HN, Reddit and other programming news sites, F# bloggers","Conciseness of code (I can see more at a glance), Learning functional programming in general","Algebraic types (inc discriminated unions and tuples), Easy integration with other .NET libraries, Immutability by default, The ""piping"" idiom, Type inference",Quotations,"MSDN, F# bloggers, Answers to Stack Overflow questions",I'm willing to learn advanced concepts but only if they are relevant and practical,,,Not applicable. None of my F# code is used by other people,None - Just playing around,,,I don't use F# at work,,"No perceived benefits: They don't understand what benefits F# has over C# or other languages, Hiring: They worry about not being able to find F# developers, No buy-in: There is lack of acceptance from other teams",,,,,,,,Books or longer articles explaining full context,,
15/04/2016 17:10:15,10 or more years,Financial services or similar,"Yes, I enjoy computer science and mathematics",Intermediate,C#,1-2 years,,I use it for hobby or side projects,Mac,"Visual Studio 2015 or newer, Xamarin","HN, Reddit and other programming news sites, F# for fun or profit","Better domain modelling with records and unions, Conciseness of code (I can see more at a glance), Correctness (no nulls, it works first time), Having fun again, Learning functional programming in general","Active Patterns, Algebraic types (inc discriminated unions and tuples), Computation expressions, Easy integration with other .NET libraries, Immutability by default, No dependency cycles, Object expressions, Simple ""one liner"" type definitions for records and DUs, The ""piping"" idiom, Type inference, Units of measure","Agents (MailboxProcessor), Async workflows, Integration with non-F# libraries","MSDN, Links and instructions from fsharp.org, F# books, Answers to Stack Overflow questions",I'm willing to learn advanced concepts but only if they are relevant and practical,"More material with in-depth tutorials, More material with short ""cookbook"" style information, More material with real-world examples and war stories, More short ""live coding"" videos, More podcasts and other audio-only material",,Internal enterprise projects,"Utilities and tools, Algorithm-heavy business applications (non-financial), Financial services, Machine learning",,"Windows, Mac",It's used unofficially,"Domain modelling: making illegal states unrepresentable, Correctness: fewer bugs and less rework, More productive with fewer developers, Better for solving complex problems",,,"Lack of good tutorials/documentation, Installation process",,None -- I'm happy with the CLR/Mono,,,,"Books or longer articles explaining full context, Reference works or documentation with API listings or short tutorials, Recorded talks from a conference or user group, In-depth online courses (e.g. Pluralsight)",,
15/04/2016 17:11:31,10 or more years,"Academic, research, or related","Yes, I enjoy computer science and mathematics",Experienced,F#,1-2 years,,I use it for hobby or side projects,"Windows, Mac",Visual Studio 2015 or newer,Twitter,"Conciseness of code (I can see more at a glance), Correctness (no nulls, it works first time)","Agents (MailboxProcessor), Easy integration with other .NET libraries, Immutability by default, The ""piping"" idiom, Type inference, Type providers",Quotations,"the ""fsharp for fun and profit"" website",I like theory -- I'm not afraid of monads and other abstractions,More material with real-world examples and war stories,,Not applicable. None of my F# code is used by other people,"Utilities and tools, Commercial web site/app, Research/Teaching, Text analysis/language parsing",SQL databases,Azure,Every team chooses their own language. I am the only one using F#,"Correctness: fewer bugs and less rework, More productive with fewer developers, Faster time to market, Easy concurrency with async and agents","No perceived benefits: They don't understand what benefits F# has over C# or other languages, They are worried that functional languages are complex and can't be performant.",,Don't understand the compiler errors,,None -- I'm happy with the CLR/Mono,,,,,,
15/04/2016 17:11:31,5-10 years,Enterprise development,"No, I don't know much theory",Intermediate,"C#, F#, Java",2-3 years,,I use it for hobby or side projects,Windows,Visual Studio 2015 or newer,"Twitter, F# Weekly, F# bloggers","Conciseness of code (I can see more at a glance), Correctness (no nulls, it works first time), Having fun again, Learning functional programming in general","Active Patterns, Immutability by default, Simple ""one liner"" type definitions for records and DUs, The ""piping"" idiom, Type inference, Type providers","Agents (MailboxProcessor), Computation expressions, Units of measure","F# books, F# bloggers, Personal mentoring, Videos (e.g. Community for F#)",I'm willing to learn advanced concepts but only if they are relevant and practical,"More material with in-depth tutorials, More interactive tutorials (e.g. like the F# Koans)",,Not applicable. None of my F# code is used by other people,None - Just playing around,Not doing data centric apps,Windows,I don't use F# at work,,"No perceived benefits: They don't understand what benefits F# has over C# or other languages, Hiring: They worry about not being able to find F# developers, Too Windows-centric: They have concerns over cross-platform issues",,Not enough real-world code to learn from,"Not being part of the core .NET distribution, Lack of F# friendly libraries, Less sophisticated tools for refactoring, etc.",JVM,,,,"In-person: In-depth trainings (2 or 3 days), Books or longer articles explaining full context, In-depth online courses (e.g. Pluralsight)",,
15/04/2016 17:11:46,5-10 years,Commercial software/web development,"Yes, I enjoy computer science and mathematics",Intermediate,"Javascript, Objective-C, Python, Ruby, Swift",Less than two months,No longer forced to use Windows for work,Just tinkering,Windows,"Visual Studio 2012 or 2013, Vim, VsVim",,,,,"MSDN, Links and instructions from fsharp.org",,,,Not applicable. None of my F# code is used by other people,Utilities and tools,,Windows,I don't use F# at work,,"Hiring: They worry about not being able to find F# developers, Training: They are worried about getting non-F# developers up to speed, Too Windows-centric: They have concerns over cross-platform issues, Too Microsoft-centric: They think it is too closely linked to Microsoft, No buy-in: There is lack of acceptance from other teams",,"Lack of good tutorials/documentation, Installation process","Not being part of the core .NET distribution, Lack of good wrappers for non-F# libraries, Cross-platform issues","LLVM, Native",,,,Books or longer articles explaining full context,,
15/04/2016 17:15:08,5-10 years,Commercial software/web development,"Yes, I enjoy computer science and mathematics",Intermediate,"C, Erlang, Java, Ruby",Less than a year,,Just tinkering,Mac,Emacs,"Twitter, F# Weekly, F# bloggers, Meetup","Conciseness of code (I can see more at a glance), Correctness (no nulls, it works first time), Great community, Having fun again, Learning functional programming in general","Active Patterns, Async workflows, Easy integration with other .NET libraries, Immutability by default, Interactive development, Simple ""one liner"" type definitions for records and DUs, The ""piping"" idiom, Type providers",,"F# books, F# bloggers, Links mentioned in F# Weekly, Reading F# code written by experts",I'm willing to learn advanced concepts but only if they are relevant and practical,,"Setup Documentation for non Windows OS, especially Editors outside of VS.",Not applicable. None of my F# code is used by other people,None - Just playing around,"SQL databases, NoSQL database","Linux, Azure",I don't use F# at work,"Domain modelling: making illegal states unrepresentable, Correctness: fewer bugs and less rework, More productive with fewer developers, Efficiency/Performance","No perceived benefits: They don't understand what benefits F# has over C# or other languages, Too Windows-centric: They have concerns over cross-platform issues",,"Installation process, Not enough real-world code to learn from",Working with C#-centric tooling,"JVM, LLVM",Dependency on Visual Studio,,,"In-person: Shorter workshops focused on a specific topic (1 day), In-person: A talks at user groups, Books or longer articles explaining full context, Reference works or documentation with API listings or short tutorials, Recorded talks from a conference or user group","REPL, Emacs Integration, Paket, Forge",
15/04/2016 17:16:20,10 or more years,Enterprise development,"Yes, I enjoy computer science and mathematics",Learner,"C, C#, Javascript, Python",1-2 years,,I use it for hobby or side projects,"Windows, Linux","Visual Studio 2015 or newer, VS Code (with Ionide)","F# Weekly, HN, Reddit and other programming news sites, F# bloggers","Conciseness of code (I can see more at a glance), Correctness (no nulls, it works first time), Having fun again, Learning functional programming in general","Active Patterns, Immutability by default, Type providers","Agents (MailboxProcessor), Integration with non-F# libraries, Units of measure","F# bloggers, Links mentioned in F# Weekly, Videos (e.g. Community for F#)",I'm willing to learn advanced concepts but only if they are relevant and practical,"More material with in-depth tutorials, More material with short ""cookbook"" style information, More material with real-world examples and war stories",,Not applicable. None of my F# code is used by other people,"None - Just playing around, Utilities and tools, Mainstream business & enterprise applications","SQL databases, Read-only data sources such as feeds",Windows,It's used unofficially,"Domain modelling: making illegal states unrepresentable, Correctness: fewer bugs and less rework",No perceived benefits: They don't understand what benefits F# has over C# or other languages,,,,,,,,"Books or longer articles explaining full context, In-depth online courses (e.g. Pluralsight)","FSharp.Data
FSharp.Data.SqlClient",
15/04/2016 17:18:31,5-10 years,Enterprise development,"No, I don't know much theory",Intermediate,"C#, F#, Javascript",4 or more years,,I use it for hobby or side projects,Windows,Visual Studio 2015 or newer,"Twitter, F# Weekly","Better domain modelling with records and unions, Conciseness of code (I can see more at a glance), Correctness (no nulls, it works first time), Great community, Learning functional programming in general","Algebraic types (inc discriminated unions and tuples), Computation expressions, Immutability by default, Interactive development, Quotations, Simple ""one liner"" type definitions for records and DUs, The ""piping"" idiom, Type inference, Type providers","Agents (MailboxProcessor), Object expressions, Units of measure","F# books, F# bloggers, Links posted on social media such as Twitter, Links mentioned in F# Weekly, Answers to Stack Overflow questions",I'm willing to learn advanced concepts but only if they are relevant and practical,"More material with in-depth tutorials, More material with short ""cookbook"" style information, More material with real-world examples and war stories, More short ""live coding"" videos, More podcasts and other audio-only material, More interactive tutorials (e.g. like the F# Koans)",,Internal enterprise projects,"Utilities and tools, Custom development/specialist markets, Other",Not doing data centric apps,Windows,It's officially endorsed in my team for non-critical/non-production code,Using custom type providers,No buy-in: There is lack of acceptance from other teams,,,"Not being part of the core .NET distribution, Less sophisticated tools for refactoring, etc.",None -- I'm happy with the CLR/Mono,,,,"In-person: Attending a talks as part of a conference, Books or longer articles explaining full context, Reference works or documentation with API listings or short tutorials, Recorded talks from a conference or user group",,
15/04/2016 17:22:02,10 or more years,Enterprise development,"Yes, I enjoy computer science and mathematics",Intermediate,"C#, F#, Javascript, Typescript",1-2 years,,I use it to write utility code to automate my freelance work. ,"Windows, Mac","Visual Studio 2015 or newer, Xamarin, VS Code (with Ionide)","Twitter, F# Weekly, HN, Reddit and other programming news sites, F# bloggers, fsharp channel on Slack","Better domain modelling with records and unions, Conciseness of code (I can see more at a glance), Correctness (no nulls, it works first time), Great community, Having fun again, Learning functional programming in general","Easy integration with other .NET libraries, Immutability by default, Object-oriented features (inc. C# compatibility, conciseness), Simple ""one liner"" type definitions for records and DUs, The ""piping"" idiom, Type inference, Type providers","Active Patterns, Agents (MailboxProcessor)","F# books, F# bloggers, Links posted on social media such as Twitter, Reading F# code written by experts",I like theory -- I'm not afraid of monads and other abstractions,"More material with short ""cookbook"" style information, More short ""live coding"" videos, More interactive tutorials (e.g. like the F# Koans)",,Not applicable. None of my F# code is used by other people,"Utilities and tools, Non-commercial web site/app","SQL databases, Read-only data sources such as feeds",,It's used unofficially,"Domain modelling: making illegal states unrepresentable, More productive with fewer developers","Hiring: They worry about not being able to find F# developers, Training: They are worried about getting non-F# developers up to speed, No buy-in: There is lack of acceptance from other teams",,"Don't understand the compiler errors, Not enough real-world code to learn from","Lack of good wrappers for non-F# libraries, Less sophisticated tools for refactoring, etc.",None -- I'm happy with the CLR/Mono,,,,"In-person: Shorter workshops focused on a specific topic (1 day), In-person: A talks at user groups, In-person: Attending a talks as part of a conference, Books or longer articles explaining full context","Ionide
Xamarin Studio
FSharp.Data
",
15/04/2016 17:24:58,5-10 years,Enterprise development,"Yes, I enjoy computer science and mathematics",Experienced,"C#, F#",3-4 years,,I use it for hobby or side projects,Windows,Visual Studio 2012 or 2013,"F# Weekly, HN, Reddit and other programming news sites, F# bloggers","Better domain modelling with records and unions, Conciseness of code (I can see more at a glance), Correctness (no nulls, it works first time), Speed of development","Active Patterns, Agents (MailboxProcessor), Algebraic types (inc discriminated unions and tuples), Async workflows, Computation expressions, Easy integration with other .NET libraries, Immutability by default, Interactive development, Type inference",Quotations,"F# books, F# bloggers, Links mentioned in F# Weekly, Reading F# code written by experts",,,,Internal enterprise projects,"None - Just playing around, Financial services, Commercial web site/app, Non-commercial web site/app",SQL databases,Windows,It's officially endorsed in my team for non-critical/non-production code,"Domain modelling: making illegal states unrepresentable, Correctness: fewer bugs and less rework, More productive with fewer developers, Faster time to market, Efficiency/Performance, Easy concurrency with async and agents, Better for solving complex problems","No perceived benefits: They don't understand what benefits F# has over C# or other languages, Fad: They have concerns over long term language viability",,Installation process,,Javascript,,,,,,
15/04/2016 17:25:28,10 or more years,Commercial software/web development,"Yes, I enjoy computer science and mathematics",Experienced,"C#, F#",2-3 years,,I use it at work or for other commercial uses,Windows,Visual Studio 2015 or newer,,"Better domain modelling with records and unions, Correctness (no nulls, it works first time), Having fun again","Agents (MailboxProcessor), Algebraic types (inc discriminated unions and tuples), Immutability by default, The ""piping"" idiom","Quotations, Units of measure","F# books, F# bloggers, Videos (e.g. Community for F#)",I want to learn functional programming but I don't like academic jargon,"More material with short ""cookbook"" style information, More material with real-world examples and war stories",,Not applicable. None of my F# code is used by other people,"Utilities and tools, Commercial web site/app","SQL databases, Analytics","Windows, Azure",It's used unofficially,"Domain modelling: making illegal states unrepresentable, Correctness: fewer bugs and less rework",,,,Working with C#-centric tooling,None -- I'm happy with the CLR/Mono,,,,,,
15/04/2016 17:28:12,1-2 years,Student,"Yes, I enjoy computer science and mathematics",Learner,"C++, Python, Scheme/CL",Less than two months,,Just tinkering,Linux,"Vim, Geany","HN, Reddit and other programming news sites",Learning functional programming in general,Immutability by default,"Active Patterns, Integration with non-F# libraries, Object-oriented compatibility","F# books, Answers to Stack Overflow questions, Videos (e.g. Community for F#)",I want to learn functional programming but I don't like academic jargon,"More material with in-depth tutorials, More material with short ""cookbook"" style information, More material with real-world examples and war stories",I think a book along the lines of SICP with F# instead of scheme would be really useful.,Not applicable. None of my F# code is used by other people,None - Just playing around,Not doing data centric apps,Linux,I don't use F# at work,,"No perceived benefits: They don't understand what benefits F# has over C# or other languages, Hiring: They worry about not being able to find F# developers, Fad: They have concerns over long term language viability",,"Lack of good tutorials/documentation, Not enough real-world code to learn from",,None -- I'm happy with the CLR/Mono,,,,"In-person: Attending a talks as part of a conference, Books or longer articles explaining full context, Recorded talks from a conference or user group",,
15/04/2016 17:29:49,10 or more years,Consulting,"Yes, I enjoy computer science and mathematics",Experienced,"C#, F#, Haskell, Javascript",1-2 years,,I use it for hobby or side projects,"Windows, Linux","Visual Studio 2015 or newer, Vim, Emacs","Twitter, HN, Reddit and other programming news sites, fsharp channel on Slack","Better domain modelling with records and unions, Conciseness of code (I can see more at a glance), Correctness (no nulls, it works first time), Great community, Learning functional programming in general","Algebraic types (inc discriminated unions and tuples), Async workflows, Computation expressions, Immutability by default, Interactive development, Object-oriented features (inc. C# compatibility, conciseness), Simple ""one liner"" type definitions for records and DUs, The ""piping"" idiom, Type inference",Units of measure,"F# bloggers, Links posted on social media such as Twitter, Links mentioned in F# Weekly, Videos (e.g. Community for F#)",I like theory -- I'm not afraid of monads and other abstractions,More material with real-world examples and war stories,,"Internal enterprise projects, Open source projects",Mainstream business & enterprise applications,SQL databases,Windows,It's used unofficially,"Domain modelling: making illegal states unrepresentable, Correctness: fewer bugs and less rework, Easy concurrency with async and agents","No perceived benefits: They don't understand what benefits F# has over C# or other languages, Hiring: They worry about not being able to find F# developers, No buy-in: There is lack of acceptance from other teams",,Not enough real-world code to learn from,"Not being part of the core .NET distribution, Cross-platform issues","JVM, LLVM",,,,"Reference works or documentation with API listings or short tutorials, Recorded talks from a conference or user group, In-depth online courses (e.g. Pluralsight)","fsharp.data
",
15/04/2016 17:29:49,10 or more years,Commercial software/web development,"No, I don't know much theory",Learner,"C#, Java",Haven't really used it yet,,Just tinkering,"Windows, Mac","Visual Studio 2015 or newer, Sublime Text",StackOverflow chat,"Learning functional programming in general, Speed of development",,,Links and instructions from fsharp.org,I want to learn functional programming but I don't like academic jargon,"More material with in-depth tutorials, More material with short ""cookbook"" style information, More material with real-world examples and war stories, More short ""live coding"" videos, More interactive tutorials (e.g. like the F# Koans)",,Not applicable. None of my F# code is used by other people,None - Just playing around,Not doing data centric apps,,I don't use F# at work,,"No perceived benefits: They don't understand what benefits F# has over C# or other languages, Fad: They have concerns over long term language viability",,I can't use my knowledge from C# or other imperative languages,,"JVM, LLVM, Native",,,,"In-person: Shorter workshops focused on a specific topic (1 day), In-person: A talks at user groups, In-person: Attending a talks as part of a conference, Books or longer articles explaining full context, Reference works or documentation with API listings or short tutorials, Recorded talks from a conference or user group, In-depth online courses (e.g. Pluralsight)",,
15/04/2016 17:30:34,10 or more years,Commercial software/web development,"Yes, I enjoy computer science and mathematics",Learner,"C#, Javascript",1-2 years,,I use it for hobby or side projects,Windows,Visual Studio 2015 or newer,Twitter,"Better domain modelling with records and unions, Conciseness of code (I can see more at a glance), Correctness (no nulls, it works first time), Having fun again, Learning functional programming in general, Speed of development","Backtick naming, Easy integration with other .NET libraries, Immutability by default, Simple ""one liner"" type definitions for records and DUs, The ""piping"" idiom, Type inference, Type providers","Agents (MailboxProcessor), Async workflows, Units of measure","MSDN, F# books, Answers to Stack Overflow questions, F# for fun and profit",I'm willing to learn advanced concepts but only if they are relevant and practical,,,Open source projects,None - Just playing around,Not doing data centric apps,,It's officially endorsed in my team for non-critical/non-production code,"Domain modelling: making illegal states unrepresentable, Correctness: fewer bugs and less rework","Hiring: They worry about not being able to find F# developers, Training: They are worried about getting non-F# developers up to speed",,Don't understand the compiler errors,"Lack of F# friendly libraries, Working with C#-centric tooling",None -- I'm happy with the CLR/Mono,,,,,,
15/04/2016 17:31:00,10 or more years,Commercial software/web development,"Yes, I enjoy computer science and mathematics",Beginner,C#,Haven't really used it yet,,Just tinkering,Windows,Visual Studio 2015 or newer,,Learning functional programming in general,,,,I like theory -- I'm not afraid of monads and other abstractions,"More material with in-depth tutorials, More material with real-world examples and war stories, More podcasts and other audio-only material",,Not applicable. None of my F# code is used by other people,None - Just playing around,Not doing data centric apps,,I don't use F# at work,,"Hiring: They worry about not being able to find F# developers, Training: They are worried about getting non-F# developers up to speed",,"Lack of good tutorials/documentation, Not enough real-world code to learn from","Not being part of the core .NET distribution, Lack of support in ASP.NET Core",None -- I'm happy with the CLR/Mono,,,,"In-person: Shorter workshops focused on a specific topic (1 day), In-person: A talks at user groups, In-person: Attending a talks as part of a conference, Books or longer articles explaining full context, Reference works or documentation with API listings or short tutorials, Recorded talks from a conference or user group",,
15/04/2016 17:31:51,10 or more years,Financial services or similar,"No, I don't know much theory",Experienced,C#,I was using F# but have stopped,Syntax too succinct to be easily readable. No killer frameworks. Not a first-class language for Microsoft. Not paid more for by job market. Being a nice language is not enough.,Just tinkering,Windows,Visual Studio 2015 or newer,"HN, Reddit and other programming news sites, MSDN","Correctness (no nulls, it works first time)","Easy integration with other .NET libraries, Immutability by default, Units of measure","Active Patterns, Agents (MailboxProcessor), Async workflows, Computation expressions, Interactive development, Quotations, Type providers","MSDN, Links and instructions from fsharp.org, F# bloggers, Answers to Stack Overflow questions, practice",I want to learn functional programming but I don't like academic jargon,More material with real-world examples and war stories,By providing motivation.,Not applicable. None of my F# code is used by other people,None - Just playing around,Not doing data centric apps,,I don't use F# at work,,"No perceived benefits: They don't understand what benefits F# has over C# or other languages, Hiring: They worry about not being able to find F# developers, Training: They are worried about getting non-F# developers up to speed, No buy-in: There is lack of acceptance from other teams, No trully major benefits","Create someting *new* entirely in F# that solves a major problem really well. Examples: Rails, Akka, NServiceBus, XNA.",get rid of ML syntax?,"Less sophisticated tools for refactoring, etc.","JVM, LLVM, Targeting JVM could be a killer feature! Scalla failed to deliver.",ML syntax and no killer features.,Make shorter.,"I wish F# was pure as Haskell. At least it would've been different enough from C#. Making ""a better C#"" requires syntax that is not insane. Also make ReFSharper!",Books or longer articles explaining full context,None to be honest.,
15/04/2016 17:34:27,10 or more years,"Academic, research, or related","Yes, I enjoy computer science and mathematics",Experienced,"C, F#, Java, Python",Less than a year,,I use it for hobby or side projects,Windows,Visual Studio 2015 or newer,F# Weekly,"Correctness (no nulls, it works first time), Having fun again","Algebraic types (inc discriminated unions and tuples), Immutability by default, Simple ""one liner"" type definitions for records and DUs, The ""piping"" idiom, Type inference, Type providers","Agents (MailboxProcessor), Units of measure","MSDN, Links and instructions from fsharp.org, F# bloggers, Answers to Stack Overflow questions",I like theory -- I'm not afraid of monads and other abstractions,,"(1) Keep ""getting started"" tools install for all platforms uptodate - it is not

(2) make it easier to do standard collection & string stuff without using .NET methods
",Open source projects,"Utilities and tools, Non-commercial web site/app, Research/Teaching, Text analysis/language parsing",SQL databases,Windows,It's used unofficially,"Correctness: fewer bugs and less rework, Better for solving complex problems",,,"Installation process, too much out of date info","Lack of F# friendly libraries, Lack of good wrappers for non-F# libraries",Javascript,"Lack of a complete set of F# idiomatic functions on standard data structures (e.g. string functions - why are they hidden in fsharpx.extras?)

Lack of baked in and easy to use immutable arrays (want ImmutableArray properly integrated as F# collection)",,,,,
15/04/2016 17:39:10,2-5 years,Student,"Yes, I enjoy computer science and mathematics",Intermediate,"C++, Clojure, Haskell, Python, Rust",Less than a year,,Just tinkering,Mac,Xamarin,"HN, Reddit and other programming news sites","Correctness (no nulls, it works first time), Learning functional programming in general, Speed of development, Functional but can be tweaked to get high performance","Algebraic types (inc discriminated unions and tuples), Async workflows, Immutability by default, Interactive development, printf that is type checked, The ""piping"" idiom, Units of measure",,Links and instructions from fsharp.org,I'm willing to learn advanced concepts but only if they are relevant and practical,"More material with in-depth tutorials, More material with short ""cookbook"" style information, More interactive tutorials (e.g. like the F# Koans)",,Not applicable. None of my F# code is used by other people,None - Just playing around,Not doing data centric apps,"Windows, Mac, Linux",I don't use F# at work,,,,"Lack of good tutorials/documentation, Installation process, Not enough real-world code to learn from","Working with C#-centric tooling, Cross-platform issues",Javascript,,,,"Books or longer articles explaining full context, Reference works or documentation with API listings or short tutorials",,
15/04/2016 17:40:20,10 or more years,Open source development,"Yes, I enjoy computer science and mathematics",Intermediate,Python,Less than a year,,I use it for hobby or side projects,"Windows, Linux","Visual Studio 2015 or newer, MonoDevelop, Emacs","Twitter, HN, Reddit and other programming news sites","Conciseness of code (I can see more at a glance), Having fun again","Active Patterns, Easy integration with other .NET libraries, Interactive development, The ""piping"" idiom, Type inference",,"Links and instructions from fsharp.org, F# books, F# bloggers, Videos (e.g. Community for F#)",I want to learn functional programming but I don't like academic jargon,"More material with in-depth tutorials, More material with short ""cookbook"" style information, More material with real-world examples and war stories",,"Commercial products, Open source projects","Algorithm-heavy business applications (non-financial), Custom development/specialist markets, Data analysis/statistics","SQL databases, NoSQL database","Linux, Azure, Amazon Web services",I don't use F# at work,"Correctness: fewer bugs and less rework, More productive with fewer developers, Faster time to market, Efficiency/Performance","Hiring: They worry about not being able to find F# developers, Fad: They have concerns over long term language viability, No buy-in: There is lack of acceptance from other teams",,Not enough real-world code to learn from,,None -- I'm happy with the CLR/Mono,,,,"In-person: Shorter workshops focused on a specific topic (1 day), In-person: Attending a talks as part of a conference, Books or longer articles explaining full context",,
15/04/2016 17:42:13,5-10 years,Commercial software/web development,"Yes, I enjoy computer science and mathematics",Intermediate,"Objective-C, Python, Scheme/CL, Swift",Less than two months,,I use it for hobby or side projects,"Windows, Mac","Visual Studio 2015 or newer, VS Code (with Ionide)","Twitter, F# Weekly, HN, Reddit and other programming news sites, F# bloggers","Conciseness of code (I can see more at a glance), Correctness (no nulls, it works first time), Having fun again, Learning functional programming in general, It's strong roots in OCaml which leads to good fit for compiler construction","Interactive development, The ""piping"" idiom","Async workflows, Integration with non-F# libraries, Object-oriented compatibility","MSDN, Links and instructions from fsharp.org, F# books, Reading F# code written by experts",I like theory -- I'm not afraid of monads and other abstractions,"More material with real-world examples and war stories, More podcasts and other audio-only material","Improving the F# command line tools would be nice, e. g. by including all relevant folders in the PATH.
Having a lot of real-world example tutorials.",Not applicable. None of my F# code is used by other people,Research/Teaching,Not doing data centric apps,"Windows, Mac",I don't use F# at work,"Correctness: fewer bugs and less rework, More productive with fewer developers, Efficiency/Performance",missing GUI development,More tooling around the Mono-Framework for Mac OS X.,"Lack of good tutorials/documentation, Not enough real-world code to learn from, add tools for GUI development","Lack of F# friendly libraries, Lack of good wrappers for non-F# libraries, Working with C#-centric tooling","LLVM, Native",missing GUI development,,,"In-person: Attending a talks as part of a conference, Books or longer articles explaining full context, Reference works or documentation with API listings or short tutorials",I mostly us FsLexYacc but i want to look more into Suave,
15/04/2016 17:41:14,5-10 years,Commercial software/web development,"No, I don't know much theory",Intermediate,"C, C#, F#, Perl, PHP, Ruby",I was using F# but have stopped,,Just tinkering,"Windows, Linux",Sublime Text,"HN, Reddit and other programming news sites",,,,,,,,,,,,,,,,,,Javascript,,,,,,
15/04/2016 17:44:23,10 or more years,Enterprise development,"Yes, I enjoy computer science and mathematics",Learner,"C#, Javascript",Less than a year,,Just tinkering,Windows,Visual Studio 2015 or newer,"Twitter, HN, Reddit and other programming news sites","Conciseness of code (I can see more at a glance), Correctness (no nulls, it works first time), Learning functional programming in general, Functional but can be tweaked to get high performance","Easy integration with other .NET libraries, Immutability by default, No dependency cycles, Object-oriented features (inc. C# compatibility, conciseness)",,F# books,I'm willing to learn advanced concepts but only if they are relevant and practical,"More material with short ""cookbook"" style information, More podcasts and other audio-only material",,,,,Windows,I don't use F# at work,,,,"Lack of good tutorials/documentation, I can't use my knowledge from C# or other imperative languages",,Javascript,,,,In-person: In-depth trainings (2 or 3 days),,
15/04/2016 17:44:41,10 or more years,Enterprise development,"No, I don't know much theory",Experienced,"C#, F#, Javascript, Visual Basic",3-4 years,,I use it at work or for other commercial uses,Windows,"Visual Studio 2015 or newer, VS Code (with Ionide), LINQPad","Twitter, HN, Reddit and other programming news sites","Better domain modelling with records and unions, Conciseness of code (I can see more at a glance), Correctness (no nulls, it works first time), Speed of development",,"Quotations, Units of measure","MSDN, F# books",I like theory -- I'm not afraid of monads and other abstractions,"More material with short ""cookbook"" style information, More short ""live coding"" videos",,Internal enterprise projects,Mainstream business & enterprise applications,SQL databases,Windows,It's used unofficially,"Domain modelling: making illegal states unrepresentable, More productive with fewer developers, Faster time to market, Easy concurrency with async and agents",Training: They are worried about getting non-F# developers up to speed,,,"Less sophisticated tools for refactoring, etc.","Javascript, LLVM, Native",,,,"In-person: A talks at user groups, Books or longer articles explaining full context, Reference works or documentation with API listings or short tutorials, In-depth online courses (e.g. Pluralsight)",,
15/04/2016 17:48:08,10 or more years,Enterprise development,"Yes, I enjoy computer science and mathematics",Experienced,"C#, F#, Rust",3-4 years,,I use it for hobby or side projects,Windows,"Visual Studio 2015 or newer, Visual Studio 2012 or 2013, Xamarin","HN, Reddit and other programming news sites","Conciseness of code (I can see more at a glance), Correctness (no nulls, it works first time), Having fun again, Speed of development, Functional but can be tweaked to get high performance","Easy integration with other .NET libraries, Immutability by default, Interactive development, The ""piping"" idiom, Type inference, Type providers","Agents (MailboxProcessor), Quotations, Units of measure","Personal mentoring, Reading F# code written by experts",I like theory -- I'm not afraid of monads and other abstractions,"More material with in-depth tutorials, More material with short ""cookbook"" style information, More interactive tutorials (e.g. like the F# Koans)",,Internal enterprise projects,"Utilities and tools, Games, Machine learning, Non-commercial web site/app, Mobile apps",SQL databases,"Windows, Linux, Android",I don't use F# at work,,"No perceived benefits: They don't understand what benefits F# has over C# or other languages, Hiring: They worry about not being able to find F# developers, Training: They are worried about getting non-F# developers up to speed, No buy-in: There is lack of acceptance from other teams",,,Working with C#-centric tooling,"Javascript, LLVM, Native",,,,"Books or longer articles explaining full context, Reference works or documentation with API listings or short tutorials, Recorded talks from a conference or user group",,
15/04/2016 17:48:22,10 or more years,Commercial software/web development,"Yes, I enjoy computer science and mathematics",Intermediate,"C, C#, Java, Javascript, Scala, Typescript",1-2 years,,I use it for hobby or side projects,"Windows, Mac, Linux","Visual Studio 2015 or newer, Xamarin","HN, Reddit and other programming news sites","Better domain modelling with records and unions, Conciseness of code (I can see more at a glance), Correctness (no nulls, it works first time), Learning functional programming in general, Functional but can be tweaked to get high performance","Algebraic types (inc discriminated unions and tuples), Async workflows, Easy integration with other .NET libraries, Immutability by default, Simple ""one liner"" type definitions for records and DUs, The ""piping"" idiom, Type inference",Async workflows,"MSDN, Links and instructions from fsharp.org",I like theory -- I'm not afraid of monads and other abstractions,"More material with in-depth tutorials, More material with short ""cookbook"" style information",,"Open source projects, Teaching","None - Just playing around, Games, Research/Teaching",Not doing data centric apps,"Windows, Mac",I don't use F# at work,,,,Not enough real-world code to learn from,Working with C#-centric tooling,"None -- I'm happy with the CLR/Mono, LLVM",,,,"In-person: In-depth trainings (2 or 3 days), Books or longer articles explaining full context, Reference works or documentation with API listings or short tutorials",,
15/04/2016 17:48:26,10 or more years,Commercial software/web development,"Yes, I enjoy computer science and mathematics",Intermediate,"C, C#, Java, Javascript, Scala, Typescript",1-2 years,,I use it for hobby or side projects,"Windows, Mac, Linux","Visual Studio 2015 or newer, Xamarin","HN, Reddit and other programming news sites","Better domain modelling with records and unions, Conciseness of code (I can see more at a glance), Correctness (no nulls, it works first time), Learning functional programming in general, Functional but can be tweaked to get high performance","Algebraic types (inc discriminated unions and tuples), Async workflows, Easy integration with other .NET libraries, Immutability by default, Simple ""one liner"" type definitions for records and DUs, The ""piping"" idiom, Type inference",Async workflows,"MSDN, Links and instructions from fsharp.org",I like theory -- I'm not afraid of monads and other abstractions,"More material with in-depth tutorials, More material with short ""cookbook"" style information",,"Open source projects, Teaching","None - Just playing around, Games, Research/Teaching",Not doing data centric apps,"Windows, Mac",I don't use F# at work,,,,Not enough real-world code to learn from,Working with C#-centric tooling,"None -- I'm happy with the CLR/Mono, LLVM",,,,"In-person: In-depth trainings (2 or 3 days), Books or longer articles explaining full context, Reference works or documentation with API listings or short tutorials",,
15/04/2016 17:51:49,10 or more years,Commercial software/web development,"Yes, I enjoy computer science and mathematics",Experienced,"C#, F#",2-3 years,,I use it at work or for other commercial uses,Windows,"Visual Studio 2015 or newer, Visual Studio 2012 or 2013, Atom (with Ionide)","F# Weekly, fsharp channel on Slack","Better domain modelling with records and unions, Conciseness of code (I can see more at a glance), Correctness (no nulls, it works first time), Great community, Having fun again, Learning functional programming in general","Active Patterns, Algebraic types (inc discriminated unions and tuples), Async workflows, Easy integration with other .NET libraries, Immutability by default, Interactive development, Object expressions, The ""piping"" idiom, Type inference, Type providers",,"Links and instructions from fsharp.org, F# bloggers, Answers to Stack Overflow questions, Reading F# code written by experts",I like theory -- I'm not afraid of monads and other abstractions,"More material with in-depth tutorials, More material with short ""cookbook"" style information, More material with real-world examples and war stories",,"Commercial products, Open source projects","Utilities and tools, Commercial web site/app, Data analysis/statistics","SQL databases, NoSQL database, Read-only data sources such as feeds","Windows, Azure",It's used unofficially,"Domain modelling: making illegal states unrepresentable, Correctness: fewer bugs and less rework","No perceived benefits: They don't understand what benefits F# has over C# or other languages, Fad: They have concerns over long term language viability, No buy-in: There is lack of acceptance from other teams","Not much. I work at a service company, and the tooling to create robust websites and web applications (in the .NET stack) exists primarily in C#. Additionally, the fact that C# developers are easier to find than F# indicates that we will be unlikely to recommend it for external projects.","Lack of good tutorials/documentation, I can't use my knowledge from C# or other imperative languages, Don't understand the compiler errors, Not enough real-world code to learn from","Not being part of the core .NET distribution, Less sophisticated tools for refactoring, etc., Difficulty in troubleshooting problems",None -- I'm happy with the CLR/Mono,,,,"Books or longer articles explaining full context, Reference works or documentation with API listings or short tutorials, Recorded talks from a conference or user group","Suave
FsLab (and it's many member libraries)
Ionide/FSI Interactive
",
15/04/2016 17:52:09,5-10 years,Open source development,"No, I don't know much theory",Experienced,"C#, Javascript, Rust, Typescript",Less than two months,,Just tinkering,Windows,Visual Studio 2015 or newer,,Conciseness of code (I can see more at a glance),"Async workflows, Type inference, Type providers",,Answers to Stack Overflow questions,,,,,,,,,,,,,,,,,,,,
15/04/2016 17:54:08,10 or more years,Enterprise development,"No, I don't know much theory",Learner,"C#, F#, Javascript",I was using F# but have stopped,"Old manager was afraid of it, new manager is not, so I'll be picking it up again soon.",I use it at work or for other commercial uses,Windows,Visual Studio 2015 or newer,"Twitter, HN, Reddit and other programming news sites","Better domain modelling with records and unions, Conciseness of code (I can see more at a glance), Correctness (no nulls, it works first time), Great community, Having fun again, Learning functional programming in general","Active Patterns, Easy integration with other .NET libraries, Immutability by default, Interactive development, printf that is type checked, Simple ""one liner"" type definitions for records and DUs, The ""piping"" idiom, Type inference, Type providers",,"Links and instructions from fsharp.org, F# bloggers, Answers to Stack Overflow questions, Personal mentoring, Structured training/workshops, Reading F# code written by experts",I'm willing to learn advanced concepts but only if they are relevant and practical,"More material with in-depth tutorials, More material with real-world examples and war stories, More interactive tutorials (e.g. like the F# Koans)","Real world examples, interactive examples, fun examples","Internal enterprise projects, Commercial products","Custom development/specialist markets, Machine learning, Commercial web site/app, Data analysis/statistics","SQL databases, Read-only data sources such as feeds","Windows, Linux",It's officially endorsed in my team for critical/production areas,"Domain modelling: making illegal states unrepresentable, Correctness: fewer bugs and less rework, More productive with fewer developers, Faster time to market, Efficiency/Performance, Better for solving complex problems","No perceived benefits: They don't understand what benefits F# has over C# or other languages, Training: They are worried about getting non-F# developers up to speed, No buy-in: There is lack of acceptance from other teams, Manager Fear of Change",High level articles targeting manager-tier readers to convince of the benefits with real world examples.,,Not being part of the core .NET distribution,None -- I'm happy with the CLR/Mono,Visibility to greater Dev community,,,"In-person: In-depth trainings (2 or 3 days), In-person: A talks at user groups, In-person: Attending a talks as part of a conference, Books or longer articles explaining full context, Reference works or documentation with API listings or short tutorials, In-depth online courses (e.g. Pluralsight)","FSharp Powerpack (RIP)
Data
CompilerServices
",
15/04/2016 17:55:14,5-10 years,Student,"Yes, I enjoy computer science and mathematics",Experienced,"C, C#, C++, F#, Go, Javascript",1-2 years,,I use it for hobby or side projects,"Windows, Linux","Visual Studio 2015 or newer, VS Code (with Ionide)","HN, Reddit and other programming news sites","Better domain modelling with records and unions, Conciseness of code (I can see more at a glance), Correctness (no nulls, it works first time), Having fun again, Speed of development, Functional but can be tweaked to get high performance","Algebraic types (inc discriminated unions and tuples), Immutability by default, Interactive development, Simple ""one liner"" type definitions for records and DUs, The ""piping"" idiom","Active Patterns, Computation expressions, Integration with non-F# libraries, Quotations, Static type constraints, Type providers, Units of measure","MSDN, Links and instructions from fsharp.org, F# bloggers, Answers to Stack Overflow questions",I like theory -- I'm not afraid of monads and other abstractions,"More material with in-depth tutorials, More material with short ""cookbook"" style information, More material with real-world examples and war stories, More short ""live coding"" videos",,"Commercial products, Open source projects","Utilities and tools, Machine learning, Commercial web site/app, Non-commercial web site/app, Research/Teaching, Data analysis/statistics, Text analysis/language parsing","SQL databases, Event sourcing","Windows, Linux",It's officially endorsed in my team for critical/production areas,"Domain modelling: making illegal states unrepresentable, Correctness: fewer bugs and less rework, More productive with fewer developers, Efficiency/Performance, Easy concurrency with async and agents, Better for solving complex problems","Too Windows-centric: They have concerns over cross-platform issues, Too Microsoft-centric: They think it is too closely linked to Microsoft",,Not enough real-world code to learn from,"Not being part of the core .NET distribution, Lack of F# friendly libraries, Lack of good wrappers for non-F# libraries, Working with C#-centric tooling, Less sophisticated tools for refactoring, etc.","JVM, Javascript, LLVM, Native",,,,"Books or longer articles explaining full context, Reference works or documentation with API listings or short tutorials, Recorded talks from a conference or user group",,
15/04/2016 17:55:45,10 or more years,Enterprise development,"No, I don't know much theory",Learner,"Java, Python, SQL",Haven't really used it yet,,Just tinkering,Windows,Visual Studio 2015 or newer,"HN, Reddit and other programming news sites, F# bloggers",Learning functional programming in general,,,Links and instructions from fsharp.org,I want to learn functional programming but I don't like academic jargon,,,,,,,,,,,,,,,,,"Books or longer articles explaining full context, Reference works or documentation with API listings or short tutorials, Recorded talks from a conference or user group",,
15/04/2016 17:56:21,10 or more years,Enterprise development,"Yes, I enjoy computer science and mathematics",Experienced,C#,1-2 years,,Just tinkering,Windows,Visual Studio 2015 or newer,"F# Weekly, HN, Reddit and other programming news sites, F# bloggers","Better domain modelling with records and unions, Conciseness of code (I can see more at a glance), Correctness (no nulls, it works first time), Having fun again, Speed of development","Algebraic types (inc discriminated unions and tuples), Computation expressions, Easy integration with other .NET libraries, No dependency cycles, The ""piping"" idiom",,"MSDN, F# bloggers, Links mentioned in F# Weekly",I'm willing to learn advanced concepts but only if they are relevant and practical,"More material with in-depth tutorials, More material with real-world examples and war stories",,Not applicable. None of my F# code is used by other people,"Utilities and tools, Text analysis/language parsing",,Windows,Ocassional utility snippets,"Domain modelling: making illegal states unrepresentable, Correctness: fewer bugs and less rework, More productive with fewer developers, Faster time to market, Better for solving complex problems",There was no discussion over it yet,,,"Working with C#-centric tooling, Less sophisticated tools for refactoring, etc., Performance issues",None -- I'm happy with the CLR/Mono,,,"Editor & debugging support for F# in VS is inferior compared to C#.
This needs to be improved for F# to give a fight,
Also, performance is a significant concern.
",,,
15/04/2016 17:56:40,10 or more years,Commercial software/web development,"Yes, I enjoy computer science and mathematics",Experienced,F#,4 or more years,,I use it at work or for other commercial uses,Windows,Visual Studio 2015 or newer,"F# Weekly, HN, Reddit and other programming news sites","Better domain modelling with records and unions, Conciseness of code (I can see more at a glance), Correctness (no nulls, it works first time), Speed of development","Algebraic types (inc discriminated unions and tuples), Computation expressions","Agents (MailboxProcessor), Interactive development, Static type constraints, Units of measure","Answers to Stack Overflow questions, Reading F# code written by experts",I like theory -- I'm not afraid of monads and other abstractions,,,Commercial products,"Custom development/specialist markets, Mainstream business & enterprise applications",SQL databases,"Windows, Mac, Azure",It's officially endorsed in my team for critical/production areas,"Correctness: fewer bugs and less rework, More productive with fewer developers, Better for solving complex problems","Too Windows-centric: They have concerns over cross-platform issues, Too Microsoft-centric: They think it is too closely linked to Microsoft",,,Difficulty in troubleshooting problems,LLVM," Not glaring, but I'd love some gadt support. ",,,"Books or longer articles explaining full context, Reference works or documentation with API listings or short tutorials",,
15/04/2016 17:57:34,2-5 years,Consulting,"Yes, I enjoy computer science and mathematics",Intermediate,"C, C#, F#",1-2 years,,Just tinkering,Windows,"Visual Studio 2015 or newer, Vim","Twitter, fsharp channel on Slack","Conciseness of code (I can see more at a glance), Correctness (no nulls, it works first time), Great community, Having fun again, Learning functional programming in general","Algebraic types (inc discriminated unions and tuples), Computation expressions, Immutability by default, Interactive development, The ""piping"" idiom, Type inference","Active Patterns, Agents (MailboxProcessor), Async workflows, Object expressions, Object-oriented compatibility, Quotations, Static type constraints, Type providers, Units of measure","MSDN, Answers to Stack Overflow questions, Reading F# code written by experts",I like theory -- I'm not afraid of monads and other abstractions,,Singke Quality comprehensible and freely available book,Not applicable. None of my F# code is used by other people,"None - Just playing around, Utilities and tools",Not doing data centric apps,Windows,It's used unofficially,,"No perceived benefits: They don't understand what benefits F# has over C# or other languages, Hiring: They worry about not being able to find F# developers, Training: They are worried about getting non-F# developers up to speed, Fad: They have concerns over long term language viability, No buy-in: There is lack of acceptance from other teams","In my workspace, the only possible thing would not be done by community, but rather by microsoft pushing it more aggressively.",,"Not being part of the core .NET distribution, Lack of F# friendly libraries, Lack of good wrappers for non-F# libraries, Working with C#-centric tooling, Less sophisticated tools for refactoring, etc., Difficulty in troubleshooting problems, Performance issues, Cross-platform issues",Native,"Microsoft not pushing it more aggressively.

Language evolution is rather slow.",,,"Books or longer articles explaining full context, Reference works or documentation with API listings or short tutorials","Visual studio 2015
Vfpt
",
15/04/2016 17:57:46,2-5 years,Enterprise development,"Yes, I enjoy computer science and mathematics",Learner,Python,Haven't really used it yet,,Just tinkering,Windows,Visual Studio 2015 or newer,,"Correctness (no nulls, it works first time), Learning functional programming in general",,,F# books,I'm willing to learn advanced concepts but only if they are relevant and practical,"More material with short ""cookbook"" style information, More material with real-world examples and war stories",,,"Mainstream business & enterprise applications, Data analysis/statistics","SQL databases, Data integration and EAI",Windows,I don't use F# at work,"Domain modelling: making illegal states unrepresentable, Correctness: fewer bugs and less rework",No perceived benefits: They don't understand what benefits F# has over C# or other languages,,Installation process,,,,,,"Books or longer articles explaining full context, Reference works or documentation with API listings or short tutorials",,
15/04/2016 17:58:20,5-10 years,Any cool free software that helps marketing,"No, I don't know much theory",Intermediate,"C#, F#, Javascript, Elm",2-3 years,,I use it at work or for other commercial uses,Windows,"Visual Studio 2015 or newer, Sublime Text, Atom (with Ionide), VS Code (with Ionide)","Twitter, F# Weekly, F# bloggers, fsharp channel on Slack","Better domain modelling with records and unions, Conciseness of code (I can see more at a glance), Correctness (no nulls, it works first time), Great community, Having fun again","Algebraic types (inc discriminated unions and tuples), Easy integration with other .NET libraries, No dependency cycles, printf that is type checked, The ""piping"" idiom, Type inference, Type providers","Object expressions, Quotations, Units of measure","Links and instructions from fsharp.org, F# books, F# bloggers, Links posted on social media such as Twitter, Links mentioned in F# Weekly, Reading F# code written by experts, F# for fun and profit. <3",I like theory -- I'm not afraid of monads and other abstractions,"More material with real-world examples and war stories, More short ""live coding"" videos, More podcasts and other audio-only material, More interactive tutorials (e.g. like the F# Koans)","Make the Web Great Again.
(More things like the Suave Music Store book [which was AWESOME] showing how people actually make full applications with F#)","Commercial products, Open source projects","Utilities and tools, Custom development/specialist markets, Commercial web site/app, Mobile apps, Research/Teaching, Text analysis/language parsing","SQL databases, NoSQL database",,It's officially endorsed in my team for critical/production areas,"Domain modelling: making illegal states unrepresentable, Correctness: fewer bugs and less rework, Better for solving complex problems",I'm the only developer and I'm still honestly a bit lost,"Tooling, specifically education that gives confidence.

I learned C# via PluralSight videos in about 2 months. I had already known Java and Python, so I absolutely had context for this language.

Straight from that 2-month learning period, I got a job doing ASP.NET WebForms development (also learning HTML/CSS/JS in that time period.)


I've been playing with F# now for 2-3 years. I love it. It's my favorite language. I've read 3 books on it. I've given half a dozen talks on it.
I still don't feel confident using it over C#, because the TOOLING is simply not there, or I'm not educated enough, or maybe my confidence is just low.

I don't know what's missing here, but for some reason, something is missing and I desperately want to fix that, even if only for selfish reasons.",Not enough real-world code to learn from,"Not being part of the core .NET distribution, Less sophisticated tools for refactoring, etc.",Javascript,Tooling and education of how to do BLOBAS with F#. Examples.,,,"In-person: A talks at user groups, In-person: Attending a talks as part of a conference, Books or longer articles explaining full context, Reference works or documentation with API listings or short tutorials, Recorded talks from a conference or user group, In-depth online courses (e.g. Pluralsight)","Ionide
F# Power Tools
LinqPad F# support
FSharp.Formatting
Paket",
15/04/2016 18:03:48,5-10 years,Financial services or similar,"No, I don't know much theory",Experienced,"C, C#, F#",2-3 years,,I use it at work or for other commercial uses,"Windows, Linux","Visual Studio 2015 or newer, Vim, Emacs","HN, Reddit and other programming news sites, fsharp channel on Slack","Better domain modelling with records and unions, Correctness (no nulls, it works first time), Speed of development","Algebraic types (inc discriminated unions and tuples), Immutability by default, No dependency cycles, Type inference","Active Patterns, Quotations, Type providers, Units of measure","MSDN, Links and instructions from fsharp.org",I like theory -- I'm not afraid of monads and other abstractions,More material with in-depth tutorials,"I feel MSDN is terrifying if you don't know that you can ignore 80% of it while you learn (this applies to C# equally), but MSDN is probably an early entry point for many people (myself included).",Internal enterprise projects,"Utilities and tools, Financial services, Data analysis/statistics, Text analysis/language parsing",SQL databases,Windows,It's used unofficially,Domain modelling: making illegal states unrepresentable,"No perceived benefits: They don't understand what benefits F# has over C# or other languages, No buy-in: There is lack of acceptance from other teams",,,Working with C#-centric tooling,Native,The lack of higher kinds (I understand the technical reasons).,It felt a little long.,,Books or longer articles explaining full context,,
15/04/2016 18:03:51,10 or more years,Financial services or similar,"Yes, I enjoy computer science and mathematics",Expert,"C#, F#",1-2 years,,I use it at work or for other commercial uses,"Windows, Mac, Linux","Visual Studio 2015 or newer, VS Code (with Ionide)","Twitter, HN, Reddit and other programming news sites","Better domain modelling with records and unions, Conciseness of code (I can see more at a glance), Correctness (no nulls, it works first time), Great community, Speed of development","Algebraic types (inc discriminated unions and tuples), Async workflows, Easy integration with other .NET libraries, Interactive development, The ""piping"" idiom, Type inference, Type providers","Agents (MailboxProcessor), Quotations, Units of measure","Links and instructions from fsharp.org, F# bloggers, Links posted on social media such as Twitter, Answers to Stack Overflow questions, Reading F# code written by experts",I'm willing to learn advanced concepts but only if they are relevant and practical,"More material with short ""cookbook"" style information, More material with real-world examples and war stories",,Internal enterprise projects,Financial services,"SQL databases, NoSQL database, Event sourcing, Analytics",Windows,It's officially endorsed in my team for critical/production areas,"Correctness: fewer bugs and less rework, More productive with fewer developers, Faster time to market, Efficiency/Performance, Better for solving complex problems",Nothing. Everyone loves it.,,,"Not being part of the core .NET distribution, Less sophisticated tools for refactoring, etc.","LLVM, Native",,,,Reference works or documentation with API listings or short tutorials,"FSharp.Control.Reactive
Ionise F#, Fake,Packet for Visual Studio Code 
Fake
Packet/Nuget",
15/04/2016 18:04:16,10 or more years,Enterprise development,"No, I don't know much theory",Intermediate,C#,Less than a year,,I use it at work or for other commercial uses,Windows,Visual Studio 2015 or newer,"Twitter, HN, Reddit and other programming news sites, StackOverflow chat","Conciseness of code (I can see more at a glance), Correctness (no nulls, it works first time), Learning functional programming in general, Speed of development","Easy integration with other .NET libraries, Immutability by default, No dependency cycles, The ""piping"" idiom, Type inference","Active Patterns, Agents (MailboxProcessor), Async workflows, Quotations, Static type constraints, Units of measure","Links and instructions from fsharp.org, Answers to Stack Overflow questions, Videos (e.g. Community for F#), Reading F# code written by experts",I like theory -- I'm not afraid of monads and other abstractions,"More material with in-depth tutorials, More material with short ""cookbook"" style information",,"Internal enterprise projects, Commercial products",Custom development/specialist markets,SQL databases,Windows,It's officially endorsed in my team for critical/production areas,"Correctness: fewer bugs and less rework, Efficiency/Performance","Hiring: They worry about not being able to find F# developers, Fad: They have concerns over long term language viability",,Lack of good tutorials/documentation,"Not being part of the core .NET distribution, Less sophisticated tools for refactoring, etc.",Native,,,,"In-person: A talks at user groups, In-person: Attending a talks as part of a conference, Reference works or documentation with API listings or short tutorials",,
15/04/2016 18:04:47,10 or more years,Enterprise development,"No, I don't know much theory",Learner,"C#, C++, Javascript",Haven't really used it yet,,I don't use it at all,,,,,,,,I'm willing to learn advanced concepts but only if they are relevant and practical,"More material with in-depth tutorials, More material with short ""cookbook"" style information, More material with real-world examples and war stories, More short ""live coding"" videos, More podcasts and other audio-only material, More interactive tutorials (e.g. like the F# Koans)",,,,,,I don't use F# at work,,,,,,"Javascript, LLVM, Native",,"There are a lot of questions that don't apply to me, since I'm not currently learning or using F#. A ""Not Applicable"" or similar option would be helpful, or perhaps questions could just disappear when I answered earlier questions in a specific manner. For example, all work-related F# questions could disappear when I answer that I don't use it at work or a whole lot of questions could disappear when I answer that I have never actually learned F#.",,"Books or longer articles explaining full context, Reference works or documentation with API listings or short tutorials, In-depth online courses (e.g. Pluralsight)",,
15/04/2016 18:05:38,1-2 years,Enterprise development,"Yes, I enjoy computer science and mathematics",Learner,"C#, Javascript",Less than two months,,Just tinkering,"Windows, Mac","Visual Studio 2015 or newer, Sublime Text, VS Code (with Ionide)","HN, Reddit and other programming news sites",Learning functional programming in general,Easy integration with other .NET libraries,Agents (MailboxProcessor),"MSDN, Links and instructions from fsharp.org, F# books, Answers to Stack Overflow questions",I'm willing to learn advanced concepts but only if they are relevant and practical,"More material with real-world examples and war stories, More interactive tutorials (e.g. like the F# Koans)",,Not applicable. None of my F# code is used by other people,None - Just playing around,"SQL databases, Read-only data sources such as feeds","Linux, Azure, Amazon Web services",I don't use F# at work,"Domain modelling: making illegal states unrepresentable, Correctness: fewer bugs and less rework, Faster time to market","No perceived benefits: They don't understand what benefits F# has over C# or other languages, Training: They are worried about getting non-F# developers up to speed, Fad: They have concerns over long term language viability",,"Lack of good tutorials/documentation, Not enough real-world code to learn from","Difficulty in troubleshooting problems, Performance issues",Javascript,,,,"Books or longer articles explaining full context, Reference works or documentation with API listings or short tutorials, In-depth online courses (e.g. Pluralsight)",,
15/04/2016 18:05:47,10 or more years,Financial services or similar,"Yes, I enjoy computer science and mathematics",Expert,"C#, C++, F#, Python, Rust",4 or more years,,I use it at work or for other commercial uses,Windows,Visual Studio 2010 or older,,"Correctness (no nulls, it works first time)","Easy integration with other .NET libraries, No dependency cycles","Agents (MailboxProcessor), Quotations, Type providers, Units of measure",F# books,I'm willing to learn advanced concepts but only if they are relevant and practical,,,Internal enterprise projects,Financial services,Not doing data centric apps,Windows,It's officially endorsed in my team for critical/production areas,"Domain modelling: making illegal states unrepresentable, Better for solving complex problems",,,Not enough real-world code to learn from,"Less sophisticated tools for refactoring, etc., Difficulty in troubleshooting problems, Performance issues",None -- I'm happy with the CLR/Mono,,,,Reference works or documentation with API listings or short tutorials,,
15/04/2016 18:09:43,2-5 years,Open source development,"Yes, I enjoy computer science and mathematics",Intermediate,"C, C#, Clojure, F#, Java, Javascript",Less than a year,,I use it for hobby or side projects,"Windows, Mac","Visual Studio 2015 or newer, VS Code (with Ionide)","F# Weekly, HN, Reddit and other programming news sites, F# bloggers","Better domain modelling with records and unions, Conciseness of code (I can see more at a glance), Correctness (no nulls, it works first time), Learning functional programming in general","Async workflows, Computation expressions, Immutability by default, Simple ""one liner"" type definitions for records and DUs, The ""piping"" idiom, Type inference","Object expressions, Object-oriented compatibility, Quotations, Static type constraints, Type providers, Units of measure","MSDN, Links and instructions from fsharp.org, F# books, F# bloggers",I like theory -- I'm not afraid of monads and other abstractions,"More material with short ""cookbook"" style information, More material with real-world examples and war stories, More interactive tutorials (e.g. like the F# Koans)","Focusing on how to write simple code easier.  Note that when I say simple, I mean in the ""Rich Hickey talk about simplicity"" simple.  Objects which don't touch each other in naughty places.  Code which has a clear execution path.  That sort of stuff.  F# makes it easier to write code that is simple.  Yet this is never emphasized that often.

Also, the notion that file order matters is absurd.  Yes, it forces you to never have cyclic dependencies.  That doesn't matter.  Human beings organize files differently than they reason about dependencies.",Open source projects,"Utilities and tools, Mainstream business & enterprise applications, Text analysis/language parsing",Not doing data centric apps,"Windows, Linux",It's used unofficially,"Correctness: fewer bugs and less rework, Easy concurrency with async and agents, Better for solving complex problems","No perceived benefits: They don't understand what benefits F# has over C# or other languages, No buy-in: There is lack of acceptance from other teams",,"Lack of good tutorials/documentation, Don't understand the compiler errors, Not enough real-world code to learn from","Lack of good wrappers for non-F# libraries, Difficulty in troubleshooting problems, Cross-platform issues",Native,"File order mattering.  I don't reason about how I order my files in the same way I reason about dependencies, and neither does anyone else I know.  And when the community fires back with, ""But that's just the F# way!"" I roll my eyes and consider them fanatics.","Perhaps some pagination?  It felt long, but I think splitting this into 2-3 pages could help.",Keep it up!  I want to see more and more people answering this survey.,"In-person: In-depth trainings (2 or 3 days), In-person: Shorter workshops focused on a specific topic (1 day), Books or longer articles explaining full context, Reference works or documentation with API listings or short tutorials","F# Power Tools
F# Data",
15/04/2016 18:11:09,5-10 years,Enterprise development,"Yes, I enjoy computer science and mathematics",Learner,Java,Less than two months,,Just tinkering,Linux,MonoDevelop,"HN, Reddit and other programming news sites","Better domain modelling with records and unions, Having fun again, Learning functional programming in general","Active Patterns, Immutability by default, Interactive development, The ""piping"" idiom, Type inference",,"Links and instructions from fsharp.org, F# books, F# bloggers",I want to learn functional programming but I don't like academic jargon,"More material with in-depth tutorials, More material with short ""cookbook"" style information, More material with real-world examples and war stories",,Not applicable. None of my F# code is used by other people,None - Just playing around,Not doing data centric apps,Linux,I don't use F# at work,,"No perceived benefits: They don't understand what benefits F# has over C# or other languages, Hiring: They worry about not being able to find F# developers, Money: They worry that good F# developers will cost too much, Training: They are worried about getting non-F# developers up to speed, Fad: They have concerns over long term language viability, Too Windows-centric: They have concerns over cross-platform issues, Too Microsoft-centric: They think it is too closely linked to Microsoft, No buy-in: There is lack of acceptance from other teams",,"Installation process, Not enough real-world code to learn from","Not being part of the core .NET distribution, Lack of good wrappers for non-F# libraries, Working with C#-centric tooling, Cross-platform issues","JVM, Native",,,,,,
15/04/2016 18:12:00,10 or more years,Commercial software/web development,"Yes, I enjoy computer science and mathematics",Intermediate,"C#, F#",2-3 years,,I use it for hobby or side projects,Windows,"Visual Studio 2015 or newer, Vim","F# Weekly, HN, Reddit and other programming news sites, fsharp channel on Slack","Better domain modelling with records and unions, Conciseness of code (I can see more at a glance), Correctness (no nulls, it works first time), Having fun again, Learning functional programming in general","Algebraic types (inc discriminated unions and tuples), Computation expressions, Immutability by default, Interactive development, The ""piping"" idiom, Type inference","Active Patterns, Object expressions, Quotations, Type providers","Personal mentoring, Reading F# code written by experts",I like theory -- I'm not afraid of monads and other abstractions,"More material with real-world examples and war stories, More interactive tutorials (e.g. like the F# Koans)",,Commercial products,Algorithm-heavy business applications (non-financial),,,I don't use F# at work,,"No perceived benefits: They don't understand what benefits F# has over C# or other languages, Hiring: They worry about not being able to find F# developers, Training: They are worried about getting non-F# developers up to speed",,Not enough real-world code to learn from,"Working with C#-centric tooling, Less sophisticated tools for refactoring, etc.",,,,,Books or longer articles explaining full context,F# Interactive made it a lot more fun to script things,
15/04/2016 18:21:15,5-10 years,Consulting,"No, I don't know much theory",Intermediate,"C#, F#, Javascript, SQL",Less than a year,,I use it at work or for other commercial uses,Windows,"Visual Studio 2015 or newer, Visual Studio 2012 or 2013","HN, Reddit and other programming news sites","Better domain modelling with records and unions, Conciseness of code (I can see more at a glance), Correctness (no nulls, it works first time), Functional but can be tweaked to get high performance","Algebraic types (inc discriminated unions and tuples), Async workflows, Backtick naming, Computation expressions, Easy integration with other .NET libraries, Immutability by default, Simple ""one liner"" type definitions for records and DUs, The ""piping"" idiom, Type inference, Type providers, Tooling?","Active Patterns, Agents (MailboxProcessor), Quotations, Static type constraints, Units of measure",MSDN,I like theory -- I'm not afraid of monads and other abstractions,More material with real-world examples and war stories,"I feel you need a strong understanding of .NET (and C# to some extent) to be able to use f# efficently. I think moree tooling Like c# has (intellisense, lightbulb) and better error messaging (when for exempel calling c# idioms from f#) can help greatly.",Internal enterprise projects,Mainstream business & enterprise applications,"SQL databases, Data integration and EAI","Windows, Azure",It's officially endorsed in my team for critical/production areas,"Domain modelling: making illegal states unrepresentable, Correctness: fewer bugs and less rework, Easy concurrency with async and agents",Weird question,,"Lack of good tutorials/documentation, Not enough real-world code to learn from","Not being part of the core .NET distribution, Lack of F# friendly libraries, Lack of good wrappers for non-F# libraries, Working with C#-centric tooling, Less sophisticated tools for refactoring, etc., Difficulty in troubleshooting problems","Javascript, LLVM",,"Some of the questions are weird, Like strong acadmic background and then ask IF you enjoy CS and math.",,"In-person: Attending a talks as part of a conference, Reference works or documentation with API listings or short tutorials, Recorded talks from a conference or user group",F# powertools,
15/04/2016 18:31:27,2-5 years,Student,"Yes, I enjoy computer science and mathematics",Learner,"Java, Python",Less than two months,,Just tinkering,Windows,Sublime Text,F# bloggers,"Conciseness of code (I can see more at a glance), Correctness (no nulls, it works first time), Learning functional programming in general","Agents (MailboxProcessor), Easy integration with other .NET libraries, Immutability by default",Interactive development,"Links and instructions from fsharp.org, F# bloggers",I like theory -- I'm not afraid of monads and other abstractions,"More material with in-depth tutorials, More short ""live coding"" videos, More interactive tutorials (e.g. like the F# Koans)","- Better documentation examples.
- More general: how to go from basic functional programming examples to full blown applications (with networking, disk read/writes etc.)

Especially the second point would be very valuable, not just for F# but also for functional programming in general (and Haskell).",Not applicable. None of my F# code is used by other people,None - Just playing around,Not doing data centric apps,Windows,I don't use F# at work,,,,"Lack of good tutorials/documentation, Installation process, I can't use my knowledge from C# or other imperative languages",,"LLVM, Native",,,,"In-person: In-depth trainings (2 or 3 days), In-person: Shorter workshops focused on a specific topic (1 day), Books or longer articles explaining full context, Reference works or documentation with API listings or short tutorials",,
15/04/2016 18:40:35,5-10 years,Enterprise development,"No, I don't know much theory",Intermediate,"C#, Elixir, F#",Less than a year,,Just tinkering,Windows,Visual Studio 2015 or newer,"F# Weekly, HN, Reddit and other programming news sites, F# bloggers","Better domain modelling with records and unions, Conciseness of code (I can see more at a glance), Learning functional programming in general","Active Patterns, Backtick naming, Immutability by default, The ""piping"" idiom, Type inference, Type providers","Agents (MailboxProcessor), Computation expressions","MSDN, F# books, Links mentioned in F# Weekly",I'm willing to learn advanced concepts but only if they are relevant and practical,"More material with in-depth tutorials, More material with short ""cookbook"" style information",,Not applicable. None of my F# code is used by other people,"Utilities and tools, Non-commercial web site/app, Data analysis/statistics, Text analysis/language parsing","SQL databases, Read-only data sources such as feeds",Windows,I don't use F# at work,,No perceived benefits: They don't understand what benefits F# has over C# or other languages,,Don't understand the compiler errors,"Not being part of the core .NET distribution, Working with C#-centric tooling",,,,,Books or longer articles explaining full context,F# Power Tools,
15/04/2016 18:43:54,10 or more years,Consulting,"No, I don't know much theory",Intermediate,"C#, Javascript",I was using F# but have stopped,"Tried it out, moved on to trying out other things. Was only ever testing the waters.",Just tinkering,Windows,"Visual Studio 2015 or newer, Visual Studio 2012 or 2013",Google groups,"Learning functional programming in general, already know .NET","Easy integration with other .NET libraries, Interactive development, The ""piping"" idiom, Type inference, Units of measure",,F# bloggers,I want to learn functional programming but I don't like academic jargon,,,Not applicable. None of my F# code is used by other people,None - Just playing around,Not doing data centric apps,Windows,I don't use F# at work,,No perceived benefits: They don't understand what benefits F# has over C# or other languages,"Become more popular overall. (Sorry, I know you're trying.)
",,"Difficulty in troubleshooting problems, lots of very terse syntax",,"Hardly anyone uses it. Also, it's fairly difficult to learn, at least for me.

I wish F# was more popular, it would be easier to convince myself to put in more effort to learn it. I do think it would expand my horizons if I learned it properly.
",,,,,
15/04/2016 18:44:14,10 or more years,Commercial software/web development,"No, I don't know much theory",Experienced,"C#, F#, Javascript",1-2 years,,I use it at work or for other commercial uses,Windows,"Visual Studio 2015 or newer, Atom (with Ionide)","Twitter, F# bloggers, fsharp channel on Slack","Better domain modelling with records and unions, Conciseness of code (I can see more at a glance), Correctness (no nulls, it works first time), Great community, Having fun again, Learning functional programming in general, Speed of development","Algebraic types (inc discriminated unions and tuples), Async workflows, Computation expressions, Immutability by default, Interactive development, No dependency cycles, Simple ""one liner"" type definitions for records and DUs, The ""piping"" idiom, Type inference, Type providers","Agents (MailboxProcessor), Object-oriented compatibility, Quotations, Units of measure","F# bloggers, Links posted on social media such as Twitter, Links mentioned in F# Weekly, Videos (e.g. Community for F#), Reading F# code written by experts",I like theory -- I'm not afraid of monads and other abstractions,More material with real-world examples and war stories,,"Internal enterprise projects, Commercial products, Open source projects","Utilities and tools, Algorithm-heavy business applications (non-financial), Custom development/specialist markets, Mainstream business & enterprise applications, Commercial web site/app, Non-commercial web site/app",SQL databases,"Windows, Azure",It's officially endorsed in my team for critical/production areas,"Domain modelling: making illegal states unrepresentable, Correctness: fewer bugs and less rework, More productive with fewer developers, Faster time to market, Efficiency/Performance, Easy concurrency with async and agents, Better for solving complex problems",Nothing. Everyone loves it.,,"Lack of good tutorials/documentation, Not enough real-world code to learn from","Not being part of the core .NET distribution, Working with C#-centric tooling",Native,"So much dependence on Microsoft.  Making sure F# is included on Microsoft's radar is a constant struggle and leads to the community being perceived as ""irritatingly vocal"".",,,,,
15/04/2016 18:45:31,10 or more years,Commercial software/web development,"Yes, I enjoy computer science and mathematics",Experienced,"C#, F#, Javascript, Ocaml/SML, Python, R, Typescript",2-3 years,,I use it for hobby or side projects,"Windows, Linux","Visual Studio 2015 or newer, Vim, VS Code (with Ionide)","F# Weekly, HN, Reddit and other programming news sites","Better domain modelling with records and unions, Conciseness of code (I can see more at a glance), Correctness (no nulls, it works first time), Speed of development, type providers","Active Patterns, Easy integration with other .NET libraries, Immutability by default, The ""piping"" idiom, Type inference, Type providers","Agents (MailboxProcessor), Object expressions, Units of measure","MSDN, F# bloggers, Links mentioned in F# Weekly, Videos (e.g. Community for F#), Reading F# code written by experts",I'm willing to learn advanced concepts but only if they are relevant and practical,"More material with in-depth tutorials, More material with short ""cookbook"" style information, More material with real-world examples and war stories, More short ""live coding"" videos, More podcasts and other audio-only material",,"Internal enterprise projects, Not applicable. None of my F# code is used by other people","Utilities and tools, Financial services, Machine learning, Data analysis/statistics, Text analysis/language parsing","Read-only data sources such as feeds, Analytics","Windows, Azure, Amazon Web services",It's used unofficially,"Domain modelling: making illegal states unrepresentable, Correctness: fewer bugs and less rework, More productive with fewer developers, Efficiency/Performance, Easy concurrency with async and agents, Better for solving complex problems","No perceived benefits: They don't understand what benefits F# has over C# or other languages, Hiring: They worry about not being able to find F# developers, Fad: They have concerns over long term language viability",,Not enough real-world code to learn from,"Not being part of the core .NET distribution, Lack of F# friendly libraries, Lack of good wrappers for non-F# libraries","Javascript, LLVM, Native",,,,"Books or longer articles explaining full context, Reference works or documentation with API listings or short tutorials, Recorded talks from a conference or user group",,
15/04/2016 18:46:49,10 or more years,telco consultant,"Yes, I enjoy computer science and mathematics",Experienced,"Erlang, F#, Scheme/CL",Less than a year,,I use it for hobby or side projects,Linux,Emacs,"F# Weekly, HN, Reddit and other programming news sites","Better domain modelling with records and unions, Correctness (no nulls, it works first time), Having fun again","Algebraic types (inc discriminated unions and tuples), Immutability by default, Interactive development, Type inference",,"F# books, F# bloggers, Links mentioned in F# Weekly, Answers to Stack Overflow questions, Reading F# code written by experts",I like theory -- I'm not afraid of monads and other abstractions,"More material with in-depth tutorials, More material with short ""cookbook"" style information, More material with real-world examples and war stories",,,Other,Not doing data centric apps,,I don't use F# at work,,,,"too much focused on VS & Windows, not clear go-to site for Linux & Emacs & project setup outside of VS ","Cross-platform issues, currently many libraries limited to Windows","LLVM, Native, webassembly",not smart enough type inference for records,,,"Books or longer articles explaining full context, In-depth online courses (e.g. Pluralsight)","Akka
Aether",
15/04/2016 18:52:30,10 or more years,Commercial software/web development,"No, I don't know much theory",Experienced,"C#, Javascript",1-2 years,,Just tinkering,"Windows, Linux","Visual Studio 2015 or newer, Visual Studio 2012 or 2013, VS Code (with Ionide)","HN, Reddit and other programming news sites","Conciseness of code (I can see more at a glance), Having fun again, Learning functional programming in general, Functional but can be tweaked to get high performance","Active Patterns, Async workflows, Easy integration with other .NET libraries, Interactive development, Type inference",,"Links and instructions from fsharp.org, F# books, Answers to Stack Overflow questions",I'm willing to learn advanced concepts but only if they are relevant and practical,"More material with short ""cookbook"" style information, More material with real-world examples and war stories",,Not applicable. None of my F# code is used by other people,"Utilities and tools, Non-commercial web site/app","SQL databases, NoSQL database","Windows, Linux",I don't use F# at work,,No perceived benefits: They don't understand what benefits F# has over C# or other languages,,Not enough real-world code to learn from,,"LLVM, Native",,,,"Books or longer articles explaining full context, Reference works or documentation with API listings or short tutorials",,
15/04/2016 18:52:34,10 or more years,Commercial software/web development,"Yes, I enjoy computer science and mathematics",Intermediate,Python,Haven't really used it yet,,,"Mac, Linux",Emacs,,,,,,I'm willing to learn advanced concepts but only if they are relevant and practical,"More material with in-depth tutorials, More material with real-world examples and war stories",,,,,,,,,,,,,,,,"Books or longer articles explaining full context, Reference works or documentation with API listings or short tutorials, Recorded talks from a conference or user group",,
15/04/2016 18:57:49,10 or more years,Commercial software/web development,"No, I don't know much theory",Learner,C#,Haven't really used it yet,,Just tinkering,"Windows, Mac, Linux","Visual Studio 2015 or newer, VS Code (with Ionide)","F# Weekly, HN, Reddit and other programming news sites, F# bloggers","Conciseness of code (I can see more at a glance), Correctness (no nulls, it works first time), Learning functional programming in general","Easy integration with other .NET libraries, Immutability by default, The ""piping"" idiom, Type inference","Agents (MailboxProcessor), Units of measure","F# books, Links mentioned in F# Weekly, Videos (e.g. Community for F#)",I'm willing to learn advanced concepts but only if they are relevant and practical,"More material with in-depth tutorials, More material with short ""cookbook"" style information, More material with real-world examples and war stories, More short ""live coding"" videos, More podcasts and other audio-only material, More interactive tutorials (e.g. like the F# Koans)",,,,,,I don't use F# at work,,,,"Lack of good tutorials/documentation, Installation process, Not enough real-world code to learn from","Not being part of the core .NET distribution, Working with C#-centric tooling","LLVM, Native",,,,"Books or longer articles explaining full context, Reference works or documentation with API listings or short tutorials, Recorded talks from a conference or user group, In-depth online courses (e.g. Pluralsight)","1. LINQPad
2. Interactive coding
",
15/04/2016 19:00:25,10 or more years,Enterprise development,"Yes, I enjoy computer science and mathematics",Intermediate,"C#, Python",Less than a year,,I use it for hobby or side projects,Windows,"Visual Studio 2015 or newer, Visual Studio 2012 or 2013","HN, Reddit and other programming news sites","Having fun again, Learning functional programming in general","Algebraic types (inc discriminated unions and tuples), Easy integration with other .NET libraries, Immutability by default, Type inference",,,I'm willing to learn advanced concepts but only if they are relevant and practical,"More material with real-world examples and war stories, More short ""live coding"" videos",,Not applicable. None of my F# code is used by other people,None - Just playing around,Not doing data centric apps,Windows,I don't use F# at work,,,,Not enough real-world code to learn from,,"JVM, Javascript",,,,"Books or longer articles explaining full context, Reference works or documentation with API listings or short tutorials, Recorded talks from a conference or user group",,
15/04/2016 19:05:32,10 or more years,Enterprise development,"No, I don't know much theory",Intermediate,"C#, F#",4 or more years,,I use it at work or for other commercial uses,Windows,Visual Studio 2012 or 2013,Twitter,"Better domain modelling with records and unions, Conciseness of code (I can see more at a glance), Correctness (no nulls, it works first time), Speed of development","Algebraic types (inc discriminated unions and tuples), Immutability by default, No dependency cycles, Simple ""one liner"" type definitions for records and DUs, The ""piping"" idiom, Type inference, Type providers","Active Patterns, Agents (MailboxProcessor), Computation expressions, Integration with non-F# libraries, Object expressions, Quotations, Static type constraints","F# bloggers, Links posted on social media such as Twitter",I like theory -- I'm not afraid of monads and other abstractions,"More material with in-depth tutorials, More material with real-world examples and war stories",,"Internal enterprise projects, Open source projects","Utilities and tools, Mainstream business & enterprise applications",SQL databases,Windows,,"Domain modelling: making illegal states unrepresentable, Correctness: fewer bugs and less rework, More productive with fewer developers, Faster time to market, Better for solving complex problems","No perceived benefits: They don't understand what benefits F# has over C# or other languages, Training: They are worried about getting non-F# developers up to speed",,,Working with C#-centric tooling,Native,,,,"In-person: Shorter workshops focused on a specific topic (1 day), In-person: A talks at user groups, Recorded talks from a conference or user group","Fake, Suave, Paket, unquote",
15/04/2016 19:09:27,5-10 years,Data or analytics related,"Yes, I enjoy computer science and mathematics",Intermediate,"C#, C++, F#, Java",4 or more years,,I use it for research or academic work,Windows,"Visual Studio 2015 or newer, Atom (with Ionide), VS Code (with Ionide)","F# Weekly, F# bloggers, fsharp channel on Slack","Better domain modelling with records and unions, Conciseness of code (I can see more at a glance), Correctness (no nulls, it works first time), Great community, Having fun again, Speed of development","Agents (MailboxProcessor), Algebraic types (inc discriminated unions and tuples), Computation expressions, Easy integration with other .NET libraries, Immutability by default, Simple ""one liner"" type definitions for records and DUs, The ""piping"" idiom, Type providers","Interactive development, Object expressions, Quotations","F# books, Links mentioned in F# Weekly, Videos (e.g. Community for F#)",I'm willing to learn advanced concepts but only if they are relevant and practical,"More material with in-depth tutorials, More material with short ""cookbook"" style information, More interactive tutorials (e.g. like the F# Koans)","I found some materiel harder because it assumes familiarity.
web-sharper material assumes familiarity with web development.
web dev -> fsharp

fparsec assumes familiarity with parsec and that lenses library assumes familiarity with lenses.
fp dev -> fsharp


I find that a lot of material will take someone form
C# (OO) dev -> fsharp dev
Haskell (FP) dev -> fsharp dev
I would like more
fsharp dev -> advanced FP fsharp dev
fsharp dev -> fsharp web dev
",Not applicable. None of my F# code is used by other people,"Utilities and tools, Algorithm-heavy business applications (non-financial), Machine learning, Mainstream business & enterprise applications, Non-commercial web site/app, Text analysis/language parsing",,"Windows, Azure",starting my own,"Domain modelling: making illegal states unrepresentable, Correctness: fewer bugs and less rework, More productive with fewer developers, Faster time to market, Efficiency/Performance, Easy concurrency with async and agents","Fad: They have concerns over long term language viability, Too Windows-centric: They have concerns over cross-platform issues",,"Not enough real-world code to learn from, document your libraries as if its life depended on it because it does","Working with C#-centric tooling, Cross-platform issues","None -- I'm happy with the CLR/Mono, Native","The most infuriating is when some company or project call their library a .NET library when really it is just a C# library, or they say 'We support .NET' when they really mean 'We are C# only'. 

Microsoft needs to make sure the term 'Full .NET Support' means just that.

Also, Don Syme should consider letting us have a meta-programming goody, needn't be crazy just something like a more advanced type provider capability or type classes.",,,"Books or longer articles explaining full context, Reference works or documentation with API listings or short tutorials, Recorded talks from a conference or user group, Slack Channel","XAML type provider
CSV type provider
FSharp.Data",
15/04/2016 19:09:27,10 or more years,Enterprise development,"Yes, I enjoy computer science and mathematics",Experienced,C#,Less than a year,,I use it for hobby or side projects,Windows,Visual Studio 2015 or newer,"HN, Reddit and other programming news sites",Having fun again,"Immutability by default, Type inference",,,I like theory -- I'm not afraid of monads and other abstractions,"More material with in-depth tutorials, More material with real-world examples and war stories",,Not applicable. None of my F# code is used by other people,"Algorithm-heavy business applications (non-financial), Financial services",Event sourcing,,It's used unofficially,"Domain modelling: making illegal states unrepresentable, Better for solving complex problems",Training: They are worried about getting non-F# developers up to speed,,Not enough real-world code to learn from,"Less sophisticated tools for refactoring, etc.",None -- I'm happy with the CLR/Mono,,,,"In-person: In-depth trainings (2 or 3 days), In-person: A talks at user groups, In-depth online courses (e.g. Pluralsight)",,
15/04/2016 19:18:09,10 or more years,Financial services or similar,"No, I don't know much theory",Learner,"C#, F#, Javascript",1-2 years,,Trying to find an excuse to use it at work in a way that won't cause push-back from my coworkers and bosses,Windows,"Visual Studio 2015 or newer, Visual Studio 2012 or 2013","HN, Reddit and other programming news sites, F# bloggers",Learning functional programming in general,"Active Patterns, Algebraic types (inc discriminated unions and tuples), Async workflows, Easy integration with other .NET libraries, Immutability by default, Object-oriented features (inc. C# compatibility, conciseness), Quotations, Simple ""one liner"" type definitions for records and DUs, The ""piping"" idiom, Type inference, Type providers, Units of measure",Agents (MailboxProcessor),"MSDN, Links and instructions from fsharp.org, F# books, F# bloggers, Answers to Stack Overflow questions, Reading F# code written by experts",I like theory -- I'm not afraid of monads and other abstractions,"More material with in-depth tutorials, More material with short ""cookbook"" style information, More interactive tutorials (e.g. like the F# Koans)",,"Not applicable. None of my F# code is used by other people, I wrote some helper console utilities at work but haven't been able to get traction on coworkers using it because it is F#.  My new approach is to release them as binaries directly and neglect to mention they are written in F#.  Then, maybe if they start using them and want to tweak them, I can use that as an opportunity to sell F#.  Or, I get yelled at.  Either way.","None - Just playing around, Utilities and tools, Financial services","SQL databases, Read-only data sources such as feeds, Data integration and EAI","Windows, Amazon Web services",It's used unofficially,Domain modelling: making illegal states unrepresentable,"No perceived benefits: They don't understand what benefits F# has over C# or other languages, Hiring: They worry about not being able to find F# developers, Training: They are worried about getting non-F# developers up to speed, Fad: They have concerns over long term language viability, No buy-in: There is lack of acceptance from other teams","How about a ""F# Quotation Provider for C#"".  I would use it to replace my coworkers' highly verbose reflection code in C# that does data modelling by using F# quotations within a .cs file (not a fs or fsx).","Lack of good tutorials/documentation, Don't understand the compiler errors, Not enough real-world code to learn from",Difficulty in troubleshooting problems,"Javascript, LLVM",Overcoming it's association with the old VB.NET community (who program in .NET as if it was VB6) and not being respected by the hardcore crowd as a result.,"Instead of cheekboxes for multiple choice, allow us to rank the choices.",,"Books or longer articles explaining full context, Reference works or documentation with API listings or short tutorials, In-depth online courses (e.g. Pluralsight)",,
15/04/2016 19:24:06,10 or more years,Commercial software/web development,"Yes, I enjoy computer science and mathematics",Experienced,"C#, Python",Less than a year,,Just tinkering,,"Visual Studio 2015 or newer, LinqPad",,"Conciseness of code (I can see more at a glance), Correctness (no nulls, it works first time)","Active Patterns, Algebraic types (inc discriminated unions and tuples), Computation expressions, Easy integration with other .NET libraries, Immutability by default, The ""piping"" idiom, Type inference",,"Links and instructions from fsharp.org, Personal mentoring",I like theory -- I'm not afraid of monads and other abstractions,,,,,,,I don't use F# at work,,"Hiring: They worry about not being able to find F# developers, Training: They are worried about getting non-F# developers up to speed",,Don't understand the compiler errors,Lack of good wrappers for non-F# libraries,,,"* bigger check-boxes for faster clicking
* expand sections only if relevant",,"Books or longer articles explaining full context, Reference works or documentation with API listings or short tutorials",,
15/04/2016 19:33:23,10 or more years,"Academic, research, or related","Yes, I enjoy computer science and mathematics",Experienced,"C, F#, Python",4 or more years,,I use it for research or academic work,"Windows, Mac","Visual Studio 2012 or 2013, Sublime Text",,"Conciseness of code (I can see more at a glance), Correctness (no nulls, it works first time), Speed of development, Functional but can be tweaked to get high performance","Algebraic types (inc discriminated unions and tuples), Easy integration with other .NET libraries, Immutability by default, Type inference","Active Patterns, Agents (MailboxProcessor), Async workflows, Object expressions, Object-oriented compatibility, Units of measure","MSDN, Links and instructions from fsharp.org, F# bloggers, Answers to Stack Overflow questions, Reading F# code written by experts",I'm willing to learn advanced concepts but only if they are relevant and practical,"More material with in-depth tutorials, More interactive tutorials (e.g. like the F# Koans)",,Open source projects,"Utilities and tools, Research/Teaching, Data analysis/statistics","SQL databases, Read-only data sources such as feeds, Analytics","Windows, Mac, WinPhone",It's used unofficially,"Correctness: fewer bugs and less rework, More productive with fewer developers, Better for solving complex problems","Too Windows-centric: They have concerns over cross-platform issues, Too Microsoft-centric: They think it is too closely linked to Microsoft",,Not enough real-world code to learn from,"Lack of F# friendly libraries, Working with C#-centric tooling, Performance issues","None -- I'm happy with the CLR/Mono, Javascript, LLVM, Native",,,,"In-person: Attending a talks as part of a conference, Books or longer articles explaining full context, Reference works or documentation with API listings or short tutorials",,
15/04/2016 19:37:03,10 or more years,Enterprise development,"Yes, I enjoy computer science and mathematics",Intermediate,"C#, F#, Javascript",3-4 years,,I use it for hobby or side projects,Windows,"Visual Studio 2012 or 2013, Xamarin, Emacs","Twitter, F# Weekly, Google+, F# bloggers, fsharp channel on Slack","Better domain modelling with records and unions, Correctness (no nulls, it works first time), Great community, Having fun again, Learning functional programming in general","Active Patterns, Algebraic types (inc discriminated unions and tuples), No dependency cycles, The ""piping"" idiom",Computation expressions,"Links and instructions from fsharp.org, F# books, F# bloggers, Links posted on social media such as Twitter, Links mentioned in F# Weekly",I like theory -- I'm not afraid of monads and other abstractions,"More material with in-depth tutorials, More material with real-world examples and war stories",,Not applicable. None of my F# code is used by other people,"Utilities and tools, Machine learning, Data analysis/statistics","SQL databases, Analytics",,,Correctness: fewer bugs and less rework,"No perceived benefits: They don't understand what benefits F# has over C# or other languages, No buy-in: There is lack of acceptance from other teams",,Not enough real-world code to learn from,,JVM,,,,"In-person: A talks at user groups, Books or longer articles explaining full context, Recorded talks from a conference or user group",,
15/04/2016 19:40:51,10 or more years,"Academic, research, or related","Yes, I enjoy computer science and mathematics",Experienced,"C++, F#, Java, Ocaml/SML",1-2 years,,I use it for research or academic work,Linux,Emacs,"F# Weekly, F# bloggers","Conciseness of code (I can see more at a glance), Correctness (no nulls, it works first time), Learning functional programming in general","Algebraic types (inc discriminated unions and tuples), Immutability by default, Interactive development, printf that is type checked, Type inference","Agents (MailboxProcessor), Async workflows, Quotations, Static type constraints","F# books, F# bloggers",I like theory -- I'm not afraid of monads and other abstractions,"More material with real-world examples and war stories, More podcasts and other audio-only material, More interactive tutorials (e.g. like the F# Koans)",,Not applicable. None of my F# code is used by other people,"Research/Teaching, Text analysis/language parsing",Not doing data centric apps,Linux,,Fatser prototyping,Nothing. Everyone loves it.,,,"Lack of F# friendly libraries, Lack of good wrappers for non-F# libraries, Performance issues",LLVM,,,,"In-person: A talks at user groups, Books or longer articles explaining full context, Recorded talks from a conference or user group","FParsec
Z3",
15/04/2016 19:42:05,10 or more years,Financial services or similar,"Yes, I enjoy computer science and mathematics",Experienced,"C#, C++, F#, Java, Python",1-2 years,,I use it at work or for other commercial uses,Windows,"Visual Studio 2015 or newer, Vim","Twitter, F# bloggers","Better domain modelling with records and unions, Conciseness of code (I can see more at a glance), Correctness (no nulls, it works first time), Great community, Having fun again, Learning functional programming in general","Async workflows, Computation expressions, Easy integration with other .NET libraries, Interactive development, Object-oriented features (inc. C# compatibility, conciseness), The ""piping"" idiom, Type inference, Type providers","Active Patterns, Agents (MailboxProcessor), Units of measure","MSDN, F# bloggers, Answers to Stack Overflow questions, Reading F# code written by experts",I like theory -- I'm not afraid of monads and other abstractions,"More material with short ""cookbook"" style information, More material with real-world examples and war stories",,Commercial products,"Utilities and tools, Financial services, Data analysis/statistics",Read-only data sources such as feeds,Windows,It's officially endorsed in my team for critical/production areas,"Correctness: fewer bugs and less rework, More productive with fewer developers, Easy concurrency with async and agents",Nothing. Everyone loves it.,,IDE integration and interaction with C#-created DLLs.,"Not being part of the core .NET distribution, Lack of F# friendly libraries, Working with C#-centric tooling, Less sophisticated tools for refactoring, etc.",None -- I'm happy with the CLR/Mono,,,,"Reference works or documentation with API listings or short tutorials, Recorded talks from a conference or user group",,
15/04/2016 19:44:08,5-10 years,Commercial software/web development,"No, I don't know much theory",Learner,"C#, F#, Kotlin, Typescript",Less than a year,,I use it for hobby or side projects,Windows,"Visual Studio 2015 or newer, VS Code (with Ionide)","Twitter, F# Weekly, HN, Reddit and other programming news sites, F# bloggers","Better domain modelling with records and unions, Conciseness of code (I can see more at a glance), Correctness (no nulls, it works first time), Great community, Having fun again, Learning functional programming in general, Speed of development","Immutability by default, Interactive development, No dependency cycles, Simple ""one liner"" type definitions for records and DUs, The ""piping"" idiom, Type inference, Type providers","Active Patterns, Object expressions","MSDN, Links and instructions from fsharp.org, F# books, F# bloggers, Links posted on social media such as Twitter, Links mentioned in F# Weekly, Answers to Stack Overflow questions, Videos (e.g. Community for F#)",I'm willing to learn advanced concepts but only if they are relevant and practical,"More short ""live coding"" videos","Elm-like error messages. FSharp error messages are quite hard to understand (they often seem ""backwards"") as a newcomer.",Commercial products,"Utilities and tools, Games, Commercial web site/app, Mobile apps","SQL databases, NoSQL database, Event sourcing","iOS, Android, Azure",It's used unofficially,"Domain modelling: making illegal states unrepresentable, Correctness: fewer bugs and less rework, More productive with fewer developers, Better for solving complex problems","No perceived benefits: They don't understand what benefits F# has over C# or other languages, No buy-in: There is lack of acceptance from other teams",,Don't understand the compiler errors,"Not being part of the core .NET distribution, Working with C#-centric tooling","Javascript, Native","C# being ""good enough"" and Microsoft not endorsing F# enough.",,,"Books or longer articles explaining full context, Reference works or documentation with API listings or short tutorials, Recorded talks from a conference or user group, In-depth online courses (e.g. Pluralsight)","Suave, FSharp.Data, FAKE, Ionide, VSFSharpPowerTools",
15/04/2016 19:54:14,10 or more years,Enterprise development,"Yes, I enjoy computer science and mathematics",Intermediate,"C#, F#, Java, Typescript, Delphi",1-2 years,,I use it at work or for other commercial uses,Windows,"Visual Studio 2015 or newer, VS Code (with Ionide)","F# Weekly, F# bloggers","Conciseness of code (I can see more at a glance), Learning functional programming in general, Functional but can be tweaked to get high performance","Active Patterns, Algebraic types (inc discriminated unions and tuples), Async workflows, Computation expressions, Easy integration with other .NET libraries, Immutability by default, Interactive development, printf that is type checked, The ""piping"" idiom, Type inference","Agents (MailboxProcessor), Object expressions","MSDN, Links and instructions from fsharp.org, F# bloggers, Links mentioned in F# Weekly, Answers to Stack Overflow questions, Personal mentoring, Videos (e.g. Community for F#), Reading F# code written by experts",I like theory -- I'm not afraid of monads and other abstractions,"More material with in-depth tutorials, More material with short ""cookbook"" style information, More short ""live coding"" videos",,Internal enterprise projects,"Utilities and tools, Non-commercial web site/app",SQL databases,Windows,It's officially endorsed in my team for non-critical/non-production code,"Correctness: fewer bugs and less rework, More productive with fewer developers, Better for solving complex problems","No perceived benefits: They don't understand what benefits F# has over C# or other languages, Hiring: They worry about not being able to find F# developers",,Don't understand the compiler errors,"Working with C#-centric tooling, Less sophisticated tools for refactoring, etc.","JVM, Native",,,,"In-person: A talks at user groups, In-person: Attending a talks as part of a conference, Recorded talks from a conference or user group",,
15/04/2016 19:58:06,10 or more years,Enterprise development,"Yes, I enjoy computer science and mathematics",Intermediate,"C#, F#, Javascript",Less than a year,,I use it at work or for other commercial uses,Windows,Visual Studio 2015 or newer,"Twitter, HN, Reddit and other programming news sites","Better domain modelling with records and unions, Conciseness of code (I can see more at a glance), Correctness (no nulls, it works first time), Learning functional programming in general","Algebraic types (inc discriminated unions and tuples), Async workflows, Immutability by default, The ""piping"" idiom, Type inference",Agents (MailboxProcessor),"F# bloggers, Answers to Stack Overflow questions, Videos (e.g. Community for F#)",I'm willing to learn advanced concepts but only if they are relevant and practical,,,Commercial products,"Data analysis/statistics, Other","SQL databases, NoSQL database",Windows,It's officially endorsed in my team for critical/production areas,"Domain modelling: making illegal states unrepresentable, Correctness: fewer bugs and less rework",Nothing. Everyone loves it.,,Don't understand the compiler errors,"Less sophisticated tools for refactoring, etc., Difficulty in troubleshooting problems",Javascript,,,,"Reference works or documentation with API listings or short tutorials, Recorded talks from a conference or user group",,
15/04/2016 20:04:01,10 or more years,Financial services or similar,"Yes, I enjoy computer science and mathematics",Experienced,"C#, Elixir, Erlang, F#, Ruby, Scala, Typescript",1-2 years,,Just tinkering,Windows,"Visual Studio 2015 or newer, Visual Studio 2012 or 2013, Sublime Text",F# Weekly,"Better domain modelling with records and unions, Correctness (no nulls, it works first time), Learning functional programming in general, Speed of development","Algebraic types (inc discriminated unions and tuples), Computation expressions, Easy integration with other .NET libraries, No dependency cycles, Object expressions, Object-oriented features (inc. C# compatibility, conciseness), Quotations, The ""piping"" idiom, Type inference","Interactive development, Quotations, Units of measure","Links and instructions from fsharp.org, F# books, F# bloggers, Links mentioned in F# Weekly, Videos (e.g. Community for F#), Reading F# code written by experts",I like theory -- I'm not afraid of monads and other abstractions,"More material with in-depth tutorials, More material with real-world examples and war stories, More short ""live coding"" videos",,Internal enterprise projects,"Utilities and tools, Algorithm-heavy business applications (non-financial), Financial services, Text analysis/language parsing","SQL databases, NoSQL database, Event sourcing",Windows,It's officially endorsed in my team for critical/production areas,"Domain modelling: making illegal states unrepresentable, More productive with fewer developers, Faster time to market, Efficiency/Performance, Easy concurrency with async and agents",Nothing. Everyone loves it.,,Not enough real-world code to learn from,"Not being part of the core .NET distribution, Less sophisticated tools for refactoring, etc.","None -- I'm happy with the CLR/Mono, LLVM, Native",,,,"Books or longer articles explaining full context, In-depth online courses (e.g. Pluralsight)",,
15/04/2016 20:14:34,5-10 years,Data or analytics related,"Yes, I enjoy computer science and mathematics",Experienced,Python,Less than two months,,I use it for hobby or side projects,Mac,VS Code (with Ionide),,"Conciseness of code (I can see more at a glance), Speed of development","Algebraic types (inc discriminated unions and tuples), Immutability by default, Interactive development, The ""piping"" idiom, Type inference",,"F# bloggers, Reading F# code written by experts, https://learnxinyminutes.com/docs/fsharp/",I'm willing to learn advanced concepts but only if they are relevant and practical,"More material with short ""cookbook"" style information, More interactive tutorials (e.g. like the F# Koans)",,Not applicable. None of my F# code is used by other people,"Algorithm-heavy business applications (non-financial), Machine learning, Data analysis/statistics, Text analysis/language parsing",,"Mac, Linux",It's officially endorsed in my team for non-critical/non-production code,"Domain modelling: making illegal states unrepresentable, Correctness: fewer bugs and less rework, Efficiency/Performance, Better for solving complex problems",Too Windows-centric: They have concerns over cross-platform issues,,,,LLVM,,,,"Reference works or documentation with API listings or short tutorials, Blog posts",FParsec,
15/04/2016 20:28:34,10 or more years,Commercial software/web development,"Yes, I enjoy computer science and mathematics",Expert,"C#, F#, Haskell, Javascript",3-4 years,,I use it at work or for other commercial uses,Windows,Visual Studio 2015 or newer,"F# Weekly, Google groups","Better domain modelling with records and unions, Conciseness of code (I can see more at a glance), Correctness (no nulls, it works first time)","Agents (MailboxProcessor), Algebraic types (inc discriminated unions and tuples), Computation expressions, Immutability by default, Type inference","Interactive development, Object-oriented compatibility, Units of measure",F# source,I like theory -- I'm not afraid of monads and other abstractions,I'm not looking,Higher kinds,"Commercial products, Open source projects","Utilities and tools, Custom development/specialist markets",SQL databases,Windows,It's officially endorsed in my team for critical/production areas,"Domain modelling: making illegal states unrepresentable, Correctness: fewer bugs and less rework",Large existing C# codebase,,Higher kinds,Lack of higher kinds,LLVM,Lack of higher kinds,Focus less on what beginners want,,I'm not looking,,
15/04/2016 20:31:54,10 or more years,Commercial software/web development,"Yes, I enjoy computer science and mathematics",Experienced,"Go, Java, Scala",Haven't really used it yet,,i dont use it,,,,,,,,,,,,,,,,,,,,,,,,,,,
15/04/2016 20:37:17,5-10 years,Financial services or similar,"Yes, I enjoy computer science and mathematics",Intermediate,"C#, F#, Python",Less than a year,,I use it for hobby or side projects,"Windows, Linux","Visual Studio 2015 or newer, Emacs, VS Code (with Ionide)","F# Weekly, HN, Reddit and other programming news sites, F# bloggers","Better domain modelling with records and unions, Conciseness of code (I can see more at a glance), Correctness (no nulls, it works first time), Speed of development","Algebraic types (inc discriminated unions and tuples), Async workflows, Computation expressions, Immutability by default, Interactive development, printf that is type checked, Simple ""one liner"" type definitions for records and DUs, Type inference, Type providers","Agents (MailboxProcessor), Integration with non-F# libraries, Object expressions, Object-oriented compatibility, Quotations, Units of measure",MSDN,I like theory -- I'm not afraid of monads and other abstractions,More material with in-depth tutorials,,Internal enterprise projects,"Utilities and tools, Financial services, Text analysis/language parsing","SQL databases, Read-only data sources such as feeds",Windows,It's used unofficially,"Domain modelling: making illegal states unrepresentable, Correctness: fewer bugs and less rework, More productive with fewer developers, Easy concurrency with async and agents","No perceived benefits: They don't understand what benefits F# has over C# or other languages, Training: They are worried about getting non-F# developers up to speed",,,"Lack of good wrappers for non-F# libraries, Working with C#-centric tooling",Javascript,,,,"Books or longer articles explaining full context, Reference works or documentation with API listings or short tutorials, Recorded talks from a conference or user group","FsCheck, Unquote, FParsec, Suave, FSharp.Data type providers",
15/04/2016 20:50:34,5-10 years,Enterprise development,"Yes, I enjoy computer science and mathematics",Experienced,"C#, F#",1-2 years,,I use it at work or for other commercial uses,Windows,Visual Studio 2012 or 2013,"Twitter, F# bloggers, fsharp channel on Slack","Better domain modelling with records and unions, Conciseness of code (I can see more at a glance), Correctness (no nulls, it works first time), Great community, Learning functional programming in general","Algebraic types (inc discriminated unions and tuples), Immutability by default, No dependency cycles, Simple ""one liner"" type definitions for records and DUs, The ""piping"" idiom, Type inference, Type providers","Active Patterns, Agents (MailboxProcessor), Async workflows, Units of measure","F# bloggers, Links posted on social media such as Twitter, Links mentioned in F# Weekly, Answers to Stack Overflow questions, Videos (e.g. Community for F#), Reading F# code written by experts",I like theory -- I'm not afraid of monads and other abstractions,"More material with short ""cookbook"" style information, More material with real-world examples and war stories",All the great F# libraries that exists could need much better documentation .,Internal enterprise projects,Mainstream business & enterprise applications,"SQL databases, Event sourcing",Windows,It's officially endorsed in my team for critical/production areas,"Domain modelling: making illegal states unrepresentable, Correctness: fewer bugs and less rework, Better for solving complex problems","No perceived benefits: They don't understand what benefits F# has over C# or other languages, Hiring: They worry about not being able to find F# developers, Money: They worry that good F# developers will cost too much",I don't know.,Lack of good tutorials/documentation,more difficult to debug,None -- I'm happy with the CLR/Mono,"That's not the most glaring weakness, but when doing pipelining unlike in C# (extension methods) there is not IntelliSense.

F# list/seq processing is sometimes less concise than C# LINQ syntax.",,,"In-person: In-depth trainings (2 or 3 days), Reference works or documentation with API listings or short tutorials, In-depth online courses (e.g. Pluralsight)","Chessie
FSharpx
Paket
Fake
Sql Type Provider",
15/04/2016 20:55:49,2-5 years,Enterprise development,"No, I don't know much theory",Intermediate,C#,1-2 years,,Just tinkering,"Windows, Mac","Visual Studio 2015 or newer, MonoDevelop","HN, Reddit and other programming news sites","Better domain modelling with records and unions, Correctness (no nulls, it works first time)","Agents (MailboxProcessor), Algebraic types (inc discriminated unions and tuples), Async workflows, Computation expressions","Active Patterns, Units of measure","MSDN, F# books",I'm willing to learn advanced concepts but only if they are relevant and practical,More material with in-depth tutorials,,,,,,It's used unofficially,More productive with fewer developers,"No perceived benefits: They don't understand what benefits F# has over C# or other languages, Hiring: They worry about not being able to find F# developers",,,Lack of F# friendly libraries,None -- I'm happy with the CLR/Mono,,,,Books or longer articles explaining full context,,
15/04/2016 20:59:41,5-10 years,Enterprise development,"Yes, I enjoy computer science and mathematics",Intermediate,"C#, Javascript",1-2 years,,I use it for hobby or side projects,Windows,Visual Studio 2015 or newer,Twitter,"Better domain modelling with records and unions, Conciseness of code (I can see more at a glance), Correctness (no nulls, it works first time)","Algebraic types (inc discriminated unions and tuples), Easy integration with other .NET libraries, Immutability by default, Simple ""one liner"" type definitions for records and DUs, The ""piping"" idiom, Type inference","Agents (MailboxProcessor), Units of measure","F# bloggers, Answers to Stack Overflow questions, Videos (e.g. Community for F#)",I like theory -- I'm not afraid of monads and other abstractions,More material with real-world examples and war stories,,"Internal enterprise projects, Commercial products","Utilities and tools, Financial services",,Windows,"We have some old production F#, but new development in the language is discouraged. :(",,"No perceived benefits: They don't understand what benefits F# has over C# or other languages, Training: They are worried about getting non-F# developers up to speed, No buy-in: There is lack of acceptance from other teams",,Don't understand the compiler errors,"Working with C#-centric tooling, Less sophisticated tools for refactoring, etc.",None -- I'm happy with the CLR/Mono,,,,"Books or longer articles explaining full context, Recorded talks from a conference or user group, In-depth online courses (e.g. Pluralsight)",,
15/04/2016 21:00:35,10 or more years,Commercial software/web development,"No, I don't know much theory",Learner,"C#, F#",1-2 years,,I use it at work or for other commercial uses,Windows,"Visual Studio 2015 or newer, Visual Studio 2012 or 2013, Xamarin, MonoDevelop, Emacs, VS Code (with Ionide)","Twitter, F# Weekly, Google groups, HN, Reddit and other programming news sites, F# bloggers, fsharp channel on Slack, IRC","Better domain modelling with records and unions, Conciseness of code (I can see more at a glance), Correctness (no nulls, it works first time), Speed of development, Functional but can be tweaked to get high performance","Active Patterns, Algebraic types (inc discriminated unions and tuples), Async workflows, Backtick naming, Computation expressions, Easy integration with other .NET libraries, Immutability by default, Interactive development, No dependency cycles, Simple ""one liner"" type definitions for records and DUs, The ""piping"" idiom, Type inference, Type providers, Units of measure, pattern matching","Quotations, Static type constraints","F# bloggers, Answers to Stack Overflow questions, Reading F# code written by experts",I like theory -- I'm not afraid of monads and other abstractions,"More material with in-depth tutorials, More material with short ""cookbook"" style information, More material with real-world examples and war stories, More short ""live coding"" videos",F# is easy to learn,"Internal enterprise projects, Commercial products, Open source projects","Utilities and tools, Algorithm-heavy business applications (non-financial), Mainstream business & enterprise applications, Data analysis/statistics",SQL databases,"Windows, Mac, Linux, iOS, Android, Azure",It's officially endorsed in my team for critical/production areas,"Domain modelling: making illegal states unrepresentable, Correctness: fewer bugs and less rework, More productive with fewer developers, Faster time to market, Better for solving complex problems","No perceived benefits: They don't understand what benefits F# has over C# or other languages, Hiring: They worry about not being able to find F# developers, Money: They worry that good F# developers will cost too much, Training: They are worried about getting non-F# developers up to speed, Fad: They have concerns over long term language viability, No buy-in: There is lack of acceptance from other teams","* Get MS to invest more in the language and tooling
* More real world applications / libraries / success stories
* Convince more people to actually use it in risk-free places",,"Not being part of the core .NET distribution, Lack of F# friendly libraries, Lack of good wrappers for non-F# libraries, Working with C#-centric tooling, Less sophisticated tools for refactoring, etc., FSharp.Core bindings","JVM, Javascript, LLVM, Native","Lack of buy-in from MS
Slow evolution of underlying type system and runtime features in CLR",,,"In-person: A talks at user groups, Books or longer articles explaining full context, Reference works or documentation with API listings or short tutorials, Recorded talks from a conference or user group","FSI in Visual Studio
Visual F# PowerTools
Type Providers
",
15/04/2016 21:08:21,10 or more years,Enterprise development,"Yes, I enjoy computer science and mathematics",Intermediate,C#,Less than a year,,I use it for hobby or side projects,Windows,Visual Studio 2015 or newer,,"Conciseness of code (I can see more at a glance), Having fun again, Learning functional programming in general","Easy integration with other .NET libraries, Immutability by default",,"F# books, F# bloggers",I want to learn functional programming but I don't like academic jargon,,,Not applicable. None of my F# code is used by other people,Utilities and tools,Not doing data centric apps,Windows,I don't use F# at work,,,,,"Not being part of the core .NET distribution, Working with C#-centric tooling, Less sophisticated tools for refactoring, etc.",LLVM,,,,"Books or longer articles explaining full context, Reference works or documentation with API listings or short tutorials",,
15/04/2016 21:25:43,10 or more years,Enterprise development,"No, I don't know much theory",Intermediate,"C#, F#, Javascript",1-2 years,,I use it at work or for other commercial uses,"Mac, Linux","Visual Studio 2015 or newer, MonoDevelop, VS Code (with Ionide)","F# Weekly, HN, Reddit and other programming news sites, F# bloggers, fsharp channel on Slack","Conciseness of code (I can see more at a glance), Correctness (no nulls, it works first time), Having fun again, Learning functional programming in general","Active Patterns, Agents (MailboxProcessor), Algebraic types (inc discriminated unions and tuples), Async workflows, Interactive development, Simple ""one liner"" type definitions for records and DUs, The ""piping"" idiom, Type inference","Quotations, Units of measure","F# books, F# bloggers, Links mentioned in F# Weekly, Videos (e.g. Community for F#)",I'm willing to learn advanced concepts but only if they are relevant and practical,"More material with in-depth tutorials, More material with real-world examples and war stories","Provide clear guidelines and examples for:
- Architecture and high level application composition;
- Most typical application types (yes, also CRUD);
- WEB APIs and SPAs;
- Distributed Computing (Agents / Akka.NET);
- Specific areas like database access (but don't focus on SQL Server please). Despite number of type providers, people are still falling back to Entity Framework. Find out what is the reason and provide clear guidance how to do it right and with which tools/libs.",Commercial products,"Custom development/specialist markets, Commercial web site/app, Data analysis/statistics","SQL databases, Read-only data sources such as feeds","Linux, Amazon Web services",It's used unofficially,"Correctness: fewer bugs and less rework, More productive with fewer developers, Faster time to market","No perceived benefits: They don't understand what benefits F# has over C# or other languages, Training: They are worried about getting non-F# developers up to speed, No buy-in: There is lack of acceptance from other teams",,Not enough real-world code to learn from,"Working with C#-centric tooling, Less sophisticated tools for refactoring, etc.",Native,Immature tooling on non-windows platforms.,,,"Books or longer articles explaining full context, Reference works or documentation with API listings or short tutorials, Recorded talks from a conference or user group, In-depth online courses (e.g. Pluralsight)","FSharp.Data
Ionide",
15/04/2016 21:25:56,2-5 years,Student,"Yes, I enjoy computer science and mathematics",Intermediate,"C, F#, Haskell, Java, Javascript, Ocaml/SML, Ruby, Rust, Scheme/CL",1-2 years,"Mostly just that I finished my F# projects I was working on. I used it because of the ease-of-use for developing GUIs and interacting with certain Microsoft software (mainly Excel). I've since finished that project, and F# simply isn't compelling enough for me to switch to for daily use. While many of the features are awesome, support still feels second class on GNU/Linux, especially when programming without an IDE. I'm missing some features from other languages (type classes from Haskell, first class/parameterized modules and row polymorhpism from OCaml) that make it sometimes only a third or fourth choice for a project. ",I use it for student work,"Windows, Linux","Visual Studio 2015 or newer, Emacs","Twitter, HN, Reddit and other programming news sites","Better domain modelling with records and unions, Conciseness of code (I can see more at a glance), Correctness (no nulls, it works first time), Having fun again, Speed of development","Computation expressions, Quotations, Type providers, Units of measure","Active Patterns, Agents (MailboxProcessor), Object expressions, Object-oriented compatibility",Links and instructions from fsharp.org,I like theory -- I'm not afraid of monads and other abstractions,"More short ""live coding"" videos, More interactive tutorials (e.g. like the F# Koans)",It's actually one of the easier processes I've gone through when learning a language. I was able to get a grasp of it pretty quickly and start writing code within the first week I used it.,"Open source projects, Code for programming competitions","Utilities and tools, Algorithm-heavy business applications (non-financial), Mainstream business & enterprise applications, Data analysis/statistics",NoSQL database,"Windows, Mac, Linux",I don't use F# at work,"Domain modelling: making illegal states unrepresentable, Correctness: fewer bugs and less rework, More productive with fewer developers","Too Windows-centric: They have concerns over cross-platform issues, Too Microsoft-centric: They think it is too closely linked to Microsoft",N/A,Installation process,"Not being part of the core .NET distribution, Working with C#-centric tooling, Difficulty in troubleshooting problems","LLVM, Native","I think that the biggest issue is that while (+) and certain other operators can work on multiple types, F# lacks a general solution to solve this problem (such as type classes) and the current solution just feels hacky in comparison to the Haskell approach.
I also think that it's missed out on some of OCaml's best features, namely the module system and the row polymorhpism for objects.",,,In-person: A talks at user groups,"Honestly, other than Visual Studio and a couple of emacs modes, I haven't really used any other tooling extensively. Most of the libraries I've used were just from C#.",
15/04/2016 21:41:19,2-5 years,Commercial software/web development,"No, I don't know much theory",Learner,"C#, Javascript",Less than a year,,I use it for hobby or side projects,Windows,Visual Studio 2015 or newer,"HN, Reddit and other programming news sites","Conciseness of code (I can see more at a glance), Correctness (no nulls, it works first time), Having fun again, Learning functional programming in general, Speed of development","Async workflows, Backtick naming, Simple ""one liner"" type definitions for records and DUs, The ""piping"" idiom, Type providers",,"Links and instructions from fsharp.org, F# bloggers, Links posted on social media such as Twitter, Answers to Stack Overflow questions, Personal mentoring, Structured training/workshops, Videos (e.g. Community for F#), Reading F# code written by experts",I want to learn functional programming but I don't like academic jargon,"More material with short ""cookbook"" style information, More material with real-world examples and war stories",,,"Games, Non-commercial web site/app, Mobile apps, Other","SQL databases, NoSQL database","Windows, Linux, Android, Azure, Amazon Web services",It's officially endorsed in my team for non-critical/non-production code,"Correctness: fewer bugs and less rework, More productive with fewer developers, Faster time to market","No perceived benefits: They don't understand what benefits F# has over C# or other languages, Training: They are worried about getting non-F# developers up to speed, No buy-in: There is lack of acceptance from other teams",,"Lack of good tutorials/documentation, I can't use my knowledge from C# or other imperative languages, Not enough real-world code to learn from","Not being part of the core .NET distribution, Lack of F# friendly libraries, Lack of good wrappers for non-F# libraries, Working with C#-centric tooling, Less sophisticated tools for refactoring, etc.","None -- I'm happy with the CLR/Mono, Native","Tooling
Small community",,,"In-person: Shorter workshops focused on a specific topic (1 day), In-person: Attending a talks as part of a conference, In-depth online courses (e.g. Pluralsight)",,
15/04/2016 21:41:24,10 or more years,Open source development,"Yes, I enjoy computer science and mathematics",Intermediate,"C#, Go, Coffeescript",1-2 years,I develop mostly for linux again and I'm waiting for CoreCLR ecosystem to stabilize. I'm in a holding pattern on C# right now as well for similar reasons; hard to justify the use to the rest of the company when the ecosystem is so unstable and requires a lot of knowledge to use effectively.,Just tinkering,"Windows, Linux","Visual Studio 2015 or newer, VS Code (with Ionide)",DotNet Blog,"Great community, Learning functional programming in general","Algebraic types (inc discriminated unions and tuples), Computation expressions, Easy integration with other .NET libraries, Immutability by default, Interactive development, The ""piping"" idiom, Type inference","Active Patterns, Units of measure","F# books, F# bloggers, F# For Fun and Profit",I like theory -- I'm not afraid of monads and other abstractions,"More material with in-depth tutorials, More material with real-world examples and war stories","I would really like a Nutshell type reference similar to what C# has along with the pocket reference.

Some more articles/tutorials on how to architect an F# program vs a C#(functional vs straight OOP). How is logging best handled? How do the problems popular patterns address best addressed in F#?",Not applicable. None of my F# code is used by other people,"None - Just playing around, Utilities and tools",Not doing data centric apps,"Windows, Mac, Linux",I don't use F# at work,,"No perceived benefits: They don't understand what benefits F# has over C# or other languages, Hiring: They worry about not being able to find F# developers, No buy-in: There is lack of acceptance from other teams","My workplace is HEAVY FOSS(as am I as a Systems Engineer with a heavy focus on Linux). The the Core ecosystem needs to settle down a bit and JustWork before there would be any hope of considering a dotnet technology at work. This would mean the dotnet cli is stable and working for both C# and F#, along with working with Ionide and Omnisharp via Visual Studio code.",,"Not being part of the core .NET distribution, Cross-platform issues","Javascript, Native",,,,"Books or longer articles explaining full context, Reference works or documentation with API listings or short tutorials, C# In a Nutshell -> Full Reference book.","FSI and the script file format is fantastic, but insta REPL ala LightTable/Clojure would be a game changer. Remote fsi support would be fantastic for targeting other platforms/environments.

",
15/04/2016 21:48:34,5-10 years,Enterprise development,"Yes, I enjoy computer science and mathematics",Intermediate,"C#, F#",2-3 years,,I use it for hobby or side projects,Windows,Visual Studio 2015 or newer,"F# Weekly, F# bloggers","Better domain modelling with records and unions, Conciseness of code (I can see more at a glance), Having fun again, Learning functional programming in general, Speed of development","Active Patterns, Algebraic types (inc discriminated unions and tuples), Computation expressions, Easy integration with other .NET libraries, Immutability by default, Simple ""one liner"" type definitions for records and DUs, The ""piping"" idiom, Type inference, Type providers, Units of measure",Quotations,"MSDN, Links and instructions from fsharp.org, F# books, F# bloggers, Links posted on social media such as Twitter, Links mentioned in F# Weekly, Videos (e.g. Community for F#), Reading F# code written by experts",I like theory -- I'm not afraid of monads and other abstractions,"More material with in-depth tutorials, More material with real-world examples and war stories, More short ""live coding"" videos",,Not applicable. None of my F# code is used by other people,None - Just playing around,"SQL databases, NoSQL database, Event sourcing, Read-only data sources such as feeds",Windows,I don't use F# at work,,"No perceived benefits: They don't understand what benefits F# has over C# or other languages, Fad: They have concerns over long term language viability, No buy-in: There is lack of acceptance from other teams",,,Not being part of the core .NET distribution,,,,,"Books or longer articles explaining full context, Reference works or documentation with API listings or short tutorials",,
15/04/2016 21:48:45,10 or more years,Commercial software/web development,"Yes, I enjoy computer science and mathematics",Learner,"C, C#, C++, PHP",Haven't really used it yet,,Just tinkering,Windows,Visual Studio 2012 or 2013,F# bloggers,,,,"F# books, F# bloggers",I want to learn functional programming but I don't like academic jargon,"More material with in-depth tutorials, More material with short ""cookbook"" style information",,Not applicable. None of my F# code is used by other people,"Games, Text analysis/language parsing",Not doing data centric apps,Windows,I don't use F# at work,,Too Microsoft-centric: They think it is too closely linked to Microsoft,,"Lack of good tutorials/documentation, I can't use my knowledge from C# or other imperative languages, Not enough real-world code to learn from",,None -- I'm happy with the CLR/Mono,,,,Books or longer articles explaining full context,,
15/04/2016 21:55:01,5-10 years,Commercial software/web development,"No, I don't know much theory",Intermediate,C#,4 or more years,,I use it at work or for other commercial uses,Windows,Visual Studio 2015 or newer,,Better domain modelling with records and unions,"Async workflows, Computation expressions, Easy integration with other .NET libraries, Immutability by default, Interactive development, Object expressions, Object-oriented features (inc. C# compatibility, conciseness)","Quotations, Type providers, Units of measure","F# books, F# bloggers, Reading F# code written by experts",I like theory -- I'm not afraid of monads and other abstractions,More material with real-world examples and war stories,,,"Mainstream business & enterprise applications, Text analysis/language parsing",SQL databases,Windows,It's used unofficially,"Domain modelling: making illegal states unrepresentable, Correctness: fewer bugs and less rework, Faster time to market, Easy concurrency with async and agents","Hiring: They worry about not being able to find F# developers, Training: They are worried about getting non-F# developers up to speed",,Lack of good tutorials/documentation,,None -- I'm happy with the CLR/Mono,The reluctance to declare parameter types and forcing the reader to do the Hindley-Milner dance in his head. ,,,,fparsec,
15/04/2016 21:57:53,5-10 years,Student,"No, I don't know much theory",Intermediate,"C#, F#, Rust",1-2 years,,I use it for hobby or side projects,"Windows, Linux","Visual Studio 2015 or newer, Atom (with Ionide)","F# Weekly, HN, Reddit and other programming news sites, F# bloggers","Correctness (no nulls, it works first time), Learning functional programming in general, Speed of development","Active Patterns, Algebraic types (inc discriminated unions and tuples), Immutability by default, No dependency cycles, Quotations, Simple ""one liner"" type definitions for records and DUs, The ""piping"" idiom, Type inference, Type providers","Object-oriented compatibility, Quotations, Units of measure","MSDN, F# bloggers, Links mentioned in F# Weekly, Answers to Stack Overflow questions",I'm willing to learn advanced concepts but only if they are relevant and practical,"More material with in-depth tutorials, More material with real-world examples and war stories",,Open source projects,Utilities and tools,Read-only data sources such as feeds,"Windows, Linux",,,,,"Lack of good tutorials/documentation, Not enough real-world code to learn from","Lack of F# friendly libraries, Lack of good wrappers for non-F# libraries, Working with C#-centric tooling",LLVM,,,,"Books or longer articles explaining full context, Reference works or documentation with API listings or short tutorials",,
15/04/2016 21:57:57,10 or more years,"Academic, research, or related","Yes, I enjoy computer science and mathematics",Expert,F#,4 or more years,,I use it for research or academic work,"Windows, Linux","Visual Studio 2015 or newer, Visual Studio 2012 or 2013","Twitter, F# Weekly, Google+, Google groups","Correctness (no nulls, it works first time), Speed of development","Agents (MailboxProcessor), Algebraic types (inc discriminated unions and tuples), Easy integration with other .NET libraries, No dependency cycles, Quotations, The ""piping"" idiom, Units of measure",Interactive development,"MSDN, Links mentioned in F# Weekly, Reading F# code written by experts",I like theory -- I'm not afraid of monads and other abstractions,,,Open source projects,"Utilities and tools, Research/Teaching, Text analysis/language parsing",Not doing data centric apps,"Windows, Linux, Azure",It's officially endorsed in my team for critical/production areas,"Correctness: fewer bugs and less rework, More productive with fewer developers, Faster time to market, Easy concurrency with async and agents, Better for solving complex problems",Nothing. Everyone loves it.,,,"Difficulty in troubleshooting problems, Performance issues","JVM, LLVM, Native",,,,,,
15/04/2016 21:58:06,10 or more years,Enterprise development,"Yes, I enjoy computer science and mathematics",Experienced,"C#, F#, Javascript, Typescript",3-4 years,,I use it at work or for other commercial uses,Windows,Visual Studio 2015 or newer,"Twitter, F# Weekly, Google+, F# bloggers, fsharp channel on Slack","Better domain modelling with records and unions, Conciseness of code (I can see more at a glance), Correctness (no nulls, it works first time), Great community, Speed of development","Active Patterns, Agents (MailboxProcessor), Algebraic types (inc discriminated unions and tuples), Async workflows, Computation expressions, Immutability by default, Object expressions, Simple ""one liner"" type definitions for records and DUs, The ""piping"" idiom, Type inference, Units of measure",Quotations,"F# bloggers, Links posted on social media such as Twitter, Links mentioned in F# Weekly",I want to learn functional programming but I don't like academic jargon,"More material with in-depth tutorials, More material with short ""cookbook"" style information, More material with real-world examples and war stories",,"Internal enterprise projects, Commercial products, Open source projects","Utilities and tools, Algorithm-heavy business applications (non-financial), Mainstream business & enterprise applications, Commercial web site/app","SQL databases, NoSQL database, Event sourcing, Read-only data sources such as feeds","Windows, Azure",It's used unofficially,"Domain modelling: making illegal states unrepresentable, Correctness: fewer bugs and less rework, More productive with fewer developers, Faster time to market, Efficiency/Performance, Easy concurrency with async and agents, Better for solving complex problems","No perceived benefits: They don't understand what benefits F# has over C# or other languages, Hiring: They worry about not being able to find F# developers",,Don't understand the compiler errors,"Lack of F# friendly libraries, Lack of good wrappers for non-F# libraries, Working with C#-centric tooling, Difficulty in troubleshooting problems",Javascript,,,,"Reference works or documentation with API listings or short tutorials, Recorded talks from a conference or user group","Paket
FAKE
FSharp.Formatting
FSharp.Configuration",
15/04/2016 21:58:54,5-10 years,Enterprise development,"No, I don't know much theory",Learner,C#,Less than a year,,Just tinkering,Windows,Visual Studio 2015 or newer,"F# Weekly, HN, Reddit and other programming news sites, F# bloggers","Better domain modelling with records and unions, Conciseness of code (I can see more at a glance), Correctness (no nulls, it works first time), Having fun again, Learning functional programming in general, Speed of development","Immutability by default, Simple ""one liner"" type definitions for records and DUs, Type inference, Type providers",Integration with non-F# libraries,"F# bloggers, Links mentioned in F# Weekly, Reading F# code written by experts",I'm willing to learn advanced concepts but only if they are relevant and practical,"More material with in-depth tutorials, More material with short ""cookbook"" style information, More material with real-world examples and war stories",,Not applicable. None of my F# code is used by other people,None - Just playing around,,,I don't use F# at work,,,,,Difficulty in troubleshooting problems,,,,,"Books or longer articles explaining full context, Reference works or documentation with API listings or short tutorials",,
15/04/2016 22:04:04,10 or more years,Commercial software/web development,"No, I don't know much theory",Intermediate,"C#, F#",Less than a year,,I use it at work or for other commercial uses,"Windows, Linux",Visual Studio 2015 or newer,"F# Weekly, HN, Reddit and other programming news sites","Better domain modelling with records and unions, Conciseness of code (I can see more at a glance), Correctness (no nulls, it works first time)","Agents (MailboxProcessor), Immutability by default, Simple ""one liner"" type definitions for records and DUs, The ""piping"" idiom, Type inference","Interactive development, Quotations, Units of measure","F# bloggers, Answers to Stack Overflow questions, Reading F# code written by experts",I'm willing to learn advanced concepts but only if they are relevant and practical,"More material with short ""cookbook"" style information, More material with real-world examples and war stories",,Commercial products,Custom development/specialist markets,SQL databases,"Windows, Linux, Amazon Web services",It's used unofficially,"Domain modelling: making illegal states unrepresentable, Correctness: fewer bugs and less rework, More productive with fewer developers","No perceived benefits: They don't understand what benefits F# has over C# or other languages, Hiring: They worry about not being able to find F# developers, Money: They worry that good F# developers will cost too much, Training: They are worried about getting non-F# developers up to speed, Fad: They have concerns over long term language viability",,Not enough real-world code to learn from,"Not being part of the core .NET distribution, Less sophisticated tools for refactoring, etc.",None -- I'm happy with the CLR/Mono,,,,"Books or longer articles explaining full context, Reference works or documentation with API listings or short tutorials, Recorded talks from a conference or user group, In-depth online courses (e.g. Pluralsight)",,
15/04/2016 22:13:05,5-10 years,Commercial software/web development,"Yes, I enjoy computer science and mathematics",Intermediate,"Python, Rust",Less than two months,"Started using Linux, which does not provide a lightweight F# development environment.",Just tinkering,Linux,Vim,"HN, Reddit and other programming news sites","Better domain modelling with records and unions, Conciseness of code (I can see more at a glance), Correctness (no nulls, it works first time), Having fun again, Learning functional programming in general, Speed of development, Functional but can be tweaked to get high performance","Immutability by default, The ""piping"" idiom, Type inference","Active Patterns, Agents (MailboxProcessor), Async workflows","Links and instructions from fsharp.org, F# bloggers, Reading F# code written by experts",I like theory -- I'm not afraid of monads and other abstractions,"More material with short ""cookbook"" style information, More material with real-world examples and war stories, More podcasts and other audio-only material",,,None - Just playing around,Not doing data centric apps,Linux,I don't use F# at work,,"No perceived benefits: They don't understand what benefits F# has over C# or other languages, Training: They are worried about getting non-F# developers up to speed, Too Windows-centric: They have concerns over cross-platform issues, Too Microsoft-centric: They think it is too closely linked to Microsoft, No buy-in: There is lack of acceptance from other teams",,"Lack of good tutorials/documentation, Not enough real-world code to learn from",Too heavyweight development environment,LLVM,,,,"In-person: In-depth trainings (2 or 3 days), Books or longer articles explaining full context",,
15/04/2016 22:23:09,10 or more years,Enterprise development,"No, I don't know much theory",Learner,C#,Less than two months,,I use it for hobby or side projects,Windows,Visual Studio 2015 or newer,,Learning functional programming in general,"Async workflows, The ""piping"" idiom",,"F# bloggers, Answers to Stack Overflow questions, Personal mentoring, Reading F# code written by experts",I'm willing to learn advanced concepts but only if they are relevant and practical,"More material with in-depth tutorials, More material with real-world examples and war stories, More short ""live coding"" videos",,Internal enterprise projects,"Financial services, Games",SQL databases,Windows,It's used unofficially,,"No perceived benefits: They don't understand what benefits F# has over C# or other languages, Fad: They have concerns over long term language viability","F# is still a baby language. It doesn't function in Visual Studio as well as C# and it takes longer for improvements to come to language. Someday it may be mainstream in our workplace, but it needs to be more mature.","I can't use my knowledge from C# or other imperative languages, Not enough real-world code to learn from","Less sophisticated tools for refactoring, etc., Difficulty in troubleshooting problems, Performance issues",None -- I'm happy with the CLR/Mono,,,,"Reference works or documentation with API listings or short tutorials, In-depth online courses (e.g. Pluralsight)",,
15/04/2016 22:24:28,5-10 years,Student,"Yes, I enjoy computer science and mathematics",Expert,"C#, F#, Rust, Typescript",4 or more years,,teaching a class,"Windows, Mac, Linux","Visual Studio 2015 or newer, VS Code (with Ionide)","F# Weekly, HN, Reddit and other programming news sites","Better domain modelling with records and unions, Conciseness of code (I can see more at a glance), Correctness (no nulls, it works first time), Great community, Having fun again, Learning functional programming in general, Speed of development, Conciseness of code: RSI relief","Algebraic types (inc discriminated unions and tuples), Computation expressions, No dependency cycles, Simple ""one liner"" type definitions for records and DUs, The ""piping"" idiom, Type inference, Ergonomy","Active Patterns, Agents (MailboxProcessor), Integration with non-F# libraries, Quotations, Static type constraints, Type providers","MSDN, F# bloggers, Answers to Stack Overflow questions, Personal mentoring, Tinkering",I'm willing to learn advanced concepts but only if they are relevant and practical,"More material with in-depth tutorials, More material with real-world examples and war stories, More interactive tutorials (e.g. like the F# Koans)","To make it more palatable to students: streamline the F# compiler unboxing experience on Windows, and improve delivery of VS Code + Ionide (one-click install?)

Put F# Koans, etc. on fsharp.org as a community-approved solution for getting started.

Have more war stories of how using such-and-such feature got you into/out of trouble.","Internal enterprise projects, demo code","Utilities and tools, Research/Teaching, Other",Not doing data centric apps,,I don't use F# at work,"Domain modelling: making illegal states unrepresentable, Correctness: fewer bugs and less rework, More productive with fewer developers, Faster time to market, Efficiency/Performance, Easy concurrency with async and agents, Better for solving complex problems, Attracts smart developers","No perceived benefits: They don't understand what benefits F# has over C# or other languages, Training: They are worried about getting non-F# developers up to speed",Publish case studies targeting technical managers,"Not enough real-world code to learn from, pretty much nothing","Lack of F# friendly libraries, Lack of good wrappers for non-F# libraries, Cross-platform issues",Javascript,"That it's competing with C#, which is really damned good.

PR problem: not cool enough for open source, but too cool for ""uncool"" enterprise development",,,"Books or longer articles explaining full context, Reference works or documentation with API listings or short tutorials",Ionide,
15/04/2016 22:25:14,5-10 years,Enterprise development,"Yes, I enjoy computer science and mathematics",Intermediate,"F#, Java, Javascript, Python, R",1-2 years,,I use it at work or for other commercial uses,Windows,Visual Studio 2015 or newer,"F# Weekly, HN, Reddit and other programming news sites, F# bloggers","Better domain modelling with records and unions, Conciseness of code (I can see more at a glance), Correctness (no nulls, it works first time), Having fun again, Learning functional programming in general, Speed of development","Algebraic types (inc discriminated unions and tuples), Immutability by default, Simple ""one liner"" type definitions for records and DUs, The ""piping"" idiom, Type inference, Units of measure",,"F# books, F# bloggers, Links mentioned in F# Weekly, Reading F# code written by experts",I like theory -- I'm not afraid of monads and other abstractions,"More material with in-depth tutorials, More material with short ""cookbook"" style information, More material with real-world examples and war stories",,Internal enterprise projects,"Algorithm-heavy business applications (non-financial), Machine learning, Data analysis/statistics",SQL databases,Windows,It's officially endorsed in my team for critical/production areas,"Domain modelling: making illegal states unrepresentable, Correctness: fewer bugs and less rework, More productive with fewer developers",Training: They are worried about getting non-F# developers up to speed,,I can't use my knowledge from C# or other imperative languages,Not being part of the core .NET distribution,None -- I'm happy with the CLR/Mono,,,,"Books or longer articles explaining full context, Recorded talks from a conference or user group, In-depth online courses (e.g. Pluralsight)",,
15/04/2016 22:44:55,5-10 years,Enterprise development,"Yes, I enjoy computer science and mathematics",Intermediate,"C#, F#",1-2 years,,I use it for hobby or side projects,"Mac, Linux",Emacs,"Twitter, F# Weekly, HN, Reddit and other programming news sites","Better domain modelling with records and unions, Correctness (no nulls, it works first time)","Algebraic types (inc discriminated unions and tuples), Computation expressions, Easy integration with other .NET libraries, Immutability by default, Interactive development, The ""piping"" idiom",Units of measure,"MSDN, F# bloggers, Answers to Stack Overflow questions",I'm willing to learn advanced concepts but only if they are relevant and practical,"More material with in-depth tutorials, More material with short ""cookbook"" style information, More material with real-world examples and war stories","Consider the non -Windows, non-Visual Studio audience",Open source projects,"None - Just playing around, Utilities and tools, Data analysis/statistics",SQL databases,,It's used unofficially,Quick .NET scripting,"Hiring: They worry about not being able to find F# developers, Training: They are worried about getting non-F# developers up to speed, C# is a safe choice",It's not you it's them,lack of decent project management CLI until recently,Cross-platform issues,None -- I'm happy with the CLR/Mono,"Lack of CLI project management app: we want something as good as lein or npm (which both handle dependencies, test running, building, scaffolding, etc. in a CLI-focused way that is easy to integrate into any workflow)",I'd like to know more about how companies using F# made the transition ,,Reference works or documentation with API listings or short tutorials,"Emacs fsharp-mode
Fsharp.Data
Forge will be on this list next year ",
15/04/2016 23:18:04,10 or more years,Enterprise development,"No, I don't know much theory",Intermediate,C#,2-3 years,,Spiking new functionality at work,Windows,"Visual Studio 2015 or newer, VS Code (with Ionide)","Twitter, F# Weekly, F# bloggers","Better domain modelling with records and unions, Conciseness of code (I can see more at a glance), Correctness (no nulls, it works first time), Having fun again","Algebraic types (inc discriminated unions and tuples), Easy integration with other .NET libraries, Immutability by default, Simple ""one liner"" type definitions for records and DUs, The ""piping"" idiom, Type inference",Static type constraints,"F# books, F# bloggers, Reading F# code written by experts, F# koans",I'm willing to learn advanced concepts but only if they are relevant and practical,"More material with short ""cookbook"" style information, More interactive tutorials (e.g. like the F# Koans)",,Internal enterprise projects,Utilities and tools,SQL databases,Windows,It's used unofficially,More productive with fewer developers,"No perceived benefits: They don't understand what benefits F# has over C# or other languages, Training: They are worried about getting non-F# developers up to speed, whitespace formatting feels strange","Emphasise that pattern matching, records, immutability, ADT, etc. are going to be in C#, and can't be avoided in the long run. Focus on the use of these upcoming features (as they firm up) showing both C# and F# usage. Embrace the new C# and it can become the gateway to F# for the enterprise.  ",,FSharp.Core,None -- I'm happy with the CLR/Mono,,,,"Reference works or documentation with API listings or short tutorials, In-depth online courses (e.g. Pluralsight)",FSharp.SqlClient,
15/04/2016 23:24:05,10 or more years,Enterprise development,"No, I don't know much theory",Experienced,F#,4 or more years,,I use it at work or for other commercial uses,Windows,"Visual Studio 2015 or newer, Xamarin, MonoDevelop, Atom (with Ionide)","Twitter, F# Weekly","Better domain modelling with records and unions, Conciseness of code (I can see more at a glance), Correctness (no nulls, it works first time), Great community, Having fun again, Learning functional programming in general, Speed of development, Functional but can be tweaked to get high performance","Active Patterns, Agents (MailboxProcessor), Algebraic types (inc discriminated unions and tuples), Async workflows, Backtick naming, Computation expressions, Easy integration with other .NET libraries, Immutability by default, Interactive development, No dependency cycles, Object expressions, Simple ""one liner"" type definitions for records and DUs, The ""piping"" idiom, Type inference, Type providers, Units of measure",Static type constraints,"Links and instructions from fsharp.org, F# books, F# bloggers, Links posted on social media such as Twitter, Links mentioned in F# Weekly, Answers to Stack Overflow questions, Reading F# code written by experts",I want to learn functional programming but I don't like academic jargon,More material with real-world examples and war stories,,"Internal enterprise projects, Commercial products, Open source projects","Algorithm-heavy business applications (non-financial), Financial services, Games, Machine learning, Mainstream business & enterprise applications, Commercial web site/app, Mobile apps, Research/Teaching, Data analysis/statistics, Text analysis/language parsing","SQL databases, NoSQL database, Read-only data sources such as feeds","Windows, WinPhone",It's officially endorsed in my team for critical/production areas,"Domain modelling: making illegal states unrepresentable, Correctness: fewer bugs and less rework, More productive with fewer developers, Faster time to market, Efficiency/Performance, Easy concurrency with async and agents, Better for solving complex problems",Nothing. Everyone loves it.,,Nuget,FSharp.Core version issues,"None -- I'm happy with the CLR/Mono, Javascript, Native, Web Assembly",Lack of understanding within Microsoft,,,In-person: Shorter workshops focused on a specific topic (1 day),"Ionide
FSharp.Data
Paket
FunScript
Foq",
15/04/2016 23:41:55,5-10 years,Commercial software/web development,"Yes, I enjoy computer science and mathematics",Intermediate,"F#, Javascript, Visual Basic",Less than a year,,I use it for hobby or side projects,Windows,Visual Studio 2015 or newer,"Twitter, F# Weekly, HN, Reddit and other programming news sites","Better domain modelling with records and unions, Conciseness of code (I can see more at a glance), Correctness (no nulls, it works first time), No cyclic dependencies, can open a project and immediately see the dependency hierarchy ","Backtick naming, Computation expressions, Easy integration with other .NET libraries, Immutability by default, No dependency cycles, The ""piping"" idiom, Type inference, Type providers","Active Patterns, Agents (MailboxProcessor), Units of measure","MSDN, F# bloggers, Fsharp for fun and profit",I'm willing to learn advanced concepts but only if they are relevant and practical,"More material with short ""cookbook"" style information, More material with real-world examples and war stories",,Not applicable. None of my F# code is used by other people,Commercial web site/app,"SQL databases, Event sourcing",Windows,It's used unofficially,,"Hiring: They worry about not being able to find F# developers, Money: They worry that good F# developers will cost too much",,Not enough real-world code to learn from,"Not being part of the core .NET distribution, Less sophisticated tools for refactoring, etc., WPF and desktop UIs in F# is a nightmare ",None -- I'm happy with the CLR/Mono,Neglect by Microsoft,,,"Recorded talks from a conference or user group, In-depth online courses (e.g. Pluralsight), Informal short articles","F# power tools, Chessie, FsCheck, Websharper/funscript, Sql type provider",
15/04/2016 23:59:19,5-10 years,Enterprise development,"Yes, I enjoy computer science and mathematics",Intermediate,"C#, Javascript, SQL",1-2 years,,I use it for hobby or side projects,Windows,Visual Studio 2015 or newer,"HN, Reddit and other programming news sites","Better domain modelling with records and unions, Correctness (no nulls, it works first time), Having fun again, Learning functional programming in general","Active Patterns, Algebraic types (inc discriminated unions and tuples), Easy integration with other .NET libraries, Immutability by default, No dependency cycles, Simple ""one liner"" type definitions for records and DUs, The ""piping"" idiom, Type inference, Type providers","Agents (MailboxProcessor), Computation expressions, Interactive development","Links and instructions from fsharp.org, Answers to Stack Overflow questions, FSharpForFunAndProfit",I'm willing to learn advanced concepts but only if they are relevant and practical,"More material with short ""cookbook"" style information, More material with real-world examples and war stories, More short ""live coding"" videos","Comparisons! ""You can do this in F#, here's how something similar might look in language X""",Not applicable. None of my F# code is used by other people,"None - Just playing around, Utilities and tools, Algorithm-heavy business applications (non-financial), Mainstream business & enterprise applications, Commercial web site/app, Non-commercial web site/app",SQL databases,"Windows, Azure",I don't use F# at work,,"No perceived benefits: They don't understand what benefits F# has over C# or other languages, Hiring: They worry about not being able to find F# developers, Training: They are worried about getting non-F# developers up to speed, Fad: They have concerns over long term language viability",More outspoken support and promotion from Microsoft,"Coming from an OO background, learning terminology for general functional concepts","Lack of good wrappers for non-F# libraries, Managing file / code order manually",None -- I'm happy with the CLR/Mono,"Code file order and subdirectories. One can manage order to make things work, but in a large project it can make code difficult to find and organize.",,,"Reference works or documentation with API listings or short tutorials, Recorded talks from a conference or user group",Visual F# Power Tools,
16/04/2016 00:17:08,10 or more years,Commercial software/web development,"Yes, I enjoy computer science and mathematics",Intermediate,"C#, Elixir, Java",1-2 years,,Just tinkering,Windows,Visual Studio 2012 or 2013,"HN, Reddit and other programming news sites",Having fun again,"Algebraic types (inc discriminated unions and tuples), Type inference, Type providers",,F# bloggers,I like theory -- I'm not afraid of monads and other abstractions,More material with in-depth tutorials,,Not applicable. None of my F# code is used by other people,None - Just playing around,Not doing data centric apps,,I don't use F# at work,,"Too Windows-centric: They have concerns over cross-platform issues, Too Microsoft-centric: They think it is too closely linked to Microsoft",,tool support,"Working with C#-centric tooling, Less sophisticated tools for refactoring, etc.",JVM,,,,"In-person: In-depth trainings (2 or 3 days), In-person: Shorter workshops focused on a specific topic (1 day), In-person: Attending a talks as part of a conference, Books or longer articles explaining full context, Recorded talks from a conference or user group, In-depth online courses (e.g. Pluralsight)",,
16/04/2016 00:18:47,10 or more years,Consulting,"No, I don't know much theory",Intermediate,"C#, C++, Javascript, Typescript",Less than two months,,I use it for research or academic work,Windows,"Visual Studio 2015 or newer, VS Code (with Ionide)","F# Weekly, HN, Reddit and other programming news sites, F# bloggers","Conciseness of code (I can see more at a glance), Having fun again, Learning functional programming in general","Algebraic types (inc discriminated unions and tuples), Computation expressions, Easy integration with other .NET libraries, Immutability by default, The ""piping"" idiom, Type inference",Units of measure,"MSDN, Links and instructions from fsharp.org, Links mentioned in F# Weekly, Answers to Stack Overflow questions, Reading F# code written by experts",I want to learn functional programming but I don't like academic jargon,"More material with in-depth tutorials, More material with short ""cookbook"" style information, More interactive tutorials (e.g. like the F# Koans)",,Open source projects,"Games, Text analysis/language parsing",Not doing data centric apps,"Windows, Mac, Linux",It's officially endorsed in my team for critical/production areas,"Domain modelling: making illegal states unrepresentable, Easy concurrency with async and agents, Better for solving complex problems",Nothing. Everyone loves it.,,Lack of good tutorials/documentation,"Less sophisticated tools for refactoring, etc., Difficulty in troubleshooting problems","Javascript, Native",,,,Reference works or documentation with API listings or short tutorials,,
16/04/2016 00:27:40,5-10 years,non-professional programmer,"No, I don't know much theory",Learner,"Ruby, Lua",Haven't really used it yet,,I use it for hobby or side projects,"Windows, Linux","Visual Studio 2015 or newer, Xamarin, VS Code (with Ionide)","F# Weekly, HN, Reddit and other programming news sites",Learning functional programming in general,"Immutability by default, Units of measure",,"Links and instructions from fsharp.org, F# books, Links mentioned in F# Weekly, Videos (e.g. Community for F#), Reading F# code written by experts",I'm willing to learn advanced concepts but only if they are relevant and practical,"More material with in-depth tutorials, More short ""live coding"" videos",,Not applicable. None of my F# code is used by other people,"Utilities and tools, Mobile apps",,"Windows, Mac, Linux, iOS, Android, WinPhone",I don't use F# at work,,,,Lack of good tutorials/documentation,,"JVM, Javascript, Native",,,,"Books or longer articles explaining full context, In-depth online courses (e.g. Pluralsight)",,
16/04/2016 00:54:41,5-10 years,Enterprise development,"No, I don't know much theory",Expert,F#,2-3 years,,I use it at work or for other commercial uses,Windows,"Visual Studio 2015 or newer, Vim","HN, Reddit and other programming news sites, F# bloggers, fsharp channel on Slack","Better domain modelling with records and unions, Conciseness of code (I can see more at a glance), Correctness (no nulls, it works first time), Great community, Having fun again, Speed of development","Active Patterns, Algebraic types (inc discriminated unions and tuples), Async workflows, Computation expressions, Easy integration with other .NET libraries, Immutability by default, No dependency cycles, Simple ""one liner"" type definitions for records and DUs, The ""piping"" idiom, Type inference, Units of measure","Interactive development, Quotations, Type providers","F# bloggers, Answers to Stack Overflow questions, Reading F# code written by experts, fsharpforfunandprofit",I'm willing to learn advanced concepts but only if they are relevant and practical,"More material with in-depth tutorials, More short ""live coding"" videos",Solving real problems,"Internal enterprise projects, Open source projects","Utilities and tools, Algorithm-heavy business applications (non-financial), Games, Non-commercial web site/app, Text analysis/language parsing","SQL databases, Event sourcing",Windows,It's officially endorsed in my team for critical/production areas,"Domain modelling: making illegal states unrepresentable, Correctness: fewer bugs and less rework, More productive with fewer developers, Faster time to market, Easy concurrency with async and agents, Better for solving complex problems","No perceived benefits: They don't understand what benefits F# has over C# or other languages, Hiring: They worry about not being able to find F# developers, No buy-in: There is lack of acceptance from other teams",Improve tools,Not enough real-world code to learn from,"Not being part of the core .NET distribution, Less sophisticated tools for refactoring, etc.",None -- I'm happy with the CLR/Mono,"Being an afterthought for Microsoft.
Lack of tools.
Missing a few nice features from Haskell and Scala.
Too few jobs, I'm glad I have an F# job",,,"Books or longer articles explaining full context, Reference works or documentation with API listings or short tutorials, Recorded talks from a conference or user group, In-depth online courses (e.g. Pluralsight)","F# power tool at home but it won't work on the solution at work
WebSharper",
16/04/2016 01:05:38,5-10 years,"Academic, research, or related","Yes, I enjoy computer science and mathematics",Experienced,"Haskell, Ocaml/SML",Less than a year,,Just tinkering,Linux,"Vim, Emacs","HN, Reddit and other programming news sites","Conciseness of code (I can see more at a glance), Correctness (no nulls, it works first time), Functional but can be tweaked to get high performance","Algebraic types (inc discriminated unions and tuples), Backtick naming, Quotations, Type providers","Integration with non-F# libraries, Object-oriented compatibility, Units of measure",F# books,I like theory -- I'm not afraid of monads and other abstractions,More material with in-depth tutorials,,Not applicable. None of my F# code is used by other people,Research/Teaching,Not doing data centric apps,,It's used unofficially,"Domain modelling: making illegal states unrepresentable, Correctness: fewer bugs and less rework, Efficiency/Performance, Better for solving complex problems","No perceived benefits: They don't understand what benefits F# has over C# or other languages, Too Windows-centric: They have concerns over cross-platform issues",,"No HKTs, ""typeclasses"" are clunky, module system is poor",,"LLVM, Native",,,,"Books or longer articles explaining full context, Reference works or documentation with API listings or short tutorials",,
16/04/2016 01:16:56,10 or more years,Commercial software/web development,"Yes, I enjoy computer science and mathematics",Intermediate,"C#, F#, Python",1-2 years,,I use it for hobby or side projects,Linux,"MonoDevelop, Emacs","HN, Reddit and other programming news sites","Better domain modelling with records and unions, Conciseness of code (I can see more at a glance), Correctness (no nulls, it works first time), Functional but can be tweaked to get high performance","Agents (MailboxProcessor), Algebraic types (inc discriminated unions and tuples), Async workflows, Backtick naming, Computation expressions, Easy integration with other .NET libraries, Immutability by default, printf that is type checked, Quotations, Simple ""one liner"" type definitions for records and DUs, The ""piping"" idiom, Type inference, Type providers","Active Patterns, Object expressions, Object-oriented compatibility, Units of measure","MSDN, F# bloggers",I like theory -- I'm not afraid of monads and other abstractions,,"I'm sorry, but I'm not sure.",,,,,I don't use F# at work,,Hiring: They worry about not being able to find F# developers,,,The tooling on Linux is a little weak.,Javascript,"I get frustrated with the tooling on Linux. I was really excited by FAKE, but then subsequently really annoyed that I had to somehow generate MS Build files. That meant the only way I could really use F# well on Linux was installing MonoDevelop for managing my projects, FAKE for building them, and Emacs for writing code. It's not the most wonderful environment.",,,"Books or longer articles explaining full context, Reference works or documentation with API listings or short tutorials",The most effective library has to be FSharp.Data. It's incredibly handy. I like FSharpx.Collections for its NonEmptyList -- it really helps in precise modelling. I'm obviously a fan of FAKE as well as FsUnit for writing cleaner tests.,
16/04/2016 01:21:31,10 or more years,Commercial software/web development,"No, I don't know much theory",Learner,"C#, C++, Typescript",I was using F# but have stopped,Lack of time to learn a new language.,I use it for hobby or side projects,"Windows, Linux","Visual Studio 2015 or newer, Atom (with Ionide), VS Code (with Ionide)","Twitter, F# Weekly, HN, Reddit and other programming news sites","Having fun again, Learning functional programming in general",Immutability by default,,F# books,I'm willing to learn advanced concepts but only if they are relevant and practical,"More material with in-depth tutorials, More material with real-world examples and war stories",,Not applicable. None of my F# code is used by other people,None - Just playing around,SQL databases,,I don't use F# at work,,"No perceived benefits: They don't understand what benefits F# has over C# or other languages, No buy-in: There is lack of acceptance from other teams",,,,Native,,,,"Books or longer articles explaining full context, Recorded talks from a conference or user group",,
16/04/2016 01:33:37,2-5 years,Commercial software/web development,"No, I don't know much theory",Beginner,"C#, Java",Haven't really used it yet,,Just tinkering,Windows,Visual Studio 2015 or newer,"HN, Reddit and other programming news sites",,,,"F# bloggers, Reading F# code written by experts",I want to learn functional programming but I don't like academic jargon,"More material with in-depth tutorials, More material with short ""cookbook"" style information",gamification,Not applicable. None of my F# code is used by other people,,,,,,,,,,,,,,Books or longer articles explaining full context,,
16/04/2016 01:45:55,10 or more years,Commercial software/web development,"Yes, I enjoy computer science and mathematics",Intermediate,"C#, F#, Go",3-4 years,,I use it at work or for other commercial uses,"Windows, Mac, Linux","Visual Studio 2015 or newer, Xamarin, MonoDevelop, Vim, Emacs, Atom (with Ionide), VS Code (with Ionide)","Twitter, F# Weekly","Better domain modelling with records and unions, Conciseness of code (I can see more at a glance), Correctness (no nulls, it works first time), Learning functional programming in general","Agents (MailboxProcessor), Algebraic types (inc discriminated unions and tuples), Computation expressions, Easy integration with other .NET libraries, Immutability by default, The ""piping"" idiom, Type inference, Type providers","Object expressions, Quotations, Units of measure","F# books, F# bloggers, Links posted on social media such as Twitter, Links mentioned in F# Weekly, Answers to Stack Overflow questions, Reading F# code written by experts",I like theory -- I'm not afraid of monads and other abstractions,"More material with in-depth tutorials, More material with short ""cookbook"" style information",,"Internal enterprise projects, Commercial products","Utilities and tools, Custom development/specialist markets, Mainstream business & enterprise applications, Commercial web site/app, Data analysis/statistics, Text analysis/language parsing",SQL databases,Windows,It's officially endorsed in my team for critical/production areas,"Domain modelling: making illegal states unrepresentable, Correctness: fewer bugs and less rework",Training: They are worried about getting non-F# developers up to speed,,,"Lack of F# friendly libraries, Lack of good wrappers for non-F# libraries, Working with C#-centric tooling","JVM, LLVM, Native",Microsofts short sightedness. ,,,"Books or longer articles explaining full context, Reference works or documentation with API listings or short tutorials","Fsharp power tools, suave, fsharp.configuration, fsharp.data, ionide",
16/04/2016 01:58:03,10 or more years,Commercial software/web development,"Yes, I enjoy computer science and mathematics",Intermediate,"C#, Javascript",Haven't really used it yet,,Just tinkering,Windows,Visual Studio 2015 or newer,"HN, Reddit and other programming news sites, F# bloggers","Conciseness of code (I can see more at a glance), Correctness (no nulls, it works first time), Learning functional programming in general","Algebraic types (inc discriminated unions and tuples), Async workflows, Computation expressions, Easy integration with other .NET libraries, Immutability by default, Interactive development, Quotations, The ""piping"" idiom, Type inference, Units of measure","Agents (MailboxProcessor), Object-oriented compatibility","MSDN, F# books, F# bloggers",I like theory -- I'm not afraid of monads and other abstractions,More material with in-depth tutorials,"More resource like ""Land of Lisp"" or ""The Little Schemer"" aimed at total noobs.",Not applicable. None of my F# code is used by other people,None - Just playing around,"SQL databases, Read-only data sources such as feeds",,experimentally,"Domain modelling: making illegal states unrepresentable, Correctness: fewer bugs and less rework, Better for solving complex problems","Hiring: They worry about not being able to find F# developers, Training: They are worried about getting non-F# developers up to speed",,Lack of good tutorials/documentation,,Javascript,,,,"In-person: Shorter workshops focused on a specific topic (1 day), Books or longer articles explaining full context",,
16/04/2016 02:11:26,5-10 years,Enterprise development,"No, I don't know much theory",Learner,"C#, F#, Javascript",Less than a year,,I use it at work or for other commercial uses,Windows,Visual Studio 2015 or newer,"Twitter, F# Weekly, F# bloggers","Conciseness of code (I can see more at a glance), Learning functional programming in general, Speed of development","Algebraic types (inc discriminated unions and tuples), Immutability by default, Simple ""one liner"" type definitions for records and DUs, The ""piping"" idiom, Type inference","Agents (MailboxProcessor), Type providers, Units of measure","F# bloggers, Links posted on social media such as Twitter, Links mentioned in F# Weekly, Videos (e.g. Community for F#)",I'm willing to learn advanced concepts but only if they are relevant and practical,"More material with in-depth tutorials, More material with real-world examples and war stories, More interactive tutorials (e.g. like the F# Koans)","It would be better if certain essential programming tasks did not require reliance on interop with tools designed to be used from C# as this often ends up giving an impression of an inconsistent programming model and can force one to do things a certain way just for the sake of interop. This can be detrimental during the learning process as it obfuscates many of the principles behind F# and functional programming in general. Examples include database access, authoring windows services, distributed/message programming with queues or actors, cron jobs, etc.",Internal enterprise projects,"Algorithm-heavy business applications (non-financial), Custom development/specialist markets, Other","SQL databases, Read-only data sources such as feeds, Data integration and EAI",Windows,It's used unofficially,"More productive with fewer developers, Easy concurrency with async and agents, Better for solving complex problems","Hiring: They worry about not being able to find F# developers, Training: They are worried about getting non-F# developers up to speed, Fad: They have concerns over long term language viability, No buy-in: There is lack of acceptance from other teams",F# really needs more work on first class libraries and frameworks for mainstream/enterprisey development tasks ,"Lack of good tutorials/documentation, Installation process, Not enough real-world code to learn from","Lack of F# friendly libraries, Lack of good wrappers for non-F# libraries, Working with C#-centric tooling","Javascript, LLVM, Native","Lack of first class libraries and frameworks for common/general programming. Most noticeably database access. There seems to be an over-emphasis on Type Providers rather than just focusing on type-safe language integrated data DSLs, like a SQL DSL for popular RDBMS, or a CQL DSL for Cassandra. For system/service/application databases, the value of generating types from the database is minimal, the true cost is in query construction, and providing ways to augment the database native, typically dynamic and non-composable DML/query language.",,,"Books or longer articles explaining full context, Recorded talks from a conference or user group, In-depth online courses (e.g. Pluralsight)","Visual F# Power Tools, FsCheck, Nessos Streams, Paket, Suave.io",
16/04/2016 02:12:21,5-10 years,Commercial software/web development,"Yes, I enjoy computer science and mathematics",Intermediate,"C#, F#, Java, Javascript",1-2 years,,I use it for hobby or side projects,"Windows, Linux","Visual Studio 2015 or newer, Vim","F# Weekly, HN, Reddit and other programming news sites, F# bloggers","Conciseness of code (I can see more at a glance), Correctness (no nulls, it works first time), Learning functional programming in general, Speed of development, Functional but can be tweaked to get high performance","Algebraic types (inc discriminated unions and tuples), Easy integration with other .NET libraries, Immutability by default, Object-oriented features (inc. C# compatibility, conciseness), Simple ""one liner"" type definitions for records and DUs, The ""piping"" idiom, Type inference","Agents (MailboxProcessor), Interactive development, Quotations, Type providers, Units of measure",Reading F# code written by experts,I'm willing to learn advanced concepts but only if they are relevant and practical,"More material with in-depth tutorials, More material with short ""cookbook"" style information, More material with real-world examples and war stories, More podcasts and other audio-only material",,Open source projects,"Utilities and tools, Data analysis/statistics, Text analysis/language parsing",Analytics,"Windows, Linux",I don't use F# at work,,No buy-in: There is lack of acceptance from other teams,,Lack of good tutorials/documentation,"Lack of F# friendly libraries, Less sophisticated tools for refactoring, etc., Performance issues","LLVM, Native",,,,"Books or longer articles explaining full context, Reference works or documentation with API listings or short tutorials, Recorded talks from a conference or user group",,
16/04/2016 02:35:29,Less than a year,Student,"No, I don't know much theory",Learner,"C#, Grasshopper",Haven't really used it yet,,Just tinkering,Windows,"Visual Studio 2015 or newer, VS Code (with Ionide)","HN, Reddit and other programming news sites",,,,"MSDN, F# books, Answers to Stack Overflow questions",I'm willing to learn advanced concepts but only if they are relevant and practical,"More material with short ""cookbook"" style information",That there exists an F# pocket reference just like the O'Reilly C# Pocket reference. Just a dive into the language with examples of all the features.,Not applicable. None of my F# code is used by other people,,,,I don't use F# at work,,,,Lack of good tutorials/documentation,"Less sophisticated tools for refactoring, etc.",None -- I'm happy with the CLR/Mono,,,,Books or longer articles explaining full context,,
16/04/2016 02:46:10,5-10 years,Enterprise development,"No, I don't know much theory",Intermediate,"C#, F#, Javascript",Less than a year,,I use it for hobby or side projects,Windows,"Visual Studio 2015 or newer, VS Code (with Ionide)","HN, Reddit and other programming news sites, F# bloggers","Better domain modelling with records and unions, Conciseness of code (I can see more at a glance), Correctness (no nulls, it works first time), Having fun again, Learning functional programming in general, Functional but can be tweaked to get high performance","Active Patterns, Algebraic types (inc discriminated unions and tuples), Backtick naming, Computation expressions, Easy integration with other .NET libraries, Immutability by default, Interactive development, No dependency cycles, Object expressions, Object-oriented features (inc. C# compatibility, conciseness), printf that is type checked, Quotations, Simple ""one liner"" type definitions for records and DUs, The ""piping"" idiom, Type inference, Type providers, Units of measure","Agents (MailboxProcessor), Async workflows, Computation expressions","Links and instructions from fsharp.org, Reading F# code written by experts",I want to learn functional programming but I don't like academic jargon,"More material with short ""cookbook"" style information, More material with real-world examples and war stories",,"Internal enterprise projects, Open source projects","Utilities and tools, Mainstream business & enterprise applications, Commercial web site/app","SQL databases, Read-only data sources such as feeds","Windows, Mac, Linux",It's used unofficially,"Domain modelling: making illegal states unrepresentable, Correctness: fewer bugs and less rework, More productive with fewer developers, Better for solving complex problems","No perceived benefits: They don't understand what benefits F# has over C# or other languages, Hiring: They worry about not being able to find F# developers, Training: They are worried about getting non-F# developers up to speed, Fad: They have concerns over long term language viability, No buy-in: There is lack of acceptance from other teams",,"Lack of good tutorials/documentation, Don't understand the compiler errors, Not enough real-world code to learn from","Not being part of the core .NET distribution, Working with C#-centric tooling, Less sophisticated tools for refactoring, etc., Difficulty in troubleshooting problems",None -- I'm happy with the CLR/Mono,,,,"Books or longer articles explaining full context, In-depth online courses (e.g. Pluralsight)","FsCheck, Unquote",
16/04/2016 03:00:37,10 or more years,Enterprise development,"Yes, I enjoy computer science and mathematics",Experienced,"C#, F#, Kotlin, Scala, Typescript",Less than a year,,I use it at work or for other commercial uses,Windows,Visual Studio 2015 or newer,"HN, Reddit and other programming news sites","Better domain modelling with records and unions, Conciseness of code (I can see more at a glance), Correctness (no nulls, it works first time), Speed of development","Agents (MailboxProcessor), Algebraic types (inc discriminated unions and tuples), Async workflows, Immutability by default, Object expressions, The ""piping"" idiom","Object-oriented compatibility, Quotations, Type providers, Units of measure",,I like theory -- I'm not afraid of monads and other abstractions,,,"Internal enterprise projects, Commercial products",Mainstream business & enterprise applications,"SQL databases, Event sourcing",Windows,It's officially endorsed in my team for critical/production areas,"Domain modelling: making illegal states unrepresentable, Correctness: fewer bugs and less rework, Easy concurrency with async and agents, Better for solving complex problems","Hiring: They worry about not being able to find F# developers, poor tooling","Improved Debugging: closure variables are hidden (e.g. in @this)

Go to C# Definition from F# code and vice-versa

Find all references that doesn't take 5 minutes and includes C# code",,"Not being part of the core .NET distribution, Working with C#-centric tooling, Less sophisticated tools for refactoring, etc.",None -- I'm happy with the CLR/Mono,"Tooling

No clean ad-hoc polymorphism",,,,,
16/04/2016 03:25:20,10 or more years,Enterprise development,"Yes, I enjoy computer science and mathematics",Learner,"C#, Javascript, Typescript",Less than a year,,I use it for hobby or side projects,"Windows, Mac","Visual Studio 2015 or newer, Xamarin, VS Code (with Ionide)","Twitter, F# Weekly, HN, Reddit and other programming news sites","Correctness (no nulls, it works first time), Learning functional programming in general","Async workflows, The ""piping"" idiom, Type inference, Type providers",Agents (MailboxProcessor),"MSDN, Links and instructions from fsharp.org, F# books, Links mentioned in F# Weekly",I'm willing to learn advanced concepts but only if they are relevant and practical,"More material with real-world examples and war stories, More podcasts and other audio-only material, More interactive tutorials (e.g. like the F# Koans)",,Not applicable. None of my F# code is used by other people,"None - Just playing around, Utilities and tools, Algorithm-heavy business applications (non-financial), Custom development/specialist markets","SQL databases, NoSQL database",Windows,I don't use F# at work,,"No perceived benefits: They don't understand what benefits F# has over C# or other languages, Training: They are worried about getting non-F# developers up to speed",,"Lack of good tutorials/documentation, Don't understand the compiler errors","Less sophisticated tools for refactoring, etc.",None -- I'm happy with the CLR/Mono,,,,"Books or longer articles explaining full context, Recorded talks from a conference or user group",,
16/04/2016 04:38:13,5-10 years,Student,"No, I don't know much theory",Learner,"C++, F#, D",Less than a year,,Just tinkering,Windows,Visual Studio 2015 or newer,"F# Weekly, HN, Reddit and other programming news sites","Conciseness of code (I can see more at a glance), Correctness (no nulls, it works first time), Having fun again, Learning functional programming in general, Speed of development","Active Patterns, Algebraic types (inc discriminated unions and tuples), Computation expressions, Object expressions, Object-oriented features (inc. C# compatibility, conciseness), Quotations, Simple ""one liner"" type definitions for records and DUs, The ""piping"" idiom, Type inference, Type providers",,"MSDN, Answers to Stack Overflow questions, Reading F# code written by experts",I like theory -- I'm not afraid of monads and other abstractions,"More material with in-depth tutorials, More short ""live coding"" videos",,Not applicable. None of my F# code is used by other people,None - Just playing around,,Windows,I don't use F# at work,,,,,"Lack of good wrappers for non-F# libraries, Performance issues",Native,"Performance, lack of CTFE & mixins/macros",,,"In-person: A talks at user groups, Reference works or documentation with API listings or short tutorials, Recorded talks from a conference or user group, In-depth online courses (e.g. Pluralsight)",,
16/04/2016 05:37:19,10 or more years,Enterprise development,"Yes, I enjoy computer science and mathematics",Expert,"C#, F#, Javascript, Typescript",3-4 years,,I use it at work or for other commercial uses,"Windows, Mac",Visual Studio 2015 or newer,reddit,"Better domain modelling with records and unions, Conciseness of code (I can see more at a glance), Correctness (no nulls, it works first time), Speed of development","Active Patterns, Algebraic types (inc discriminated unions and tuples), Computation expressions, Easy integration with other .NET libraries, Immutability by default, Simple ""one liner"" type definitions for records and DUs, The ""piping"" idiom, Type inference","Agents (MailboxProcessor), Quotations, Units of measure","MSDN, Links and instructions from fsharp.org, F# books, F# bloggers, Reading F# code written by experts",I like theory -- I'm not afraid of monads and other abstractions,,,Internal enterprise projects,"Utilities and tools, Mainstream business & enterprise applications",SQL databases,Windows,It's officially endorsed in my team for critical/production areas,"Domain modelling: making illegal states unrepresentable, Correctness: fewer bugs and less rework, More productive with fewer developers, Faster time to market, Efficiency/Performance, Better for solving complex problems",,,,"Less sophisticated tools for refactoring, etc.",Javascript,,,,"Books or longer articles explaining full context, Reference works or documentation with API listings or short tutorials",fparsec,
16/04/2016 05:45:24,10 or more years,Enterprise development,"Yes, I enjoy computer science and mathematics",Intermediate,"C#, F#, Rust",2-3 years,,I use it for hobby or side projects,"Windows, Linux","Visual Studio 2015 or newer, MonoDevelop, VS Code (with Ionide)","Twitter, F# Weekly","Better domain modelling with records and unions, Conciseness of code (I can see more at a glance), Correctness (no nulls, it works first time), Great community, Speed of development","Async workflows, Backtick naming, Easy integration with other .NET libraries, Immutability by default, Object expressions, printf that is type checked, Quotations, Type inference, Type providers",,"F# books, F# bloggers, Links mentioned in F# Weekly, Answers to Stack Overflow questions",I like theory -- I'm not afraid of monads and other abstractions,"More material with in-depth tutorials, More material with real-world examples and war stories",,Open source projects,"None - Just playing around, Utilities and tools","SQL databases, NoSQL database","Windows, Linux",It's used unofficially,"Correctness: fewer bugs and less rework, More productive with fewer developers, Better for solving complex problems","Hiring: They worry about not being able to find F# developers, Money: They worry that good F# developers will cost too much, No buy-in: There is lack of acceptance from other teams",,Not enough real-world code to learn from,"Working with C#-centric tooling, Less sophisticated tools for refactoring, etc.","LLVM, Native",,,,"In-person: Shorter workshops focused on a specific topic (1 day), Books or longer articles explaining full context","Suave
paket
FAKE",
16/04/2016 06:07:50,5-10 years,Commercial software/web development,"Yes, I enjoy computer science and mathematics",Beginner,"C#, Javascript, Python",Haven't really used it yet,,I use it for hobby or side projects,Windows,"Visual Studio 2015 or newer, Visual Studio 2012 or 2013","HN, Reddit and other programming news sites","Conciseness of code (I can see more at a glance), Correctness (no nulls, it works first time), Learning functional programming in general","Immutability by default, Interactive development, The ""piping"" idiom","Async workflows, Computation expressions","MSDN, F# books",I'm willing to learn advanced concepts but only if they are relevant and practical,More material with in-depth tutorials,,Not applicable. None of my F# code is used by other people,"Commercial web site/app, Non-commercial web site/app","SQL databases, NoSQL database, Event sourcing","Azure, Other",I don't use F# at work,,,,Lack of good tutorials/documentation,Lack of F# friendly libraries,"Javascript, .net core","no ""official"" instructions on how to use with the common microsoft frameworks such as asp.net mvc, web api, and WPF.",,,Books or longer articles explaining full context,,
16/04/2016 06:43:59,10 or more years,"Academic, research, or related","Yes, I enjoy computer science and mathematics",Experienced,"C, C#, F#, Python",3-4 years,,I use it for research or academic work,Windows,Visual Studio 2015 or newer,"F# Weekly, F# bloggers","Better domain modelling with records and unions, Conciseness of code (I can see more at a glance), Correctness (no nulls, it works first time)","Agents (MailboxProcessor), Algebraic types (inc discriminated unions and tuples), Easy integration with other .NET libraries, Immutability by default, The ""piping"" idiom, Type inference","Quotations, Units of measure","MSDN, F# books, F# bloggers, Answers to Stack Overflow questions",I like theory -- I'm not afraid of monads and other abstractions,"More material with short ""cookbook"" style information, More interactive tutorials (e.g. like the F# Koans)",,"Commercial products, Research projects","Utilities and tools, Research/Teaching",SQL databases,Windows,It's used unofficially,"Correctness: fewer bugs and less rework, Easy concurrency with async and agents, Better for solving complex problems","Too Windows-centric: They have concerns over cross-platform issues, Too Microsoft-centric: They think it is too closely linked to Microsoft",,,"Lack of F# friendly libraries, Lack of good wrappers for non-F# libraries, Cross-platform issues","Javascript, LLVM","Cross-platform compatibility (Mac, Linux)
Less 'hyped' compared to Go, Rust, ...
",,,"Reference works or documentation with API listings or short tutorials, In-depth online courses (e.g. Pluralsight)","Visual studio
FAKE
FsLab
Deedle
FsUnit",
16/04/2016 07:37:24,5-10 years,Commercial software/web development,"No, I don't know much theory",Learner,"C#, Javascript",Less than a year,,I use it for hobby or side projects,Windows,Visual Studio 2015 or newer,"F# Weekly, HN, Reddit and other programming news sites, F# bloggers","Correctness (no nulls, it works first time), Learning functional programming in general","Easy integration with other .NET libraries, Immutability by default, The ""piping"" idiom, Type inference, Type providers, Units of measure","Active Patterns, Agents (MailboxProcessor), Async workflows, Computation expressions, Integration with non-F# libraries, Object expressions, Object-oriented compatibility, Quotations, Static type constraints","Links and instructions from fsharp.org, F# books, F# bloggers, Links mentioned in F# Weekly, Answers to Stack Overflow questions, Videos (e.g. Community for F#), Reading F# code written by experts",I want to learn functional programming but I don't like academic jargon,"More material with short ""cookbook"" style information, More short ""live coding"" videos, More interactive tutorials (e.g. like the F# Koans)",Codecademy style online ide with challenges set along the way,Not applicable. None of my F# code is used by other people,Non-commercial web site/app,SQL databases,"Windows, Azure",I don't use F# at work,,"Training: They are worried about getting non-F# developers up to speed, No buy-in: There is lack of acceptance from other teams",,"Lack of good tutorials/documentation, I can't use my knowledge from C# or other imperative languages, Not enough real-world code to learn from","Lack of F# friendly libraries, Lack of good wrappers for non-F# libraries, Working with C#-centric tooling, Less sophisticated tools for refactoring, etc., Difficulty in troubleshooting problems",None -- I'm happy with the CLR/Mono,,,,"In-person: In-depth trainings (2 or 3 days), In-person: Attending a talks as part of a conference, In-depth online courses (e.g. Pluralsight)","Suave.io
Paket",
16/04/2016 08:12:54,10 or more years,Commercial software/web development,"No, I don't know much theory",Learner,"C#, Javascript",1-2 years,,I use it for hobby or side projects,Windows,"Visual Studio 2015 or newer, Visual Studio 2012 or 2013, Linqpad 5","F# Weekly, HN, Reddit and other programming news sites, F# bloggers","Better domain modelling with records and unions, Conciseness of code (I can see more at a glance), Correctness (no nulls, it works first time), Learning functional programming in general","Algebraic types (inc discriminated unions and tuples), Computation expressions, Easy integration with other .NET libraries, The ""piping"" idiom, Type inference",Static type constraints,"F# books, F# bloggers, Links mentioned in F# Weekly, Videos (e.g. Community for F#)",I'm willing to learn advanced concepts but only if they are relevant and practical,"More material with in-depth tutorials, More material with real-world examples and war stories, More interactive tutorials (e.g. like the F# Koans)",,Internal enterprise projects,Utilities and tools,"SQL databases, Read-only data sources such as feeds",Windows,It's used unofficially,"Domain modelling: making illegal states unrepresentable, Correctness: fewer bugs and less rework, Easy concurrency with async and agents, Better for solving complex problems","Hiring: They worry about not being able to find F# developers, Too Windows-centric: They have concerns over cross-platform issues, Too Microsoft-centric: They think it is too closely linked to Microsoft",,Not enough real-world code to learn from,Lack of good wrappers for non-F# libraries,"JVM, LLVM",,,,"Books or longer articles explaining full context, Reference works or documentation with API listings or short tutorials, In-depth online courses (e.g. Pluralsight)",,
16/04/2016 08:21:14,5-10 years,Enterprise development,"Yes, I enjoy computer science and mathematics",Experienced,"C#, Typescript",Less than two months,Syntax is overwelming,Just tinkering,Windows,Sublime Text,"HN, Reddit and other programming news sites",Learning functional programming in general,Async workflows,,Answers to Stack Overflow questions,I'm willing to learn advanced concepts but only if they are relevant and practical,,,,,,,,,,,,,,,,,,,
16/04/2016 08:25:49,10 or more years,Enterprise development,"No, I don't know much theory",Learner,"C#, F#, Javascript, Python",Less than a year,,I use it for hobby or side projects,"Windows, Mac","Visual Studio 2015 or newer, Xamarin","Twitter, HN, Reddit and other programming news sites","Better domain modelling with records and unions, Conciseness of code (I can see more at a glance), Correctness (no nulls, it works first time), Having fun again, Learning functional programming in general","Active Patterns, Algebraic types (inc discriminated unions and tuples), Easy integration with other .NET libraries, Immutability by default, Object-oriented features (inc. C# compatibility, conciseness), The ""piping"" idiom, Type inference, Type providers","Agents (MailboxProcessor), Interactive development, Units of measure","MSDN, F# bloggers, Links posted on social media such as Twitter, Answers to Stack Overflow questions, http://fsharpforfunandprofit.com/",I like theory -- I'm not afraid of monads and other abstractions,,,Not applicable. None of my F# code is used by other people,"Utilities and tools, Non-commercial web site/app, Mobile apps",SQL databases,"Windows, Mac, iOS, Android, Azure",I don't use F# at work,,,,Don't understand the compiler errors,"Working with C#-centric tooling, Less sophisticated tools for refactoring, etc., Difficulty in troubleshooting problems",None -- I'm happy with the CLR/Mono,,,,"Books or longer articles explaining full context, Reference works or documentation with API listings or short tutorials, Recorded talks from a conference or user group, In-depth online courses (e.g. Pluralsight)",Fsharp.Data.SqlClient,
16/04/2016 08:33:26,10 or more years,Enterprise development,"Yes, I enjoy computer science and mathematics",Experienced,"C#, C++, Java",I was using F# but have stopped,"Microsoft doesn't provide a development experience comparable with C# and VB.NET.

Developing GUI and Web applications always relies on two layers to be able to take advantage of Visual Studio and Blend tooling.

Zero support for UWA applications.",Occasional scripting instead of PowerShell,Windows,"Visual Studio 2015 or newer, Visual Studio 2012 or 2013","Twitter, F# Weekly",Having fun again,ML for .NET,"Type providers, Units of measure","MSDN, F# books",I like theory -- I'm not afraid of monads and other abstractions,"More material with in-depth tutorials, More material with real-world examples and war stories",,Not applicable. None of my F# code is used by other people,Utilities and tools,Not doing data centric apps,Windows,On my own PC for scripting,More pleasing than PowerShell,No perceived benefits: They don't understand what benefits F# has over C# or other languages,Feature parity with C# tooling.,,"Not being part of the core .NET distribution, Working with C#-centric tooling, Less sophisticated tools for refactoring, etc.",None -- I'm happy with the CLR/Mono,"Second class treatment from Microsoft themselves.

- Public .NET announcements always refer to VB and C#
- VS tooling for GUI and Web applications only support C#, VB and C++ (thanks C++/CX)
- No support for WP or UWA applications
- No official roadmap what is supposed to happen to F# from Microsoft, versus what is being done in other Microsoft owned languages.

Very hard to sell F# to any CTO when presented against these facts.",,,"Books or longer articles explaining full context, Recorded talks from a conference or user group",,
16/04/2016 09:01:49,2-5 years,Commercial software/web development,"No, I don't know much theory",Learner,C#,Less than a year,,I use it for hobby or side projects,Windows,Visual Studio 2015 or newer,"F# Weekly, HN, Reddit and other programming news sites, F# bloggers","Having fun again, Learning functional programming in general","Active Patterns, Easy integration with other .NET libraries, Immutability by default, Interactive development, The ""piping"" idiom, Type providers","Agents (MailboxProcessor), Async workflows, Units of measure","Links and instructions from fsharp.org, F# bloggers, Links mentioned in F# Weekly",I want to learn functional programming but I don't like academic jargon,"More material with in-depth tutorials, More material with short ""cookbook"" style information, More material with real-world examples and war stories, More short ""live coding"" videos, More podcasts and other audio-only material, More interactive tutorials (e.g. like the F# Koans)",,Not applicable. None of my F# code is used by other people,"Utilities and tools, Non-commercial web site/app, Data analysis/statistics",Read-only data sources such as feeds,Windows,I don't use F# at work,,"Training: They are worried about getting non-F# developers up to speed, No buy-in: There is lack of acceptance from other teams",,"Lack of good tutorials/documentation, Not enough real-world code to learn from",Difficulty in troubleshooting problems,None -- I'm happy with the CLR/Mono,,,,"In-person: Shorter workshops focused on a specific topic (1 day), In-person: Attending a talks as part of a conference, In-depth online courses (e.g. Pluralsight)",,
16/04/2016 09:18:05,10 or more years,Enterprise development,"Yes, I enjoy computer science and mathematics",Intermediate,"C, C#, C++, F#, Haskell, Objective-C, Ocaml/SML, Rust",2-3 years,,I use it for hobby or side projects,Windows,Visual Studio 2015 or newer,"Twitter, HN, Reddit and other programming news sites","Better domain modelling with records and unions, Conciseness of code (I can see more at a glance), Correctness (no nulls, it works first time), Speed of development","Algebraic types (inc discriminated unions and tuples), Easy integration with other .NET libraries, Immutability by default, The ""piping"" idiom, Type inference","Active Patterns, Computation expressions, Interactive development, Object expressions, Object-oriented compatibility, Quotations, Type providers, Units of measure","MSDN, F# books, Reading F# code written by experts",I like theory -- I'm not afraid of monads and other abstractions,More material with real-world examples and war stories,,Not applicable. None of my F# code is used by other people,None - Just playing around,Not doing data centric apps,,It's used unofficially,"Domain modelling: making illegal states unrepresentable, Correctness: fewer bugs and less rework, More productive with fewer developers, Faster time to market, Better for solving complex problems","No perceived benefits: They don't understand what benefits F# has over C# or other languages, Hiring: They worry about not being able to find F# developers, Training: They are worried about getting non-F# developers up to speed, No buy-in: There is lack of acceptance from other teams",,Not enough real-world code to learn from,"Lack of F# friendly libraries, Lack of good wrappers for non-F# libraries","LLVM, Native",,,,samples,,
16/04/2016 10:05:58,2-5 years,Student,"Yes, I enjoy computer science and mathematics",Intermediate,"C, F#",1-2 years,,I use it for research or academic work,Windows,"Visual Studio 2015 or newer, Vim","F# Weekly, HN, Reddit and other programming news sites","Better domain modelling with records and unions, Learning functional programming in general, Speed of development","Agents (MailboxProcessor), Algebraic types (inc discriminated unions and tuples), Async workflows, Computation expressions, The ""piping"" idiom, Type inference, Units of measure","Object expressions, Object-oriented compatibility, Quotations","MSDN, Links and instructions from fsharp.org, F# books, Personal mentoring",I'm willing to learn advanced concepts but only if they are relevant and practical,More interactive tutorials (e.g. like the F# Koans),,"Internal enterprise projects, Open source projects","Utilities and tools, Custom development/specialist markets, Research/Teaching, Data analysis/statistics","Read-only data sources such as feeds, Analytics",Windows,It's officially endorsed in my team for critical/production areas,"Domain modelling: making illegal states unrepresentable, More productive with fewer developers, Easy concurrency with async and agents","Hiring: They worry about not being able to find F# developers, Fad: They have concerns over long term language viability, Too Windows-centric: They have concerns over cross-platform issues",,,"Less sophisticated tools for refactoring, etc.","LLVM, Native",,,,"Books or longer articles explaining full context, Reference works or documentation with API listings or short tutorials",,
16/04/2016 10:13:55,10 or more years,Consulting,"Yes, I enjoy computer science and mathematics",Experienced,"C#, F#, Javascript",2-3 years,,I use it for hobby or side projects,"Windows, Mac","Visual Studio 2015 or newer, Atom (with Ionide)","Twitter, F# Weekly","Better domain modelling with records and unions, Conciseness of code (I can see more at a glance), Correctness (no nulls, it works first time), Great community, Having fun again, Learning functional programming in general, Speed of development","Agents (MailboxProcessor), Algebraic types (inc discriminated unions and tuples), Async workflows, Backtick naming, Immutability by default, Interactive development, No dependency cycles, printf that is type checked, Simple ""one liner"" type definitions for records and DUs, The ""piping"" idiom, Type inference, Type providers","Active Patterns, Quotations, Units of measure","F# books, F# bloggers, Videos (e.g. Community for F#), Reading F# code written by experts",I'm willing to learn advanced concepts but only if they are relevant and practical,"More short ""live coding"" videos",,"Internal enterprise projects, Open source projects","Utilities and tools, Mainstream business & enterprise applications","SQL databases, NoSQL database, Event sourcing",Windows,used both unofficially and officially.,"Domain modelling: making illegal states unrepresentable, Correctness: fewer bugs and less rework, More productive with fewer developers",No buy-in: There is lack of acceptance from other teams,,Not enough real-world code to learn from,"Less sophisticated tools for refactoring, etc.","JVM, LLVM, Native",,,,"Books or longer articles explaining full context, Reference works or documentation with API listings or short tutorials, Recorded talks from a conference or user group",,
16/04/2016 10:44:36,10 or more years,Science or related,"Yes, I enjoy computer science and mathematics",Intermediate,"C++, F#, Python",Less than a year,,I use it for research or academic work,"Windows, Linux",Visual Studio 2015 or newer,"Twitter, F# Weekly, F# bloggers, fsharp channel on Slack","Better domain modelling with records and unions, Conciseness of code (I can see more at a glance), Correctness (no nulls, it works first time), Having fun again, Speed of development, Functional but can be tweaked to get high performance","Agents (MailboxProcessor), Algebraic types (inc discriminated unions and tuples), Async workflows, Computation expressions, Easy integration with other .NET libraries, Immutability by default, No dependency cycles, printf that is type checked, Simple ""one liner"" type definitions for records and DUs, The ""piping"" idiom, Type inference, Type providers",,"MSDN, F# books, Links mentioned in F# Weekly",I like theory -- I'm not afraid of monads and other abstractions,More material with real-world examples and war stories,"Make sure using F# on UNIX is as easy as using Python (i.e. installation, build system, interactive development).",Open source projects,Machine learning,,"Windows, Linux",It's officially endorsed in my team for critical/production areas,"Domain modelling: making illegal states unrepresentable, Correctness: fewer bugs and less rework, More productive with fewer developers, Efficiency/Performance, Easy concurrency with async and agents, Better for solving complex problems","Too Windows-centric: They have concerns over cross-platform issues, numerical libraries not as good as in Python (numpy)","- make sure experience on UNIX is as pleasant as with Python: setup, interactive development (better FSI like IPython)
- need a very good numerical library (like numpy) for F#. MathNet.Numerics only supports matrices but we need N-dimensional arrays.
- need a good crossplatform charting library (like Matplotlib in Python or ggplot2 in R). FSharp.Charting lacks many features necessary for scientific plotting.


",Don't understand the compiler errors,"Lack of F# friendly libraries, Lack of good wrappers for non-F# libraries",LLVM,"MISSING TYPECLASSES !!
This really is a big deal, since it forces you back into object oriented design patterns once you need modularity/extensibility and many advantages of the functional approach are lost.

",,,"Books or longer articles explaining full context, Reference works or documentation with API listings or short tutorials, Recorded talks from a conference or user group","MathNet.Numerics
RProvider
FSPickler
",
16/04/2016 11:42:35,10 or more years,Consulting,"Yes, I enjoy computer science and mathematics",Intermediate,C#,Less than two months,,I use it for hobby or side projects,Mac,"Visual Studio 2015 or newer, Xamarin",,"Having fun again, Learning functional programming in general",Type inference,,F# bloggers,I like theory -- I'm not afraid of monads and other abstractions,"More material with in-depth tutorials, More material with short ""cookbook"" style information, More material with real-world examples and war stories",,Not applicable. None of my F# code is used by other people,None - Just playing around,,,,,,,,,,,,,"Books or longer articles explaining full context, Reference works or documentation with API listings or short tutorials",,
16/04/2016 11:53:59,10 or more years,Enterprise development,"Yes, I enjoy computer science and mathematics",Intermediate,"C#, Javascript",2-3 years,,I use it for hobby or side projects,"Windows, Linux","Visual Studio 2015 or newer, VS Code (with Ionide)","F# Weekly, HN, Reddit and other programming news sites","Conciseness of code (I can see more at a glance), Correctness (no nulls, it works first time), Learning functional programming in general","Active Patterns, Algebraic types (inc discriminated unions and tuples), Immutability by default, Interactive development, Simple ""one liner"" type definitions for records and DUs, The ""piping"" idiom, Type inference","Agents (MailboxProcessor), Object expressions, Quotations, Static type constraints, Units of measure","Links and instructions from fsharp.org, F# books, F# bloggers, Links mentioned in F# Weekly, Videos (e.g. Community for F#), Reading F# code written by experts",I'm willing to learn advanced concepts but only if they are relevant and practical,"More material with in-depth tutorials, More material with short ""cookbook"" style information, More material with real-world examples and war stories, More podcasts and other audio-only material, More interactive tutorials (e.g. like the F# Koans)",,"Internal enterprise projects, Not applicable. None of my F# code is used by other people",Utilities and tools,Not doing data centric apps,,It's officially endorsed in my team for non-critical/non-production code,"Correctness: fewer bugs and less rework, Better for solving complex problems",Training: They are worried about getting non-F# developers up to speed,,Lack of good tutorials/documentation,,"JVM, Javascript, Native",,,,"Books or longer articles explaining full context, Recorded talks from a conference or user group, In-depth online courses (e.g. Pluralsight)","FsCheck
FsUnit",
16/04/2016 12:59:03,10 or more years,Commercial software/web development,"No, I don't know much theory",Experienced,"C#, Javascript, PHP",1-2 years,,Just tinkering,Windows,Visual Studio 2015 or newer,"F# Weekly, HN, Reddit and other programming news sites","Conciseness of code (I can see more at a glance), Correctness (no nulls, it works first time), Having fun again","Algebraic types (inc discriminated unions and tuples), Immutability by default, No dependency cycles, The ""piping"" idiom, Type inference","Object expressions, Units of measure","Links and instructions from fsharp.org, Links posted on social media such as Twitter, Links mentioned in F# Weekly, Reading F# code written by experts",I'm willing to learn advanced concepts but only if they are relevant and practical,"More material with in-depth tutorials, More material with real-world examples and war stories",,Not applicable. None of my F# code is used by other people,None - Just playing around,SQL databases,"Windows, Linux",I don't use F# at work,Better for solving complex problems,No buy-in: There is lack of acceptance from other teams,,Not enough real-world code to learn from,"Less sophisticated tools for refactoring, etc.","JVM, Native",,,,"Books or longer articles explaining full context, Reference works or documentation with API listings or short tutorials",,
16/04/2016 13:02:01,5-10 years,Enterprise development,"Yes, I enjoy computer science and mathematics",Intermediate,"C#, F#",4 or more years,,I use it for hobby or side projects,"Windows, Mac","Visual Studio 2012 or 2013, Visual Studio 2010 or older, Sublime Text","HN, Reddit and other programming news sites","Better domain modelling with records and unions, Conciseness of code (I can see more at a glance), Correctness (no nulls, it works first time), Having fun again, Functional but can be tweaked to get high performance","Active Patterns, Algebraic types (inc discriminated unions and tuples), Easy integration with other .NET libraries, Interactive development, Simple ""one liner"" type definitions for records and DUs, The ""piping"" idiom, Type inference","Computation expressions, Quotations","MSDN, F# bloggers, Reading F# code written by experts",I like theory -- I'm not afraid of monads and other abstractions,"More material with real-world examples and war stories, More short ""live coding"" videos",,build scripts,"Utilities and tools, Non-commercial web site/app, Text analysis/language parsing",Not doing data centric apps,Windows,build scripts,"Correctness: fewer bugs and less rework, More productive with fewer developers","No perceived benefits: They don't understand what benefits F# has over C# or other languages, No buy-in: There is lack of acceptance from other teams",,,Working with C#-centric tooling,JVM,,,,"Books or longer articles explaining full context, Reference works or documentation with API listings or short tutorials, Recorded talks from a conference or user group",,
16/04/2016 13:18:57,5-10 years,Commercial software/web development,"No, I don't know much theory",Experienced,"C#, F#",1-2 years,,I use it for hobby or side projects,Windows,"Visual Studio 2015 or newer, Visual Studio 2012 or 2013","Twitter, F# Weekly, F# bloggers","Conciseness of code (I can see more at a glance), Correctness (no nulls, it works first time), Having fun again, Learning functional programming in general, Speed of development","Easy integration with other .NET libraries, Immutability by default, Interactive development, The ""piping"" idiom, Type providers",Agents (MailboxProcessor),"F# books, F# bloggers, Links posted on social media such as Twitter, Reading F# code written by experts",I'm willing to learn advanced concepts but only if they are relevant and practical,More material with real-world examples and war stories,,Open source projects,Utilities and tools,,Windows,It's used unofficially,"Correctness: fewer bugs and less rework, More productive with fewer developers, Faster time to market, Better for solving complex problems","No perceived benefits: They don't understand what benefits F# has over C# or other languages, Hiring: They worry about not being able to find F# developers",,Not enough real-world code to learn from,"Working with C#-centric tooling, Less sophisticated tools for refactoring, etc.","JVM, Javascript, Native",,,,"Books or longer articles explaining full context, Reference works or documentation with API listings or short tutorials",,
16/04/2016 14:04:58,2-5 years,Financial services or similar,"Yes, I enjoy computer science and mathematics",Intermediate,"F#, Python",1-2 years,,I use it for hobby or side projects,Windows,Visual Studio 2012 or 2013,"HN, Reddit and other programming news sites, F# bloggers","Better domain modelling with records and unions, Conciseness of code (I can see more at a glance), Correctness (no nulls, it works first time), Learning functional programming in general, Speed of development","Algebraic types (inc discriminated unions and tuples), Easy integration with other .NET libraries, Immutability by default, The ""piping"" idiom, Type inference","Agents (MailboxProcessor), Computation expressions, Quotations, Units of measure","MSDN, F# books, F# bloggers",I'm willing to learn advanced concepts but only if they are relevant and practical,More material with real-world examples and war stories,,Not applicable. None of my F# code is used by other people,"Financial services, Machine learning, Data analysis/statistics",SQL databases,,It's used unofficially,"Domain modelling: making illegal states unrepresentable, Correctness: fewer bugs and less rework, More productive with fewer developers, Easy concurrency with async and agents",No perceived benefits: They don't understand what benefits F# has over C# or other languages,,,"Not being part of the core .NET distribution, Lack of F# friendly libraries, Working with C#-centric tooling",None -- I'm happy with the CLR/Mono,,,,Books or longer articles explaining full context,,
16/04/2016 14:13:48,10 or more years,Consulting,"Yes, I enjoy computer science and mathematics",Expert,"F#, Ocaml/SML",4 or more years,,I use it at work or for other commercial uses,"Windows, Linux","Visual Studio 2015 or newer, Visual Studio 2012 or 2013","Twitter, F# Weekly","Better domain modelling with records and unions, Conciseness of code (I can see more at a glance), Correctness (no nulls, it works first time), Having fun again, Speed of development","Active Patterns, Agents (MailboxProcessor), Algebraic types (inc discriminated unions and tuples), Async workflows, Easy integration with other .NET libraries, Interactive development, printf that is type checked, Simple ""one liner"" type definitions for records and DUs, Type inference, Type providers","Computation expressions, Quotations, Units of measure",OCaml,I'm willing to learn advanced concepts but only if they are relevant and practical,"More material with in-depth tutorials, More material with short ""cookbook"" style information, More material with real-world examples and war stories, More short ""live coding"" videos, More podcasts and other audio-only material, More interactive tutorials (e.g. like the F# Koans)","An interactive tutorial within Visual Studio. The kind you get when you install a game for a mobile phone for the first time (i.e. click on this, type this, and so on).","Internal enterprise projects, Commercial products, Open source projects","Utilities and tools, Algorithm-heavy business applications (non-financial), Custom development/specialist markets, Financial services, Machine learning, Mainstream business & enterprise applications, Commercial web site/app, Data analysis/statistics, Text analysis/language parsing","SQL databases, NoSQL database, Event sourcing, Read-only data sources such as feeds, Analytics",Windows,It's officially endorsed in my team for critical/production areas,"Domain modelling: making illegal states unrepresentable, Correctness: fewer bugs and less rework, More productive with fewer developers, Faster time to market, Efficiency/Performance, Easy concurrency with async and agents, Better for solving complex problems",,,Immaturity on iOS and Android.,,iOS and Android,Visibility. Microsoft don't talk about it nearly enough.,"What platforms do you develop on and target could be what platforms do you develop on and target and what platforms would you like to develop on and target.

I would love to develop on and target Raspberry Pi but Mono isn't up to it and .NET Core doesn't support ARM (yet).
",,"In-person: In-depth trainings (2 or 3 days), Books or longer articles explaining full context, Reference works or documentation with API listings or short tutorials, Recorded talks from a conference or user group",F# for Numerics and F# for Visualization.,
16/04/2016 14:22:00,2-5 years,Student,"Yes, I enjoy computer science and mathematics",Experienced,"F#, Haskell",Less than a year,,I use it for research or academic work,Windows,Visual Studio 2015 or newer,/r/fsharp,"Conciseness of code (I can see more at a glance), Correctness (no nulls, it works first time), Great community, Having fun again, Speed of development, Functional but can be tweaked to get high performance","Algebraic types (inc discriminated unions and tuples), Computation expressions, Easy integration with other .NET libraries, Immutability by default, Interactive development, Units of measure","Active Patterns, Agents (MailboxProcessor), Object expressions, Quotations, Type providers","MSDN, F# books, Answers to Stack Overflow questions, Videos (e.g. Community for F#)",I like theory -- I'm not afraid of monads and other abstractions,"More material with real-world examples and war stories, More interactive tutorials (e.g. like the F# Koans)",,,,,,I don't use F# at work,,Nothing. Everyone loves it.,,Not enough real-world code to learn from,"Not being part of the core .NET distribution, Lack of F# friendly libraries, Lack of good wrappers for non-F# libraries, Working with C#-centric tooling, Less sophisticated tools for refactoring, etc., Difficulty in troubleshooting problems",,,,,"Books or longer articles explaining full context, Reference works or documentation with API listings or short tutorials, Recorded talks from a conference or user group","FParsec, Alea GPU, OpenTK",
16/04/2016 14:26:15,10 or more years,Financial services or similar,"No, I don't know much theory",Experienced,"C#, F#, Python, R",1-2 years,,I use it at work or for other commercial uses,Windows,Visual Studio 2015 or newer,"F# Weekly, StackOverflow chat","Conciseness of code (I can see more at a glance), Correctness (no nulls, it works first time), Speed of development, Functional but can be tweaked to get high performance","Async workflows, Easy integration with other .NET libraries, Immutability by default, Interactive development, Quotations, The ""piping"" idiom, Type inference, Type providers","Active Patterns, Agents (MailboxProcessor)","MSDN, F# books, Links mentioned in F# Weekly, Answers to Stack Overflow questions",I'm willing to learn advanced concepts but only if they are relevant and practical,"More material with in-depth tutorials, More material with real-world examples and war stories",,Internal enterprise projects,"Utilities and tools, Financial services, Data analysis/statistics",SQL databases,Windows,It's used unofficially,"Correctness: fewer bugs and less rework, Efficiency/Performance, Easy concurrency with async and agents, Better for solving complex problems","No perceived benefits: They don't understand what benefits F# has over C# or other languages, No buy-in: There is lack of acceptance from other teams",,Not enough real-world code to learn from,Performance issues,None -- I'm happy with the CLR/Mono,,,,,"Mathnet
FSLab
ParallelSeq",
16/04/2016 15:02:15,10 or more years,Commercial software/web development,"Yes, I enjoy computer science and mathematics",Intermediate,"C#, F#, Javascript",1-2 years,,I use it at work or for other commercial uses,,"Visual Studio 2015 or newer, Visual Studio 2012 or 2013",F# bloggers,"Correctness (no nulls, it works first time), Having fun again","Algebraic types (inc discriminated unions and tuples), Immutability by default, The ""piping"" idiom, Type inference","Agents (MailboxProcessor), Interactive development",F# bloggers,I'm willing to learn advanced concepts but only if they are relevant and practical,More material with real-world examples and war stories,"More explanation of how to structure entire applications, more project templates to properly support web development and fsharp as a general-purpose language.",Commercial products,"Utilities and tools, Custom development/specialist markets, Non-commercial web site/app",SQL databases,Windows,It's officially endorsed in my team for critical/production areas,"Domain modelling: making illegal states unrepresentable, Correctness: fewer bugs and less rework","No perceived benefits: They don't understand what benefits F# has over C# or other languages, Hiring: They worry about not being able to find F# developers, Training: They are worried about getting non-F# developers up to speed",Really show how fsharp is a superior choice,Not enough real-world code to learn from,"Less sophisticated tools for refactoring, etc., Poor folder support",None -- I'm happy with the CLR/Mono,Difficulty in using it for web-based applications,,fsharpforfunandprofit.com is the best fsharp learning tool and it's not even in-house.,"Books or longer articles explaining full context, In-depth online courses (e.g. Pluralsight)","FParsec - parsing made fun

",
16/04/2016 15:07:08,10 or more years,Commercial software/web development,"Yes, I enjoy computer science and mathematics",Intermediate,"C, C#, C++, F#",1-2 years,,I use it for hobby or side projects,"Windows, Mac","Visual Studio 2015 or newer, VS Code (with Ionide)","Twitter, F# Weekly, HN, Reddit and other programming news sites, fsharp channel on Slack","Better domain modelling with records and unions, Conciseness of code (I can see more at a glance), Correctness (no nulls, it works first time), Great community, Speed of development","Active Patterns, Algebraic types (inc discriminated unions and tuples), Type providers",,"MSDN, F# books, Links mentioned in F# Weekly, Answers to Stack Overflow questions, Videos (e.g. Community for F#)",I like theory -- I'm not afraid of monads and other abstractions,"More material with in-depth tutorials, More short ""live coding"" videos",,Internal enterprise projects,"Utilities and tools, Text analysis/language parsing",Read-only data sources such as feeds,"Windows, Mac, Linux",It's used unofficially,"Domain modelling: making illegal states unrepresentable, Correctness: fewer bugs and less rework, Faster time to market, Better for solving complex problems","No perceived benefits: They don't understand what benefits F# has over C# or other languages, Hiring: They worry about not being able to find F# developers, Training: They are worried about getting non-F# developers up to speed, Fad: They have concerns over long term language viability",,,,Native,,,,"Books or longer articles explaining full context, Reference works or documentation with API listings or short tutorials, Recorded talks from a conference or user group, In-depth online courses (e.g. Pluralsight)",,
16/04/2016 15:28:32,5-10 years,Enterprise development,"No, I don't know much theory",Experienced,"C#, F#, Javascript, Rust, Typescript",4 or more years,,I use it at work or for other commercial uses,Windows,"Visual Studio 2015 or newer, Vim","Twitter, HN, Reddit and other programming news sites","Better domain modelling with records and unions, Conciseness of code (I can see more at a glance), Correctness (no nulls, it works first time), Having fun again, Learning functional programming in general, Speed of development, Functional but can be tweaked to get high performance","Active Patterns, Algebraic types (inc discriminated unions and tuples), Computation expressions, Immutability by default, No dependency cycles, Simple ""one liner"" type definitions for records and DUs, The ""piping"" idiom, Type inference","Agents (MailboxProcessor), Async workflows, Object expressions, Object-oriented compatibility, Type providers",F# books,I like theory -- I'm not afraid of monads and other abstractions,More material with in-depth tutorials,,"Commercial products, Open source projects","Algorithm-heavy business applications (non-financial), Mainstream business & enterprise applications, Text analysis/language parsing",SQL databases,"Windows, Linux",It's officially endorsed in my team for critical/production areas,"Domain modelling: making illegal states unrepresentable, Correctness: fewer bugs and less rework, More productive with fewer developers, Faster time to market, Efficiency/Performance, Better for solving complex problems",Hiring: They worry about not being able to find F# developers,,,"Working with C#-centric tooling, Less sophisticated tools for refactoring, etc.","LLVM, Native",,,,"Books or longer articles explaining full context, Reference works or documentation with API listings or short tutorials, Recorded talks from a conference or user group, In-depth online courses (e.g. Pluralsight)",,
16/04/2016 15:51:40,10 or more years,Commercial software/web development,"Yes, I enjoy computer science and mathematics",Expert,"C, C#, Elixir, Erlang, F#, Haskell, Javascript, Ocaml/SML, PHP, Ruby",4 or more years,,I use it at work or for other commercial uses,"Windows, Linux","Visual Studio 2015 or newer, Emacs, Cloudsharper","Twitter, HN, Reddit and other programming news sites","Better domain modelling with records and unions, Conciseness of code (I can see more at a glance), Correctness (no nulls, it works first time), Functional but can be tweaked to get high performance","Active Patterns, Algebraic types (inc discriminated unions and tuples), Async workflows, Backtick naming, Computation expressions, Easy integration with other .NET libraries, Immutability by default, Interactive development, No dependency cycles, Quotations, Simple ""one liner"" type definitions for records and DUs, The ""piping"" idiom, Type inference","Agents (MailboxProcessor), Type providers, Units of measure","MSDN, F# books, Answers to Stack Overflow questions, Reading F# code written by experts",I'm willing to learn advanced concepts but only if they are relevant and practical,"More material with in-depth tutorials, More material with real-world examples and war stories",,"Internal enterprise projects, Commercial products","Utilities and tools, Custom development/specialist markets, Non-commercial web site/app","SQL databases, Read-only data sources such as feeds","Windows, Linux, Amazon Web services",It's officially endorsed in my team for critical/production areas,"Domain modelling: making illegal states unrepresentable, Faster time to market, Easy concurrency with async and agents, Better for solving complex problems","Hiring: They worry about not being able to find F# developers, Training: They are worried about getting non-F# developers up to speed, No buy-in: There is lack of acceptance from other teams",,,,Native,,,,"Books or longer articles explaining full context, Reference works or documentation with API listings or short tutorials",,
16/04/2016 16:10:55,5-10 years,Enterprise development,"Yes, I enjoy computer science and mathematics",Experienced,"C#, Javascript",2-3 years,,I use it for hobby or side projects,Windows,"Visual Studio 2015 or newer, VS Code (with Ionide)",F# bloggers,"Better domain modelling with records and unions, Conciseness of code (I can see more at a glance), Having fun again","Algebraic types (inc discriminated unions and tuples), Computation expressions, Easy integration with other .NET libraries, Immutability by default, Simple ""one liner"" type definitions for records and DUs, Type inference, Type providers","Object expressions, Units of measure","F# bloggers, Videos (e.g. Community for F#), Reading F# code written by experts",I like theory -- I'm not afraid of monads and other abstractions,More material with real-world examples and war stories,"More real-world and worked examples. Less talking about shapes and abstract things, more downloading from databases and creating web servers.",Internal enterprise projects,Utilities and tools,SQL databases,Windows,It's used unofficially,"Domain modelling: making illegal states unrepresentable, Easy concurrency with async and agents",Hiring: They worry about not being able to find F# developers,"More real-world examples of how to practically use F#. For example, a lot of C# developers use EF, yet there's almost nothing online, anywhere, about how to use F# with EF, and certainly nothing recent. ",Not enough real-world code to learn from,"Lack of good wrappers for non-F# libraries, Working with C#-centric tooling","Javascript, Native","From a functional perspective, the lack of HKT or typeclasses is a huge glaring issue that will keep F# seen as a toy language from anyone with a functional background. 

From a non-functional perspective, the community just isn't big enough to generate all of the examples and blogs that people would expect when working through problems, as there are in C#.",,,In-depth online courses (e.g. Pluralsight),,
16/04/2016 16:17:05,5-10 years,Commercial software/web development,"Yes, I enjoy computer science and mathematics",Experienced,"C, Java, Python, racket",I was using F# but have stopped,The project I needed f# for was finished.,Just tinkering,Windows,Visual Studio 2015 or newer,StackOverflow chat,type providers,Type providers,,Links and instructions from fsharp.org,I like theory -- I'm not afraid of monads and other abstractions,More material with in-depth tutorials,,Open source projects,Research/Teaching,,"Windows, Mac, Linux",I don't use F# at work,,,,"Lack of good tutorials/documentation, Don't understand the compiler errors, Not enough real-world code to learn from",Difficulty in troubleshooting problems,,,,,Reference works or documentation with API listings or short tutorials,,
16/04/2016 16:24:34,10 or more years,Commercial software/web development,"No, I don't know much theory",Expert,F#,4 or more years,,I use it at work or for other commercial uses,"Windows, Mac","Visual Studio 2012 or 2013, Emacs","Twitter, HN, Reddit and other programming news sites","Better domain modelling with records and unions, Conciseness of code (I can see more at a glance), Correctness (no nulls, it works first time), Great community, Having fun again, Learning functional programming in general, Speed of development","Agents (MailboxProcessor), Algebraic types (inc discriminated unions and tuples), Immutability by default, No dependency cycles, printf that is type checked, Simple ""one liner"" type definitions for records and DUs, The ""piping"" idiom, Type inference, Type providers","Active Patterns, Async workflows, Computation expressions, Object expressions, Object-oriented compatibility, Quotations, Units of measure",F# books,I like theory -- I'm not afraid of monads and other abstractions,,,"Internal enterprise projects, Open source projects","Utilities and tools, Mainstream business & enterprise applications",SQL databases,"Windows, Linux",It's officially endorsed in my team for critical/production areas,"Domain modelling: making illegal states unrepresentable, Correctness: fewer bugs and less rework, More productive with fewer developers, Faster time to market, Efficiency/Performance, Easy concurrency with async and agents, Better for solving complex problems","Hiring: They worry about not being able to find F# developers, Fad: They have concerns over long term language viability, No buy-in: There is lack of acceptance from other teams",,Lacking VS Support early on (vs 2010) comapred to C# + Resharper.,Having to tote FSharp.Core around and really misleading error messages when thats the issue.,None -- I'm happy with the CLR/Mono,"Lack of marketing from Microsoft.  Right or wrong, a large percent of developers won't accept things that aren't blessed and evangelized from MS.",,,"In-person: A talks at user groups, In-person: Attending a talks as part of a conference, Books or longer articles explaining full context, Recorded talks from a conference or user group","canopy
Suave
fsharp emacs plugin
FSharp.Data
FSharp.Data.SqlClient",
16/04/2016 16:52:59,5-10 years,Enterprise development,"Yes, I enjoy computer science and mathematics",Intermediate,"C#, F#, Javascript, Typescript",4 or more years,,I use it at work or for other commercial uses,Windows,Visual Studio 2015 or newer,"Twitter, F# Weekly, F# bloggers, fsharp channel on Slack","Better domain modelling with records and unions, Conciseness of code (I can see more at a glance), Correctness (no nulls, it works first time), Great community, Having fun again","Algebraic types (inc discriminated unions and tuples), Immutability by default, No dependency cycles, The ""piping"" idiom, Type inference, Type providers",Quotations,"F# books, F# bloggers, Links posted on social media such as Twitter, Links mentioned in F# Weekly",I like theory -- I'm not afraid of monads and other abstractions,"More material with in-depth tutorials, More material with real-world examples and war stories, More interactive tutorials (e.g. like the F# Koans)",,"Internal enterprise projects, Commercial products","Financial services, Non-commercial web site/app, Data analysis/statistics","SQL databases, NoSQL database, Event sourcing, Data integration and EAI","Windows, iOS, Android, WinPhone",It's officially endorsed in my team for non-critical/non-production code,"Domain modelling: making illegal states unrepresentable, Correctness: fewer bugs and less rework, More productive with fewer developers, Faster time to market","Training: They are worried about getting non-F# developers up to speed, No buy-in: There is lack of acceptance from other teams",,Not enough real-world code to learn from,"Working with C#-centric tooling, Less sophisticated tools for refactoring, etc.",Native,,,,"In-person: A talks at user groups, In-person: Attending a talks as part of a conference, Books or longer articles explaining full context, Recorded talks from a conference or user group, In-depth online courses (e.g. Pluralsight)",,
16/04/2016 17:09:11,2-5 years,Student,"Yes, I enjoy computer science and mathematics",Expert,"C, C++, F#, Haskell, Java, Rust",1-2 years,,I use it for hobby or side projects,Windows,Visual Studio 2015 or newer,"HN, Reddit and other programming news sites, F# bloggers","Better domain modelling with records and unions, Conciseness of code (I can see more at a glance), Correctness (no nulls, it works first time), Great community, Having fun again, Functional but can be tweaked to get high performance","Active Patterns, Algebraic types (inc discriminated unions and tuples), Computation expressions, No dependency cycles, printf that is type checked, The ""piping"" idiom, Type inference, Pattern matching in general is the single greatest thing to have ever happened to languages.","Agents (MailboxProcessor), Object expressions, Quotations","F# books, F# bloggers, Personal mentoring, Reading F# code written by experts, Scott Wlaschin's glorious website.",I'm willing to learn advanced concepts but only if they are relevant and practical,"More material with in-depth tutorials, More material with real-world examples and war stories",,Open source projects,"Games, Data analysis/statistics, Text analysis/language parsing","Read-only data sources such as feeds, Analytics",Windows,I don't use F# at work,"Domain modelling: making illegal states unrepresentable, Correctness: fewer bugs and less rework, More productive with fewer developers, Faster time to market, Efficiency/Performance, Easy concurrency with async and agents, Better for solving complex problems, F# is my favorite language. I have spent more time than most people using Haskell and learning everything from catamorphisms to comonads to why object oriented languages are implicitly comonoidal. F# has always been more productive and more practical to use.",Performance.,"I understand this is contingent on .NET's tuple implementation but F# needs to get value type annotations as soon as possible.

type intpair = struct int * int","Lack of good tutorials/documentation, Some advanced features like f# quotations are poorly documented both on msdn and Expert F# 3.0. Also, certain performance aspects and compilation strategies are opaque or missing from msdn, even though that information is critical. For instance, Don Syme's paper on Active Patterns is my primary source on the implementation of Active Patterns!","Performance issues, Cross-platform issues, This is no fault of microsoft's or anyone involved with f#, but Linux performance is subpar and frustrating. I don't know what to do about this besides wait for Mono to siphon the open sourced .Net code everywhere it can.","LLVM, Native","Too much OO. Typeclasses really are the ""right"" abstraction for ad-hoc polymorphism. Lacking that, no module system a la functors in Ocaml are present, so all polymorphism must be through virtual dispatch or verbose inline type annotations. This matters, although I concede it does not for many people.",You could include a section on desired f# features!,,"Books or longer articles explaining full context, Reference works or documentation with API listings or short tutorials",,
16/04/2016 17:19:27,2-5 years,Commercial software/web development,"Yes, I enjoy computer science and mathematics",Intermediate,"C#, F#, Swift",Less than a year,,I use it for hobby or side projects,Windows,Visual Studio 2015 or newer,Friend,"Better domain modelling with records and unions, Conciseness of code (I can see more at a glance), Correctness (no nulls, it works first time), Having fun again","Active Patterns, Algebraic types (inc discriminated unions and tuples), Immutability by default, No dependency cycles, The ""piping"" idiom, Type inference, Type providers, Units of measure","Agents (MailboxProcessor), Async workflows, Computation expressions, Integration with non-F# libraries, Interactive development, Object expressions, Quotations, Type providers",Friend,I'm willing to learn advanced concepts but only if they are relevant and practical,More material with real-world examples and war stories,,Not applicable. None of my F# code is used by other people,Games,Not doing data centric apps,"Windows, Mac, Other",I don't use F# at work,,Will not compile to iOS with Unity,Better support for F# with Unity. IL2CPP has problems with tail recursion.,,Unity will not build to iOS using F#,"LLVM, Native",Garbage collection makes it a poor fit for games.,,,Reference works or documentation with API listings or short tutorials,,
16/04/2016 17:44:14,10 or more years,Consulting,"Yes, I enjoy computer science and mathematics",Intermediate,"C#, F#, Javascript",2-3 years,no real job in f#,I use it for hobby or side projects,Windows,Visual Studio 2015 or newer,"F# Weekly, F# bloggers","Having fun again, Learning functional programming in general, Speed of development","Computation expressions, Easy integration with other .NET libraries, Immutability by default, Interactive development, Object expressions, Type inference, Type providers, Units of measure","Agents (MailboxProcessor), Async workflows","F# books, F# bloggers, Links posted on social media such as Twitter, Answers to Stack Overflow questions, Reading F# code written by experts",I'm willing to learn advanced concepts but only if they are relevant and practical,"More material with in-depth tutorials, More material with short ""cookbook"" style information, More material with real-world examples and war stories",,Open source projects,None - Just playing around,Not doing data centric apps,Windows,I don't use F# at work,,Nothing. Everyone loves it.,,,,Javascript,,,,"Books or longer articles explaining full context, Reference works or documentation with API listings or short tutorials, Recorded talks from a conference or user group, In-depth online courses (e.g. Pluralsight)",,
16/04/2016 17:50:05,5-10 years,Game development,"No, I don't know much theory",Learner,"C, C#, C++",Less than a year,,I use it for hobby or side projects,Windows,"Visual Studio 2015 or newer, Visual Studio 2012 or 2013",F# bloggers,"Better domain modelling with records and unions, Correctness (no nulls, it works first time), Having fun again, Learning functional programming in general","Algebraic types (inc discriminated unions and tuples), Easy integration with other .NET libraries, Immutability by default, No dependency cycles, printf that is type checked, The ""piping"" idiom, Type inference, Type providers",,"F# books, F# bloggers",I like theory -- I'm not afraid of monads and other abstractions,More podcasts and other audio-only material,,"Open source projects, Not applicable. None of my F# code is used by other people","None - Just playing around, Utilities and tools, Games, Non-commercial web site/app, Text analysis/language parsing",Not doing data centric apps,,I don't use F# at work,,"Hiring: They worry about not being able to find F# developers, Fad: They have concerns over long term language viability, No buy-in: There is lack of acceptance from other teams",,"I can't use my knowledge from C# or other imperative languages, Don't understand the compiler errors",,LLVM,,,,"In-person: In-depth trainings (2 or 3 days), Books or longer articles explaining full context, Reference works or documentation with API listings or short tutorials",,
16/04/2016 18:02:04,10 or more years,"Academic, research, or related","Yes, I enjoy computer science and mathematics",Experienced,"C, Haskell",Less than a year,,I use it for hobby or side projects,"Windows, Mac, Linux","Visual Studio 2015 or newer, Xamarin, MonoDevelop, Vim","HN, Reddit and other programming news sites, F# bloggers","Better domain modelling with records and unions, Conciseness of code (I can see more at a glance), Correctness (no nulls, it works first time), Having fun again, Speed of development, Functional but can be tweaked to get high performance","Active Patterns, Algebraic types (inc discriminated unions and tuples), Async workflows, Computation expressions, Easy integration with other .NET libraries, Immutability by default, Interactive development, printf that is type checked, The ""piping"" idiom, Type inference, Type providers, Units of measure","Object expressions, Quotations","MSDN, Links and instructions from fsharp.org, Ocaml",I like theory -- I'm not afraid of monads and other abstractions,,"Coming from UNIX, working with an ide is a chore. Making project management outside of visual studio feasible would go a long way.",Open source projects,Games,Not doing data centric apps,"Windows, Mac, Linux",I don't use F# at work,,"Too Windows-centric: They have concerns over cross-platform issues, Too Microsoft-centric: They think it is too closely linked to Microsoft",Make development outside of an ide easier.,Learning a different development workflow (visual studio vs terminal and vim),Cross-platform issues,"LLVM, Native",,,,"In-person: A talks at user groups, In-person: Attending a talks as part of a conference, Books or longer articles explaining full context, Reference works or documentation with API listings or short tutorials","Fsharp.data
Fsharp power tools",
16/04/2016 18:15:42,2-5 years,Student,"No, I don't know much theory",Learner,"C#, C++",Less than two months,,I use it for hobby or side projects,"Windows, Linux","Visual Studio 2015 or newer, VS Code (with Ionide)","HN, Reddit and other programming news sites","Conciseness of code (I can see more at a glance), Correctness (no nulls, it works first time)","Async workflows, Immutability by default, Object-oriented features (inc. C# compatibility, conciseness), The ""piping"" idiom","Computation expressions, Interactive development, Quotations, Type providers, Units of measure","MSDN, Links and instructions from fsharp.org",I want to learn functional programming but I don't like academic jargon,"More material with short ""cookbook"" style information, More material with real-world examples and war stories, More short ""live coding"" videos",,Not applicable. None of my F# code is used by other people,None - Just playing around,Not doing data centric apps,"Linux, Amazon Web services",I don't use F# at work,,,,Not enough real-world code to learn from,,"LLVM, Native",When you have to use C# .NET libraries it makes F# code harder to read and ugly but you often have no other choice,,,"Reference works or documentation with API listings or short tutorials, Recorded talks from a conference or user group, In-depth online courses (e.g. Pluralsight)",F# plugin for Visual Studio 2015,
16/04/2016 18:21:54,10 or more years,Data or analytics related,"Yes, I enjoy computer science and mathematics",Experienced,C#,2-3 years,,Just tinkering,Windows,Visual Studio 2015 or newer,"Twitter, F# Weekly",Having fun again,"Easy integration with other .NET libraries, The ""piping"" idiom","Agents (MailboxProcessor), Async workflows, Computation expressions, Quotations, Units of measure",F# books,I'm willing to learn advanced concepts but only if they are relevant and practical,"More material with short ""cookbook"" style information, More material with real-world examples and war stories",,Not applicable. None of my F# code is used by other people,"Machine learning, Data analysis/statistics, Other",Analytics,Windows,I don't use F# at work,,"No perceived benefits: They don't understand what benefits F# has over C# or other languages, No buy-in: There is lack of acceptance from other teams",,,"Lack of F# friendly libraries, Lack of good wrappers for non-F# libraries, Working with C#-centric tooling",Native,,,,"Books or longer articles explaining full context, Reference works or documentation with API listings or short tutorials",,
16/04/2016 18:39:00,Less than a year,Enterprise development,"No, I don't know much theory",Learner,C#,Less than a year,,I use it at work or for other commercial uses,Windows,"Visual Studio 2015 or newer, Emacs","Twitter, F# Weekly","Better domain modelling with records and unions, Conciseness of code (I can see more at a glance), Correctness (no nulls, it works first time), Learning functional programming in general, Speed of development","Algebraic types (inc discriminated unions and tuples), Async workflows, Backtick naming, Computation expressions, Easy integration with other .NET libraries, Immutability by default, No dependency cycles, Simple ""one liner"" type definitions for records and DUs, The ""piping"" idiom, Type inference, Type providers","Object expressions, Object-oriented compatibility, Quotations, Units of measure","MSDN, Links posted on social media such as Twitter, Links mentioned in F# Weekly, Videos (e.g. Community for F#)",I'm willing to learn advanced concepts but only if they are relevant and practical,"More material with in-depth tutorials, More material with short ""cookbook"" style information, More material with real-world examples and war stories",Explaining how to architect larger programs functionally,Internal enterprise projects,Custom development/specialist markets,SQL databases,Windows,It's used unofficially,"Domain modelling: making illegal states unrepresentable, Correctness: fewer bugs and less rework, More productive with fewer developers, Faster time to market, Easy concurrency with async and agents, Better for solving complex problems","No perceived benefits: They don't understand what benefits F# has over C# or other languages, Hiring: They worry about not being able to find F# developers, Training: They are worried about getting non-F# developers up to speed, No buy-in: There is lack of acceptance from other teams",Train more F# developers,Real world enterprise examples,"Lack of F# friendly libraries, Less sophisticated tools for refactoring, etc.","Javascript, LLVM, Native",Tooling and training,,,"Books or longer articles explaining full context, Reference works or documentation with API listings or short tutorials","FSharp.Data
Chessie.ErrorHandling
",
16/04/2016 18:56:52,5-10 years,Commercial software/web development,"No, I don't know much theory",Intermediate,"Clojure, Javascript, Ruby",Haven't really used it yet,,Just tinkering,"Windows, Mac, Linux",Emacs,"HN, Reddit and other programming news sites, F# bloggers","Better domain modelling with records and unions, Great community, Learning functional programming in general","Easy integration with other .NET libraries, Immutability by default, Interactive development",,F# books,I'm willing to learn advanced concepts but only if they are relevant and practical,"More material with in-depth tutorials, More short ""live coding"" videos",,Not applicable. None of my F# code is used by other people,None - Just playing around,"SQL databases, NoSQL database","Windows, Amazon Web services, Other",I don't use F# at work,,,,"Lack of good tutorials/documentation, Installation process",Cross-platform issues,"JVM, Javascript",,,,"In-person: A talks at user groups, In-person: Attending a talks as part of a conference, Books or longer articles explaining full context, Recorded talks from a conference or user group, In-depth online courses (e.g. Pluralsight)",,
16/04/2016 19:09:33,5-10 years,Enterprise development,"Yes, I enjoy computer science and mathematics",Learner,C#,Less than two months,,Just tinkering,Windows,Visual Studio 2015 or newer,,Conciseness of code (I can see more at a glance),"Active Patterns, Easy integration with other .NET libraries",,"MSDN, Links and instructions from fsharp.org, F# bloggers",I want to learn functional programming but I don't like academic jargon,"More material with in-depth tutorials, More material with real-world examples and war stories, More short ""live coding"" videos",,Not applicable. None of my F# code is used by other people,Utilities and tools,Not doing data centric apps,Windows,I don't use F# at work,,,,,,,,Making it shorter.,,In-depth online courses (e.g. Pluralsight),,
16/04/2016 19:11:23,10 or more years,Consulting,"Yes, I enjoy computer science and mathematics",Intermediate,"C#, F#",1-2 years,,I use it for hobby or side projects,"Windows, Mac, Linux","Visual Studio 2015 or newer, Atom (with Ionide)","Twitter, F# Weekly, HN, Reddit and other programming news sites, F# bloggers","Better domain modelling with records and unions, Correctness (no nulls, it works first time), Having fun again","Algebraic types (inc discriminated unions and tuples), Immutability by default, No dependency cycles, The ""piping"" idiom","Type providers, Units of measure","MSDN, Links and instructions from fsharp.org, F# books, F# bloggers, Links mentioned in F# Weekly",I like theory -- I'm not afraid of monads and other abstractions,"More material with short ""cookbook"" style information, More material with real-world examples and war stories",,"Internal enterprise projects, Open source projects","Utilities and tools, Non-commercial web site/app, Other","SQL databases, NoSQL database, Event sourcing","Windows, Azure",I don't use F# at work,,"No perceived benefits: They don't understand what benefits F# has over C# or other languages, Hiring: They worry about not being able to find F# developers, Training: They are worried about getting non-F# developers up to speed, No buy-in: There is lack of acceptance from other teams","Make F# more mainstream to make it easier to sell it to management. Case studies from companies that use it, lists of companies that use it etc.",Lack of good tutorials/documentation,"Lack of F# friendly libraries, Working with C#-centric tooling","JVM, Javascript, LLVM, Native","C# is ""good enough"" for a lot of purposes and its hard to convince people that learning and using F# is worth it. ",,,"In-person: A talks at user groups, In-person: Attending a talks as part of a conference, Books or longer articles explaining full context, Reference works or documentation with API listings or short tutorials, Recorded talks from a conference or user group","Paket + FAKE, I want to use them all the time for all projects.
",
16/04/2016 19:18:28,5-10 years,Data or analytics related,"No, I don't know much theory",Intermediate,"Clojure, F#, Haskell, Java, Python",Less than a year,,I use it for hobby or side projects,"Windows, Linux","Visual Studio 2015 or newer, Atom (with Ionide), VS Code (with Ionide)","Twitter, F# Weekly, F# bloggers","Better domain modelling with records and unions, Correctness (no nulls, it works first time), Great community, Having fun again","Algebraic types (inc discriminated unions and tuples), Async workflows, Easy integration with other .NET libraries, Immutability by default, No dependency cycles, The ""piping"" idiom","Active Patterns, Object expressions, Object-oriented compatibility, Quotations, Type providers, Units of measure","Links and instructions from fsharp.org, F# books, F# bloggers, Links mentioned in F# Weekly, Videos (e.g. Community for F#), Reading F# code written by experts",I'm willing to learn advanced concepts but only if they are relevant and practical,"More material with in-depth tutorials, More material with real-world examples and war stories, More short ""live coding"" videos",,Open source projects,"Utilities and tools, Non-commercial web site/app, Mobile apps","SQL databases, Event sourcing, Analytics","Windows, Mac, Linux, iOS, Android, WinPhone, Azure, Amazon Web services",I don't use F# at work,,"No perceived benefits: They don't understand what benefits F# has over C# or other languages, Hiring: They worry about not being able to find F# developers, Training: They are worried about getting non-F# developers up to speed, Fad: They have concerns over long term language viability",,"Lack of good tutorials/documentation, Not enough real-world code to learn from",Web deployment,"LLVM, Native",Need better deployment story to cloud providers,,,"In-person: Shorter workshops focused on a specific topic (1 day), Books or longer articles explaining full context, Reference works or documentation with API listings or short tutorials, Recorded talks from a conference or user group, In-depth online courses (e.g. Pluralsight)",,
16/04/2016 19:19:20,10 or more years,Commercial software/web development,"Yes, I enjoy computer science and mathematics",Experienced,"C#, F#, Javascript, Python",4 or more years,,I use it for hobby or side projects,"Mac, Linux",Emacs,"HN, Reddit and other programming news sites","Conciseness of code (I can see more at a glance), Correctness (no nulls, it works first time), Functional but can be tweaked to get high performance","Algebraic types (inc discriminated unions and tuples), Computation expressions, The ""piping"" idiom, Type inference","Active Patterns, Agents (MailboxProcessor), Object expressions, Units of measure","Answers to Stack Overflow questions, Reading F# code written by experts",I like theory -- I'm not afraid of monads and other abstractions,,,"Internal enterprise projects, Open source projects","Utilities and tools, Games, Machine learning, Non-commercial web site/app, Text analysis/language parsing","SQL databases, NoSQL database","Mac, Linux",It's used unofficially,"Domain modelling: making illegal states unrepresentable, Correctness: fewer bugs and less rework","No perceived benefits: They don't understand what benefits F# has over C# or other languages, Training: They are worried about getting non-F# developers up to speed, Fad: They have concerns over long term language viability, Too Windows-centric: They have concerns over cross-platform issues, Too Microsoft-centric: They think it is too closely linked to Microsoft, No buy-in: There is lack of acceptance from other teams",,"Installation process, Not enough real-world code to learn from","Not being part of the core .NET distribution, Lack of F# friendly libraries, Less sophisticated tools for refactoring, etc.","Javascript, LLVM","F# is a language of compromises. The weaknesses are the corner cases where mixing OOP and functional idioms breaks down or where CLR design leaks through. Some probably common issues:

1. poor type inference when mixing functional and OOP code, requiring you to declare types before accessing members

2. hat types and inline should be better integrated with the type system -- again this seems like a concession to the CLR

3. Mild annoyance: There should be better ways to do ""early-return"" from a function. Perhaps I'm not doing the right thing, but usually my strategy is either to convert the entire thing to a sequence expression and take Seq.head -- ""return"" becomes ""yield"". OR when performance is a consideration I have to refactor to an inner recursive function. ",,,"In-person: A talks at user groups, In-person: Attending a talks as part of a conference, Books or longer articles explaining full context, Reference works or documentation with API listings or short tutorials",,
16/04/2016 19:36:49,5-10 years,Enterprise development,"Yes, I enjoy computer science and mathematics",Learner,C#,Less than two months,,Just tinkering,"Windows, Mac","Visual Studio 2015 or newer, VS Code (with Ionide)",F# Weekly,"Conciseness of code (I can see more at a glance), Correctness (no nulls, it works first time), Having fun again, Learning functional programming in general","Active Patterns, Algebraic types (inc discriminated unions and tuples), Computation expressions, Easy integration with other .NET libraries, Immutability by default, Object expressions, Simple ""one liner"" type definitions for records and DUs, The ""piping"" idiom, Type inference","Interactive development, Units of measure",MSDN,I'm willing to learn advanced concepts but only if they are relevant and practical,"More material with in-depth tutorials, More material with real-world examples and war stories, More interactive tutorials (e.g. like the F# Koans)",,Not applicable. None of my F# code is used by other people,None - Just playing around,Not doing data centric apps,,I don't use F# at work,"Domain modelling: making illegal states unrepresentable, Correctness: fewer bugs and less rework",,,,"Working with C#-centric tooling, Less sophisticated tools for refactoring, etc.",LLVM,,,,"In-person: In-depth trainings (2 or 3 days), In-person: Shorter workshops focused on a specific topic (1 day), Books or longer articles explaining full context, Reference works or documentation with API listings or short tutorials, In-depth online courses (e.g. Pluralsight)",,
16/04/2016 19:51:03,2-5 years,Enterprise development,"Yes, I enjoy computer science and mathematics",Intermediate,"C#, F#, Haskell, Javascript",1-2 years,,I use it for hobby or side projects,"Windows, Mac, Linux","Visual Studio 2015 or newer, Vim, Emacs, Atom (with Ionide), VS Code (with Ionide), OmniSharp","Twitter, F# Weekly, HN, Reddit and other programming news sites, F# bloggers, fsharp channel on Slack","Better domain modelling with records and unions, Conciseness of code (I can see more at a glance), Correctness (no nulls, it works first time), Great community, Having fun again, Learning functional programming in general, Speed of development","Algebraic types (inc discriminated unions and tuples), Async workflows, Easy integration with other .NET libraries, Immutability by default, Simple ""one liner"" type definitions for records and DUs, The ""piping"" idiom, Type inference, Type providers","Active Patterns, Agents (MailboxProcessor), Interactive development, Quotations","MSDN, Links and instructions from fsharp.org, F# books, F# bloggers, Links posted on social media such as Twitter, Links mentioned in F# Weekly, Videos (e.g. Community for F#), Reading F# code written by experts",I want to learn functional programming but I don't like academic jargon,"More material with in-depth tutorials, More material with real-world examples and war stories",Just more high-quality content.,"Internal enterprise projects, Commercial products","Financial services, Commercial web site/app, Data analysis/statistics",SQL databases,"Windows, Linux, Azure",I don't use F# at work,"Domain modelling: making illegal states unrepresentable, Correctness: fewer bugs and less rework, More productive with fewer developers, Faster time to market","Fad: They have concerns over long term language viability, No buy-in: There is lack of acceptance from other teams",Just get Microsoft to sing about it more.,Not enough real-world code to learn from,"Less sophisticated tools for refactoring, etc., Cross-platform issues","None -- I'm happy with the CLR/Mono, LLVM, Native",Acceptance in enterprise shops.,,,"Books or longer articles explaining full context, Recorded talks from a conference or user group, In-depth online courses (e.g. Pluralsight)","FSharp.Data
Paket
WebSharper",
16/04/2016 20:06:56,Less than a year,Enterprise development,"No, I don't know much theory",Beginner,"C#, Javascript, R, Typescript",1-2 years,,I use it for hobby or side projects,Windows,"Visual Studio 2015 or newer, VS Code (with Ionide), OmniSharp","F# Weekly, F# bloggers","Better domain modelling with records and unions, Conciseness of code (I can see more at a glance), Correctness (no nulls, it works first time)","Easy integration with other .NET libraries, Immutability by default, No dependency cycles, Type providers",Interactive development,"F# bloggers, Links mentioned in F# Weekly, Reading F# code written by experts",I'm willing to learn advanced concepts but only if they are relevant and practical,"More material with in-depth tutorials, More material with short ""cookbook"" style information, More material with real-world examples and war stories, More interactive tutorials (e.g. like the F# Koans)",,Internal enterprise projects,"Utilities and tools, Mainstream business & enterprise applications, Commercial web site/app, Non-commercial web site/app","SQL databases, Read-only data sources such as feeds","Windows, WinPhone, Azure",It's used unofficially,"Correctness: fewer bugs and less rework, More productive with fewer developers, Easy concurrency with async and agents","No perceived benefits: They don't understand what benefits F# has over C# or other languages, Training: They are worried about getting non-F# developers up to speed, No buy-in: There is lack of acceptance from other teams",,"Lack of good tutorials/documentation, Not enough real-world code to learn from","Not being part of the core .NET distribution, Lack of F# friendly libraries, Lack of good wrappers for non-F# libraries, Working with C#-centric tooling",None -- I'm happy with the CLR/Mono,"Lack of official support from Microsoft. Based on Microsoft's behavior, F# feels like a second class citizen and with C# gaining more and more functional features, there is worry that F# will never become mainstream and will remain a niche language. ",,,"Books or longer articles explaining full context, Reference works or documentation with API listings or short tutorials, Code samples and actual OSS projects","Sauve,
Logary,
FsCheck,
F# Power Tools
",
16/04/2016 22:14:49,10 or more years,"Academic, research, or related","Yes, I enjoy computer science and mathematics",Experienced,"F#, Mathematica",4 or more years,,I use it at work or for other commercial uses,Windows,Visual Studio 2015 or newer,"F# Weekly, HN, Reddit and other programming news sites, F# bloggers","Conciseness of code (I can see more at a glance), Correctness (no nulls, it works first time), Great community","Algebraic types (inc discriminated unions and tuples), Easy integration with other .NET libraries, Object-oriented features (inc. C# compatibility, conciseness), Type inference, Type providers","Active Patterns, Agents (MailboxProcessor), Computation expressions","MSDN, F# books, F# bloggers, Answers to Stack Overflow questions",I'm willing to learn advanced concepts but only if they are relevant and practical,More material with in-depth tutorials,"F# core language is easy to learn from books/web/etc.

Advanced and practical topics tend to require a lot of knowledge beyond the core language, including trendy IT concepts and buzzwords.


",Commercial products,"Algorithm-heavy business applications (non-financial), Mobile apps, Research/Teaching",SQL databases,"Windows, iOS, Android, WinPhone",It's officially endorsed in my team for critical/production areas,"Domain modelling: making illegal states unrepresentable, Correctness: fewer bugs and less rework, More productive with fewer developers, Faster time to market, Efficiency/Performance",,,,Working with C#-centric tooling,None -- I'm happy with the CLR/Mono,It should advertise itself more to general users rather than only those interested in functional programming.,,,Books or longer articles explaining full context,"FsXaml
Math.net",
16/04/2016 23:53:37,10 or more years,Enterprise development,"Yes, I enjoy computer science and mathematics",Intermediate,"F#, Javascript, Python, Delphi",3-4 years,,I use it at work or for other commercial uses,Windows,"Visual Studio 2015 or newer, VS Code (with Ionide)","Twitter, F# Weekly, F# bloggers","Better domain modelling with records and unions, Conciseness of code (I can see more at a glance), Correctness (no nulls, it works first time), Speed of development","Active Patterns, Agents (MailboxProcessor), Algebraic types (inc discriminated unions and tuples), Async workflows, Interactive development, No dependency cycles, Type inference, Type providers, Units of measure",Quotations,"MSDN, Links and instructions from fsharp.org, F# books, F# bloggers, Links posted on social media such as Twitter, Links mentioned in F# Weekly, Answers to Stack Overflow questions, Videos (e.g. Community for F#), Reading F# code written by experts, fssnip.net; Pluralsight",I'm willing to learn advanced concepts but only if they are relevant and practical,"More material with in-depth tutorials, More material with short ""cookbook"" style information, More material with real-world examples and war stories",,"Internal enterprise projects, Commercial products","Algorithm-heavy business applications (non-financial), Custom development/specialist markets, Commercial web site/app, Mobile apps, Data analysis/statistics, Text analysis/language parsing","SQL databases, NoSQL database, Read-only data sources such as feeds, Data integration and EAI","Windows, iOS, Android, WinPhone, Azure",It's officially endorsed in my team for critical/production areas,"Domain modelling: making illegal states unrepresentable, Correctness: fewer bugs and less rework, More productive with fewer developers, Faster time to market, Easy concurrency with async and agents, Better for solving complex problems","No perceived benefits: They don't understand what benefits F# has over C# or other languages, Hiring: They worry about not being able to find F# developers","F# is doing exceptional job.

F# community needs to strenghten focus on Asp.net 1.0, coreCLR/Mono integration that will inveitably happen. With Xamarin on board it needs to promote it F# first class support in the evolution of the open .Net platform.

F# community needs to ""push"" F# first class language support and tooling for ASP.MVC 1.x. going full speed in 2016 and forward. 

",Integration of F# Assemblies with .Net is not as 'seamless' as anticipated,"Not being part of the core .NET distribution, Lack of F# friendly libraries, Lack of good wrappers for non-F# libraries","LLVM, Native","/problem: 
For 'everyday' commercial development alternative languages are percieved 'good enough' so complete switch to F# is less likely for company-wide adoptions. That's why F# Community has to 'Seize The Day' with the emerging open .Net platform so that new generations of programmers start to build end-user application with F# as crucial prerequisite for F# enterprise-level adoption.

/Blind spot
Teaching how to build Computationa Expressions and new Type providers is important but not essential for newbies. Applications that stem from their usage are. The more practical solutions new programmers encounter the greater will be added value of F# for new programmers.

/weaknes
Syntax might be a 'put off', initially, especailly for imperative programmers. It is not as 'elegant' as we perceive it to be, until one gains sufficient understanding why some choices were made as they were. All the improvements so far were in the right direction - starting with light sintax, ..., but effort needs to be made to make newbies aware of the language choices and idiosyncrasies of F# that might feel foreign at first sight.
",,,"Books or longer articles explaining full context, Reference works or documentation with API listings or short tutorials, Recorded talks from a conference or user group, In-depth online courses (e.g. Pluralsight)","VisualFSharpPowerTools
Fake
FSCheck
FsLab
MBrace
",
17/04/2016 00:10:43,10 or more years,Consulting,"No, I don't know much theory",Intermediate,"Elixir, Java, Ruby, Scala",I was using F# but have stopped,Currently don't have a project that is using it. I'm still a fan!,,Mac,Xamarin,"F# Weekly, Google groups","Conciseness of code (I can see more at a glance), Correctness (no nulls, it works first time), Having fun again, Speed of development","Algebraic types (inc discriminated unions and tuples), Immutability by default, Interactive development, The ""piping"" idiom, Type inference, Type providers","Agents (MailboxProcessor), Quotations, Units of measure",F# books,I'm willing to learn advanced concepts but only if they are relevant and practical,,,Open source projects,None - Just playing around,SQL databases,"Windows, Mac, Linux",I don't use F# at work,,Not i a position to change course now,,,"Less sophisticated tools for refactoring, etc., Difficulty in troubleshooting problems, Cross-platform issues","JVM, LLVM",Has to play catch-up to a lot of other languages in terms of the depth of open-source library support--not just for F# specifically but even relative to .NET libraries in general.,,,Books or longer articles explaining full context,,
17/04/2016 04:20:02,10 or more years,Commercial software/web development,"Yes, I enjoy computer science and mathematics",Intermediate,"Clojure, Java",Less than two months,,Just tinkering,"Mac, Linux",Xamarin,"Twitter, F# Weekly, HN, Reddit and other programming news sites","Better domain modelling with records and unions, Conciseness of code (I can see more at a glance), Correctness (no nulls, it works first time), Great community, Having fun again","Async workflows, Immutability by default, Interactive development, Type inference, Type providers",,"F# books, F# bloggers",I'm willing to learn advanced concepts but only if they are relevant and practical,"More material with in-depth tutorials, More material with real-world examples and war stories",,Not applicable. None of my F# code is used by other people,None - Just playing around,SQL databases,,I don't use F# at work,,,,Lack of good tutorials/documentation,Cross-platform issues,"JVM, Native",Was tied to Windows too long.  I am only trying it now because of recent changes with mono and coreCLR.,,Really enjoying f#,Books or longer articles explaining full context,,
17/04/2016 04:31:49,10 or more years,Enterprise development,"Yes, I enjoy computer science and mathematics",Experienced,"C#, F#, Typescript",2-3 years,,I use it at work or for other commercial uses,Windows,Visual Studio 2015 or newer,"HN, Reddit and other programming news sites","Better domain modelling with records and unions, Correctness (no nulls, it works first time), Learning functional programming in general, Functional but can be tweaked to get high performance","Active Patterns, Agents (MailboxProcessor), Algebraic types (inc discriminated unions and tuples), Async workflows, Easy integration with other .NET libraries, Immutability by default, Interactive development, No dependency cycles, printf that is type checked, The ""piping"" idiom, Type inference","Quotations, Type providers","MSDN, F# bloggers, Answers to Stack Overflow questions, Personal mentoring, Reading F# code written by experts, Fsharp for fun and profit",I want to learn functional programming but I don't like academic jargon,"More material with short ""cookbook"" style information, More material with real-world examples and war stories",,"Internal enterprise projects, Commercial products","Utilities and tools, Commercial web site/app, Data analysis/statistics",SQL databases,Windows,It's officially endorsed in my team for critical/production areas,"Domain modelling: making illegal states unrepresentable, Correctness: fewer bugs and less rework, Easy concurrency with async and agents, Better for solving complex problems","No perceived benefits: They don't understand what benefits F# has over C# or other languages, Hiring: They worry about not being able to find F# developers, Training: They are worried about getting non-F# developers up to speed",,Lack of good tutorials/documentation,"Working with C#-centric tooling, Less sophisticated tools for refactoring, etc.",None -- I'm happy with the CLR/Mono,"The poor tooling... Fhsarp power tools helps, but gets unusable on large enterprise projects. Until you get something like resharper quality, fsharp is always going to be seen as the step child language of Microsoft.",,,"In-person: Shorter workshops focused on a specific topic (1 day), Reference works or documentation with API listings or short tutorials",,
17/04/2016 05:40:54,10 or more years,Commercial software/web development,"Yes, I enjoy computer science and mathematics",Experienced,"C#, F#, Java, Javascript, PHP, Python, Ruby, Swift, Typescript, Visual Basic",Less than a year,,Just tinkering,Windows,"Visual Studio 2015 or newer, MonoDevelop, SharpDevelop, Sublime Text, Atom (with Ionide), VS Code (with Ionide)","Facebook, HN, Reddit and other programming news sites","Conciseness of code (I can see more at a glance), Learning functional programming in general, Functional but can be tweaked to get high performance","Computation expressions, Easy integration with other .NET libraries, Immutability by default, Object-oriented features (inc. C# compatibility, conciseness)","Agents (MailboxProcessor), Interactive development, Type providers","Answers to Stack Overflow questions, Reading F# code written by experts",I want to learn functional programming but I don't like academic jargon,"More short ""live coding"" videos, More interactive tutorials (e.g. like the F# Koans)",,"Open source projects, Not applicable. None of my F# code is used by other people",None - Just playing around,Not doing data centric apps,Windows,I don't use F# at work,Correctness: fewer bugs and less rework,No perceived benefits: They don't understand what benefits F# has over C# or other languages,,"Lack of good tutorials/documentation, I can't use my knowledge from C# or other imperative languages, Don't understand the compiler errors, Not enough real-world code to learn from","Not being part of the core .NET distribution, Working with C#-centric tooling",Javascript,,,,"Reference works or documentation with API listings or short tutorials, In-depth online courses (e.g. Pluralsight)",,
17/04/2016 07:34:56,2-5 years,Enterprise development,"Yes, I enjoy computer science and mathematics",Intermediate,"Java, Python",Less than two months,,Just tinkering,Windows,Visual Studio 2012 or 2013,"HN, Reddit and other programming news sites","Better domain modelling with records and unions, Conciseness of code (I can see more at a glance), Correctness (no nulls, it works first time), Having fun again, Learning functional programming in general, Speed of development","Algebraic types (inc discriminated unions and tuples), Async workflows, Immutability by default, Interactive development, printf that is type checked, The ""piping"" idiom, Type inference",Units of measure,F# bloggers,I'm willing to learn advanced concepts but only if they are relevant and practical,"More material with in-depth tutorials, More material with short ""cookbook"" style information, More material with real-world examples and war stories, More interactive tutorials (e.g. like the F# Koans)",,Not applicable. None of my F# code is used by other people,"None - Just playing around, Utilities and tools",SQL databases,Windows,I don't use F# at work,,"No perceived benefits: They don't understand what benefits F# has over C# or other languages, Hiring: They worry about not being able to find F# developers, Training: They are worried about getting non-F# developers up to speed, Fad: They have concerns over long term language viability",,Not enough real-world code to learn from,Not being part of the core .NET distribution,JVM,,,,"Books or longer articles explaining full context, Reference works or documentation with API listings or short tutorials",,
17/04/2016 07:43:38,10 or more years,Enterprise development,"Yes, I enjoy computer science and mathematics",Intermediate,"C#, F#",Less than a year,,I use it at work or for other commercial uses,Windows,"Visual Studio 2015 or newer, Atom (with Ionide)","Twitter, F# Weekly, F# bloggers","Better domain modelling with records and unions, Conciseness of code (I can see more at a glance), Correctness (no nulls, it works first time), Great community, Having fun again, Speed of development","Algebraic types (inc discriminated unions and tuples), Immutability by default, The ""piping"" idiom, Type inference, Type providers",Object-oriented compatibility,"F# books, F# bloggers, Links posted on social media such as Twitter, Links mentioned in F# Weekly, Structured training/workshops, Videos (e.g. Community for F#), Reading F# code written by experts",I like theory -- I'm not afraid of monads and other abstractions,More material with real-world examples and war stories,,Internal enterprise projects,"Utilities and tools, Other","SQL databases, Event sourcing",Windows,It's officially endorsed in my team for critical/production areas,"Domain modelling: making illegal states unrepresentable, Correctness: fewer bugs and less rework, Faster time to market",No buy-in: There is lack of acceptance from other teams,,,"Less sophisticated tools for refactoring, etc.",None -- I'm happy with the CLR/Mono,,,,"In-person: In-depth trainings (2 or 3 days), Books or longer articles explaining full context, Recorded talks from a conference or user group, In-depth online courses (e.g. Pluralsight)",,
17/04/2016 12:42:43,5-10 years,Student,"Yes, I enjoy computer science and mathematics",Experienced,"C, C#, C++, Java, Javascript, Python",Less than a year,,I use it for hobby or side projects,"Windows, Mac","Visual Studio 2015 or newer, VS Code (with Ionide)","Twitter, HN, Reddit and other programming news sites","Correctness (no nulls, it works first time), Learning functional programming in general, Speed of development","Algebraic types (inc discriminated unions and tuples), Computation expressions, Immutability by default, No dependency cycles, Type inference, Type providers","Agents (MailboxProcessor), Object expressions, Object-oriented compatibility, Quotations","Links and instructions from fsharp.org, F# bloggers, Links posted on social media such as Twitter, Reading F# code written by experts",I like theory -- I'm not afraid of monads and other abstractions,"More material with in-depth tutorials, More material with real-world examples and war stories","Tutorial on how to setup the various tooling in non-Windows env. if you are not using Windows/VS. That being said, F# still has a way to go in unix systems.",Not applicable. None of my F# code is used by other people,"None - Just playing around, Utilities and tools","SQL databases, Read-only data sources such as feeds","Windows, Mac, Linux, WinPhone, Other",I don't use F# at work,,,,"Installation process, Not enough real-world code to learn from","Not being part of the core .NET distribution, Less sophisticated tools for refactoring, etc., Performance issues","LLVM, Native","Profiling tools and debug (at least on something else than Windows). Async workflows, while neat, are incredibly hard to debug and, while fsi is neat to test single-functions, testing a system is not trivial.

I tried to deploy a web-scraper (with Suave.io as a front-end) on a 512mb linux VM and it seems to memory leak. Trying to find what is leaking/why the GC isn't firing is seemingly impossible. The only tool I can use is Xamarin Profiler and for F# it seems clueless.

Too dependent on MSBuild. Every tools / static code analysis seems to be need an .fsproj file. I never learned MSBuild and without Visual Studio to help me, there was not a lot of help to manually learn how to cross-reference projects and add files. This type of friction when starting to start a more ""serious"" project is frustrating.

Another one is the lack of MS commitment. I'd like to try UWP app with F# libraries but last time I checked it was not possible.",,"I really like F# as a language (for me it is ""easier"" OCaml and better than C# if I do work with .NET), but the non-Windows situation needs to improve. Also, while the community has great projects, the lack of (public at least) commitment from Ms is a little bit discouraging.

That being said, maybe it's because I'm still in the learning phase and my grips are because there's a lot to learn :-)","In-person: In-depth trainings (2 or 3 days), Books or longer articles explaining full context, Reference works or documentation with API listings or short tutorials","1. FSharp.Data
2. FsCheck
3. FSharp Interactive
4. Paket
5. Suave.io",
17/04/2016 15:33:49,10 or more years,Data or analytics related,"No, I don't know much theory",Intermediate,"C#, F#",4 or more years,,I use it at work or for other commercial uses,Windows,"Visual Studio 2015 or newer, Visual Studio 2012 or 2013","Twitter, HN, Reddit and other programming news sites, F# bloggers","Better domain modelling with records and unions, Conciseness of code (I can see more at a glance), Correctness (no nulls, it works first time), Great community, Having fun again, Speed of development, Functional but can be tweaked to get high performance","Algebraic types (inc discriminated unions and tuples), Easy integration with other .NET libraries, Immutability by default, Interactive development, No dependency cycles, printf that is type checked, Simple ""one liner"" type definitions for records and DUs, The ""piping"" idiom, Type inference, Type providers","Active Patterns, Agents (MailboxProcessor), Async workflows, Object expressions, Quotations","F# books, F# bloggers, Answers to Stack Overflow questions, Videos (e.g. Community for F#), Reading F# code written by experts",I want to learn functional programming but I don't like academic jargon,More material with real-world examples and war stories,With my forthcoming book. ;-),"Internal enterprise projects, Commercial products, Open source projects","Utilities and tools, Algorithm-heavy business applications (non-financial), Data analysis/statistics","SQL databases, NoSQL database","Windows, Azure, Amazon Web services",It's officially endorsed in my team for critical/production areas,"Domain modelling: making illegal states unrepresentable, Correctness: fewer bugs and less rework, More productive with fewer developers, Faster time to market, Efficiency/Performance, Better for solving complex problems, Conciseness",No perceived benefits: They don't understand what benefits F# has over C# or other languages,Foster buy-in at CTO level.,,FSharp.Core version issues,"JVM, Native",Goto definition/find references between C# and F# code in the same solution.  (Not an F# problem but an IDE problem.),,,"In-person: Shorter workshops focused on a specific topic (1 day), In-person: A talks at user groups, In-person: Attending a talks as part of a conference, Books or longer articles explaining full context, Reference works or documentation with API listings or short tutorials, In-depth online courses (e.g. Pluralsight)","Power Tools
FSUnit
NCrunch (not F# specific but awesome)",
17/04/2016 15:41:40,10 or more years,Commercial software/web development,"No, I don't know much theory",Learner,"C#, F#, Javascript",Less than a year,,I use it at work or for other commercial uses,Windows,Visual Studio 2015 or newer,"Twitter, Google+, F# bloggers, fsharp channel on Slack","Better domain modelling with records and unions, Conciseness of code (I can see more at a glance), Correctness (no nulls, it works first time), Great community, Having fun again, Learning functional programming in general, Speed of development","Algebraic types (inc discriminated unions and tuples), Async workflows, Easy integration with other .NET libraries, Immutability by default, Interactive development, No dependency cycles, printf that is type checked, Simple ""one liner"" type definitions for records and DUs, The ""piping"" idiom, Type inference, Type providers","Active Patterns, Agents (MailboxProcessor), Computation expressions, Quotations","MSDN, Links and instructions from fsharp.org, F# bloggers, Answers to Stack Overflow questions, Structured training/workshops, Videos (e.g. Community for F#)",I'm willing to learn advanced concepts but only if they are relevant and practical,"More material with short ""cookbook"" style information, More material with real-world examples and war stories, More podcasts and other audio-only material, More interactive tutorials (e.g. like the F# Koans)",,Internal enterprise projects,"Utilities and tools, Financial services",SQL databases,Windows,It's officially endorsed in my team for critical/production areas,"Correctness: fewer bugs and less rework, More productive with fewer developers, Easy concurrency with async and agents, Better for solving complex problems","No perceived benefits: They don't understand what benefits F# has over C# or other languages, Hiring: They worry about not being able to find F# developers, No buy-in: There is lack of acceptance from other teams",F# community could provide more success stories of using F#. Some detailed examples with F# code and C# implementation for comparison could be provided. That would be great to have well descibed and analyzed case studies to show to others (who often do not see any advantage of functional approach). ,Not enough real-world code to learn from,Working with C#-centric tooling,"JVM, Native","Lack of intellisensie inside F# Interactive REPL is sometimes frustrating ;) It's the minor issue ;)
The biggest F# problem is C# which is good enough for majority of developers to even not take a look at F# :)",,"F# progamming language is the best programming language ever! :)
F# community is awesome!
Thanks for all your efforts! Do not stop! ;)
Oh, and nice survey header image BTW :D","In-person: In-depth trainings (2 or 3 days), In-person: Shorter workshops focused on a specific topic (1 day), In-person: A talks at user groups, In-person: Attending a talks as part of a conference, Books or longer articles explaining full context, Reference works or documentation with API listings or short tutorials, Recorded talks from a conference or user group, In-depth online courses (e.g. Pluralsight)","CSV and SQL type providers, Canopy, FsUnit, Paket, FAKE",
17/04/2016 15:44:47,2-5 years,Enterprise development,"Yes, I enjoy computer science and mathematics",Intermediate,"C#, F#, Javascript",1-2 years,,I use it at work or for other commercial uses,Windows,Visual Studio 2015 or newer,"Twitter, F# Weekly, HN, Reddit and other programming news sites, F# bloggers, fsharp channel on Slack","Better domain modelling with records and unions, Conciseness of code (I can see more at a glance), Correctness (no nulls, it works first time), Having fun again, Learning functional programming in general, Speed of development","Algebraic types (inc discriminated unions and tuples), Easy integration with other .NET libraries, Immutability by default, Interactive development, No dependency cycles, The ""piping"" idiom, Type inference","Object-oriented compatibility, Quotations","F# books, F# bloggers, Links mentioned in F# Weekly, Videos (e.g. Community for F#), Reading F# code written by experts",I'm willing to learn advanced concepts but only if they are relevant and practical,"More material with in-depth tutorials, More material with real-world examples and war stories, More podcasts and other audio-only material",,Internal enterprise projects,"Utilities and tools, Algorithm-heavy business applications (non-financial), Mainstream business & enterprise applications, Text analysis/language parsing",SQL databases,Windows,It's officially endorsed in my team for non-critical/non-production code,"Domain modelling: making illegal states unrepresentable, Correctness: fewer bugs and less rework, Better for solving complex problems","No perceived benefits: They don't understand what benefits F# has over C# or other languages, Hiring: They worry about not being able to find F# developers, Money: They worry that good F# developers will cost too much, Training: They are worried about getting non-F# developers up to speed, Fad: They have concerns over long term language viability",,,Cross-platform issues,Javascript,,,,"Books or longer articles explaining full context, Reference works or documentation with API listings or short tutorials, Recorded talks from a conference or user group",,
17/04/2016 17:22:15,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
17/04/2016 17:26:48,10 or more years,"Academic, research, or related","Yes, I enjoy computer science and mathematics",Expert,"C, C#, F#, Haskell, Java, Javascript, Python",4 or more years,,I use it for research or academic work,Windows,"Visual Studio 2015 or newer, Xamarin",,"Better domain modelling with records and unions, Conciseness of code (I can see more at a glance), Correctness (no nulls, it works first time), Learning functional programming in general, Functional but can be tweaked to get high performance","Algebraic types (inc discriminated unions and tuples), Easy integration with other .NET libraries, Immutability by default, No dependency cycles, Simple ""one liner"" type definitions for records and DUs, The ""piping"" idiom, Type inference, Units of measure","Agents (MailboxProcessor), Object expressions, Object-oriented compatibility","MSDN, Links and instructions from fsharp.org, Answers to Stack Overflow questions",I like theory -- I'm not afraid of monads and other abstractions,,,"Internal enterprise projects, Open source projects","Utilities and tools, Games, Research/Teaching, Text analysis/language parsing",Not doing data centric apps,Windows,It's officially endorsed in my team for non-critical/non-production code,"Correctness: fewer bugs and less rework, More productive with fewer developers, Better for solving complex problems","Too Windows-centric: They have concerns over cross-platform issues, Too Microsoft-centric: They think it is too closely linked to Microsoft",,Lack of higher kinded polymorphism.,"Not being part of the core .NET distribution, Cross-platform issues","JVM, Javascript",,,,Books or longer articles explaining full context,,
17/04/2016 18:36:43,2-5 years,"Academic, research, or related","Yes, I enjoy computer science and mathematics",Learner,"Elixir, Erlang, F#, PHP, Python",Less than a year,,I use it for research or academic work,Windows,"Visual Studio 2015 or newer, Sublime Text, Atom (with Ionide)","F# Weekly, HN, Reddit and other programming news sites, F# bloggers","Conciseness of code (I can see more at a glance), Correctness (no nulls, it works first time), Having fun again, Learning functional programming in general, Functional but can be tweaked to get high performance","Algebraic types (inc discriminated unions and tuples), Computation expressions, Immutability by default, Object-oriented features (inc. C# compatibility, conciseness), Type inference, Type providers, Units of measure","Active Patterns, Async workflows, Object-oriented compatibility","Links and instructions from fsharp.org, F# bloggers, Links mentioned in F# Weekly, Videos (e.g. Community for F#)",I'm willing to learn advanced concepts but only if they are relevant and practical,"More material with in-depth tutorials, More material with real-world examples and war stories, More short ""live coding"" videos, More interactive tutorials (e.g. like the F# Koans)",,Not applicable. None of my F# code is used by other people,"None - Just playing around, Custom development/specialist markets, Machine learning, Research/Teaching, Data analysis/statistics","Event sourcing, Read-only data sources such as feeds","Windows, Mac, Linux",I don't use F# at work,,No perceived benefits: They don't understand what benefits F# has over C# or other languages,,"Lack of good tutorials/documentation, Not enough real-world code to learn from","Lack of F# friendly libraries, Lack of good wrappers for non-F# libraries, Less sophisticated tools for refactoring, etc.","Javascript, LLVM",,,,"Books or longer articles explaining full context, Recorded talks from a conference or user group",,
17/04/2016 19:53:24,10 or more years,"Academic, research, or related","Yes, I enjoy computer science and mathematics",Experienced,"F#, Java, Ocaml/SML, PHP",4 or more years,,I use it at work or for other commercial uses,Linux,MonoDevelop,"F# Weekly, HN, Reddit and other programming news sites, F# bloggers","Conciseness of code (I can see more at a glance), Functional but can be tweaked to get high performance","Algebraic types (inc discriminated unions and tuples), Immutability by default, No dependency cycles, Quotations, The ""piping"" idiom, Type providers",Object-oriented compatibility,"Links and instructions from fsharp.org, F# books, Links mentioned in F# Weekly, Structured training/workshops, Reading F# code written by experts",I like theory -- I'm not afraid of monads and other abstractions,"More material with in-depth tutorials, More material with real-world examples and war stories, More podcasts and other audio-only material, More interactive tutorials (e.g. like the F# Koans)",First-class support on cross-platform both for coreclr both for F# (eg.: Linux),"Internal enterprise projects, Commercial products, Open source projects","Algorithm-heavy business applications (non-financial), Financial services, Machine learning, Mainstream business & enterprise applications, Commercial web site/app, Data analysis/statistics","SQL databases, NoSQL database, Analytics",Linux,It's officially endorsed in my team for critical/production areas,"Domain modelling: making illegal states unrepresentable, Correctness: fewer bugs and less rework, More productive with fewer developers, Faster time to market, Efficiency/Performance",,"Provide ALL functionality that C# provides:
fixed array
managed pointer support (currently F# provides only unmanaged pointers as nativeptr<'T>)
ref returns
[..]

",Not enough real-world code to learn from,"Not being part of the core .NET distribution, Lack of F# friendly libraries, Working with C#-centric tooling, Cross-platform issues","JVM, LLVM, Native","Software economy: the missing ecosystem both the academic and the commercial

Almost nobody invest time / money to create F# projects. Most users do not want to build distributed database, cloud services from ground up.

Compare it with the Java and Scala ecosystem projects eg.: Hadoop, Spark, Zookeeper and millions of other projects...
",,,"Books or longer articles explaining full context, Reference works or documentation with API listings or short tutorials, Recorded talks from a conference or user group","FAKE
FsCheck
",
17/04/2016 19:53:49,10 or more years,Commercial software/web development,"No, I don't know much theory",Learner,"C#, F#, Javascript",1-2 years,,I use it for hobby or side projects,"Windows, Linux","Visual Studio 2015 or newer, VS Code (with Ionide)","Twitter, F# Weekly, F# bloggers","Better domain modelling with records and unions, Conciseness of code (I can see more at a glance), Correctness (no nulls, it works first time), Speed of development","Algebraic types (inc discriminated unions and tuples), Computation expressions, Interactive development, Simple ""one liner"" type definitions for records and DUs, The ""piping"" idiom, Type inference","Agents (MailboxProcessor), Object expressions, Quotations","F# bloggers, Links posted on social media such as Twitter, Answers to Stack Overflow questions, Just coding with it",I'm willing to learn advanced concepts but only if they are relevant and practical,More material with real-world examples and war stories,,"Not applicable. None of my F# code is used by other people, Utilities to make my life easier","Utilities and tools, Commercial web site/app, Data analysis/statistics","SQL databases, Read-only data sources such as feeds",,It's used unofficially,"Domain modelling: making illegal states unrepresentable, Correctness: fewer bugs and less rework, More productive with fewer developers, Better for solving complex problems","Hiring: They worry about not being able to find F# developers, Training: They are worried about getting non-F# developers up to speed, Fad: They have concerns over long term language viability","If people realized it is a general purpose language - I think it excels anywhere C# does. C# has inertia, but F# is just plain easier to do most anything.",Not enough real-world code to learn from,"Less sophisticated tools for refactoring, etc.","None -- I'm happy with the CLR/Mono, Erlang VM",,,,"Recorded talks from a conference or user group, In-depth online courses (e.g. Pluralsight)",,
17/04/2016 19:55:15,10 or more years,retired,"No, I don't know much theory",Beginner,C#,Less than two months,Total frustration in using packages written in F#.  You have to be an expert in F# in able to understand and use the documentation.  FsLab is a perfect example.  You have to have a very good understanding of F# in able to understand the signatures of methods/function.  Without that understanding it is next to impossible to code things in F#.  For a beginner the documentation is like trying to understand a foreign language that you have not learned yet. ,Just tinkering,Windows,Visual Studio 2015 or newer,,,,,,,,,,,,,,,,,,,,,,,,,
17/04/2016 20:07:02,10 or more years,Enterprise development,"Yes, I enjoy computer science and mathematics",Experienced,"C, C#, C++, F#, Python",4 or more years,,I use it at work or for other commercial uses,Windows,"Visual Studio 2015 or newer, Visual Studio 2012 or 2013","Twitter, F# Weekly, HN, Reddit and other programming news sites, F# bloggers","Better domain modelling with records and unions, Conciseness of code (I can see more at a glance), Correctness (no nulls, it works first time), Learning functional programming in general, Speed of development","Easy integration with other .NET libraries, Immutability by default, Type inference","Agents (MailboxProcessor), Static type constraints","F# bloggers, Links posted on social media such as Twitter, Answers to Stack Overflow questions, Reading F# code written by experts",I like theory -- I'm not afraid of monads and other abstractions,"More material with in-depth tutorials, More material with real-world examples and war stories, More interactive tutorials (e.g. like the F# Koans)","Improve MSDN documentation. Compared to the documentation pages for the C# language and .NET framework APIs, the F# documentation is rather sparse, lacking details and usage examples. For example, I've been working with F# prior to the F# 2.0 RTM, and I would still find a detailed F#/C# interoperability guide to be a handy, useful reference; for some scenarios, the only documentation of the correct approach is a single StackOverflow post, or one-liner buried within the language spec. (For example, implementing a class in F# which implements a C#-defined interface which defines a CLI-style event.) For other features, like custom keywords in computation expressions, there is no documentation at all; for example, the attributes used to implement custom keywords in computation have no documentation beyond a one-line summary (no description of when/why a particular attribute is needed, no usage examples, etc.)","Internal enterprise projects, Commercial products, Open source projects","Utilities and tools, Algorithm-heavy business applications (non-financial), Financial services, Data analysis/statistics","SQL databases, Read-only data sources such as feeds",Windows,It's officially endorsed in my team for critical/production areas,"More productive with fewer developers, Faster time to market, Better for solving complex problems","No perceived benefits: They don't understand what benefits F# has over C# or other languages, Training: They are worried about getting non-F# developers up to speed",,"Don't understand the compiler errors, Not enough real-world code to learn from","Not being part of the core .NET distribution, Working with C#-centric tooling, Less sophisticated tools for refactoring, etc.","LLVM, Native","Although F# is open-source and community-driven, Microsoft still plays the role of gatekeeper by requiring changes to the canonical implementation (Microsoft/visualfsharp) to be approved by one (perhaps two?) developers on the Visual F# team. This creates a severe bottleneck on how fast the implementation can improve -- reasonable pull requests (like the work Enrico Sada did to port the legacy integration tests over to NUnit from Perl/batch scripts) sit unmerged for weeks because the VF# team is busy with other things or is otherwise uninterested.

With C#'s canonical implementation now being the Roslyn-based compiler and .NET going cross-platform, it seems very silly to have both a canonical VF# repository and a ""cross-platform"" repository. There should be one implementation of the language which covers VS, .NET Core, and Mono -- and it should be fsharp/fsharp. The Microsoft/visualfsharp repository should contain just the pieces needed for VF# like the VS project system, or any special build integration needed for Microsoft's internal CI. The VF# team would still contribute to fsharp/fsharp but could work with the community to drive the project faster (e.g., by migrating the compiler to a library-based approach like FSharp.Compiler.Service), or working on implementing new/better testing for compiler internals and FSharp.Core.",,,"In-person: In-depth trainings (2 or 3 days), Books or longer articles explaining full context, Reference works or documentation with API listings or short tutorials, In-depth online courses (e.g. Pluralsight)","ExtCore
FsCheck
VFPT (Visual F# Power Tools)
FAKE",
17/04/2016 20:33:18,10 or more years,Enterprise development,"Yes, I enjoy computer science and mathematics",Learner,"C#, F#, Java, Javascript, Python",Less than a year,,I use it for hobby or side projects,Windows,"Visual Studio 2015 or newer, VS Code (with Ionide)","Twitter, F# Weekly, F# bloggers","Better domain modelling with records and unions, Learning functional programming in general","Active Patterns, Algebraic types (inc discriminated unions and tuples), Async workflows, Backtick naming, Computation expressions, Immutability by default, Interactive development, The ""piping"" idiom, Type inference, Type providers",Units of measure,"Links and instructions from fsharp.org, F# books, F# bloggers, Links posted on social media such as Twitter, Links mentioned in F# Weekly, Answers to Stack Overflow questions, Reading F# code written by experts",I want to learn functional programming but I don't like academic jargon,"More material with real-world examples and war stories, More interactive tutorials (e.g. like the F# Koans)",,Not applicable. None of my F# code is used by other people,"None - Just playing around, Utilities and tools",Not doing data centric apps,Windows,It's used unofficially,"Domain modelling: making illegal states unrepresentable, More productive with fewer developers, Better for solving complex problems",No perceived benefits: They don't understand what benefits F# has over C# or other languages,,,"Working with C#-centric tooling, Less sophisticated tools for refactoring, etc.",Javascript,,,,"In-person: A talks at user groups, Books or longer articles explaining full context, Recorded talks from a conference or user group",,
17/04/2016 20:53:04,5-10 years,Enterprise development,"Yes, I enjoy computer science and mathematics",Learner,C#,Less than a year,,I use it for hobby or side projects,Windows,"Visual Studio 2015 or newer, Visual Studio 2012 or 2013","Twitter, F# Weekly, F# bloggers","Better domain modelling with records and unions, Conciseness of code (I can see more at a glance), Correctness (no nulls, it works first time), Great community, Having fun again, Learning functional programming in general","Active Patterns, Async workflows, Computation expressions, Easy integration with other .NET libraries, Type providers",,"F# books, F# bloggers, Links posted on social media such as Twitter, Links mentioned in F# Weekly, Answers to Stack Overflow questions, Personal mentoring, Videos (e.g. Community for F#), Reading F# code written by experts",I want to learn functional programming but I don't like academic jargon,"More short ""live coding"" videos",,Not applicable. None of my F# code is used by other people,None - Just playing around,SQL databases,Windows,I don't use F# at work,,,,,"Less sophisticated tools for refactoring, etc.",None -- I'm happy with the CLR/Mono,,,,"In-person: In-depth trainings (2 or 3 days), In-person: A talks at user groups, Books or longer articles explaining full context",,
17/04/2016 20:55:16,10 or more years,Enterprise development,"Yes, I enjoy computer science and mathematics",Expert,"C#, F#",4 or more years,,I use it at work or for other commercial uses,Windows,"Visual Studio 2015 or newer, VS Code (with Ionide)","Twitter, F# Weekly","Great community, Having fun again, Speed of development","Immutability by default, The ""piping"" idiom, Type inference, Type providers","Active Patterns, Agents (MailboxProcessor), Object expressions, Units of measure","F# books, F# bloggers, Links mentioned in F# Weekly",I'm willing to learn advanced concepts but only if they are relevant and practical,More material with real-world examples and war stories,,"Internal enterprise projects, Open source projects","Utilities and tools, Mainstream business & enterprise applications, Data analysis/statistics",Not doing data centric apps,Windows,It's used unofficially,"Correctness: fewer bugs and less rework, More productive with fewer developers, Faster time to market","Hiring: They worry about not being able to find F# developers, No buy-in: There is lack of acceptance from other teams",,,Difficulty in troubleshooting problems,Javascript,"REPL (FSI), binding redirects with FSharp.Core",,,"Books or longer articles explaining full context, Recorded talks from a conference or user group","FsharpPowerTools
Paket
FAKE
Deedle
FsReveal
",
17/04/2016 21:10:46,10 or more years,Financial services or similar,"No, I don't know much theory",Experienced,"C, C#, C++, F#, Objective-C, Swift",Less than a year,,I use it at work or for other commercial uses,Windows,Visual Studio 2015 or newer,F# Weekly,"Better domain modelling with records and unions, Conciseness of code (I can see more at a glance)","Easy integration with other .NET libraries, Immutability by default, Object-oriented features (inc. C# compatibility, conciseness), Quotations, The ""piping"" idiom, Units of measure",,"F# books, F# bloggers",I like theory -- I'm not afraid of monads and other abstractions,"More material with short ""cookbook"" style information, More material with real-world examples and war stories",,Internal enterprise projects,Financial services,SQL databases,Windows,It's officially endorsed in my team for critical/production areas,"Domain modelling: making illegal states unrepresentable, Correctness: fewer bugs and less rework",,F# should advertise itself as the best option for the business and data layer.  I would like to see more F# in Data Science and Big Data stream processing.,sub standard VS integration,"Less sophisticated tools for refactoring, etc.",None -- I'm happy with the CLR/Mono,Does not have as many VS templates as C#,,,"Books or longer articles explaining full context, Recorded talks from a conference or user group, In-depth online courses (e.g. Pluralsight)",,
17/04/2016 21:58:07,5-10 years,Financial services or similar,"Yes, I enjoy computer science and mathematics",Experienced,"C#, F#, Python, R, Typescript",4 or more years,,I use it at work or for other commercial uses,"Windows, Mac","Visual Studio 2015 or newer, Visual Studio 2012 or 2013, Xamarin","Twitter, F# bloggers",,"Algebraic types (inc discriminated unions and tuples), Immutability by default, Interactive development, No dependency cycles, Type inference","Agents (MailboxProcessor), Units of measure","F# bloggers, Links posted on social media such as Twitter, Reading F# code written by experts",I'm willing to learn advanced concepts but only if they are relevant and practical,"More material with real-world examples and war stories, More interactive tutorials (e.g. like the F# Koans)",,"Internal enterprise projects, Commercial products, Open source projects","Utilities and tools, Financial services, Data analysis/statistics","SQL databases, Read-only data sources such as feeds",Windows,It's officially endorsed in my team for critical/production areas,"Domain modelling: making illegal states unrepresentable, Correctness: fewer bugs and less rework",in some cases .NET (including F#) is not an option,,,"Lack of F# friendly libraries, FSharp.Core versions",,,,,"In-person: A talks at user groups, Reference works or documentation with API listings or short tutorials",,
17/04/2016 22:23:30,5-10 years,Commercial software/web development,"Yes, I enjoy computer science and mathematics",Experienced,"C#, Clojure, F#, Javascript",2-3 years,,I use it at work or for other commercial uses,"Windows, Linux","Visual Studio 2015 or newer, Vim","Twitter, HN, Reddit and other programming news sites","Better domain modelling with records and unions, Conciseness of code (I can see more at a glance), Correctness (no nulls, it works first time), Great community, Having fun again, Learning functional programming in general, Speed of development, Functional but can be tweaked to get high performance","Active Patterns, Agents (MailboxProcessor), Algebraic types (inc discriminated unions and tuples), Computation expressions, Easy integration with other .NET libraries, Immutability by default, Interactive development, Simple ""one liner"" type definitions for records and DUs, The ""piping"" idiom, Type inference, Type providers","Object expressions, Object-oriented compatibility, Quotations, Static type constraints, Units of measure","F# books, Answers to Stack Overflow questions, Reading F# code written by experts",I like theory -- I'm not afraid of monads and other abstractions,More material with real-world examples and war stories,Entry package that bundles an editor with a visualization experience like R. Could be ionide with the embedded graphs rendering. Good getting started docs to go with it. ,"Internal enterprise projects, Commercial products, Internal tools to solve problems a small ish consultancy has","Utilities and tools, Algorithm-heavy business applications (non-financial), Custom development/specialist markets, Mainstream business & enterprise applications, Commercial web site/app, Non-commercial web site/app, Data analysis/statistics, Text analysis/language parsing","SQL databases, NoSQL database, Event sourcing, Read-only data sources such as feeds, Analytics","Windows, Linux, Azure, Amazon Web services",It's officially endorsed in my team for critical/production areas,"Domain modelling: making illegal states unrepresentable, Correctness: fewer bugs and less rework, Faster time to market, Efficiency/Performance, Easy concurrency with async and agents, Better for solving complex problems","No perceived benefits: They don't understand what benefits F# has over C# or other languages, Hiring: They worry about not being able to find F# developers, Money: They worry that good F# developers will cost too much, Training: They are worried about getting non-F# developers up to speed, Too Windows-centric: They have concerns over cross-platform issues, Too Microsoft-centric: They think it is too closely linked to Microsoft, No buy-in: There is lack of acceptance from other teams",,Whitespace,Working with C#-centric tooling,Javascript,Microsoft / asp.net and cli-tools,,,"Books or longer articles explaining full context, Reference works or documentation with API listings or short tutorials, Recorded talks from a conference or user group","Vim-fsharpbinding 
Suave
Extcore
",
17/04/2016 22:39:46,5-10 years,Commercial software/web development,"Yes, I enjoy computer science and mathematics",Intermediate,"C#, F#",3-4 years,,I use it for hobby or side projects,Windows,"Visual Studio 2015 or newer, Visual Studio 2012 or 2013","Twitter, F# Weekly, Google+, F# bloggers, fsharp channel on Slack","Better domain modelling with records and unions, Conciseness of code (I can see more at a glance), Correctness (no nulls, it works first time), Great community, Learning functional programming in general, Speed of development","Algebraic types (inc discriminated unions and tuples), Immutability by default, The ""piping"" idiom, Type inference","Static type constraints, Units of measure","F# books, F# bloggers, Links posted on social media such as Twitter, Links mentioned in F# Weekly, Videos (e.g. Community for F#)",I'm willing to learn advanced concepts but only if they are relevant and practical,"More material with in-depth tutorials, More material with short ""cookbook"" style information, More material with real-world examples and war stories, More short ""live coding"" videos, More interactive tutorials (e.g. like the F# Koans)",,Open source projects,"Utilities and tools, Mobile apps",SQL databases,,It's used unofficially,"Domain modelling: making illegal states unrepresentable, Correctness: fewer bugs and less rework, More productive with fewer developers, Better for solving complex problems","No perceived benefits: They don't understand what benefits F# has over C# or other languages, Hiring: They worry about not being able to find F# developers, Training: They are worried about getting non-F# developers up to speed",,"Lack of good tutorials/documentation, Installation process, Not enough real-world code to learn from",Working with C#-centric tooling,None -- I'm happy with the CLR/Mono,,,,"Books or longer articles explaining full context, Reference works or documentation with API listings or short tutorials, Recorded talks from a conference or user group, In-depth online courses (e.g. Pluralsight)",,
17/04/2016 22:48:17,2-5 years,without constant work,"No, I don't know much theory",Beginner,"C#, F#",1-2 years,,I use it for hobby or side projects,Windows,Visual Studio 2012 or 2013,"F# Weekly, StackOverflow chat","Better domain modelling with records and unions, Conciseness of code (I can see more at a glance), Great community, Learning functional programming in general","Algebraic types (inc discriminated unions and tuples), Async workflows, Easy integration with other .NET libraries, Immutability by default, No dependency cycles, Simple ""one liner"" type definitions for records and DUs, The ""piping"" idiom","Agents (MailboxProcessor), Computation expressions, Interactive development, Object-oriented compatibility, Static type constraints, Units of measure","F# books, Answers to Stack Overflow questions, Personal mentoring, Reading F# code written by experts",I want to learn functional programming but I don't like academic jargon,"More material with in-depth tutorials, More material with short ""cookbook"" style information, More material with real-world examples and war stories, More short ""live coding"" videos, More podcasts and other audio-only material",,Not applicable. None of my F# code is used by other people,"Non-commercial web site/app, Other",,Windows,I don't use F# at work,,,,"Lack of good tutorials/documentation, Not enough real-world code to learn from",compatible versions of FSharp.Core,Native,compatible versions of FSharp.Core,,,"In-person: A talks at user groups, Books or longer articles explaining full context, Reference works or documentation with API listings or short tutorials, Recorded talks from a conference or user group","FsXaml
ProjectScaffold
FSharp.ViewModule
Math.NET Symbolics
",
17/04/2016 23:09:13,5-10 years,Enterprise development,,Experienced,"C#, F#, Java",1-2 years,,I use it at work or for other commercial uses,"Windows, Linux","Visual Studio 2012 or 2013, Xamarin, VS Code (with Ionide)","Twitter, F# Weekly","Better domain modelling with records and unions, Conciseness of code (I can see more at a glance), Functional but can be tweaked to get high performance","Algebraic types (inc discriminated unions and tuples), Async workflows, Computation expressions, Type inference, Type providers, Static type constraints and inline functions",Agents (MailboxProcessor),"F# bloggers, Links mentioned in F# Weekly, F# for fun and profit",I'm willing to learn advanced concepts but only if they are relevant and practical,"More material with in-depth tutorials, More material with short ""cookbook"" style information, More material with real-world examples and war stories",Needs more documentation around libraries. Polished doco gives the pression of a polished product before trying out the library and gives users more confidence in its development and longetivity.,Internal enterprise projects,"Utilities and tools, Financial services","SQL databases, Event sourcing","Windows, Linux",It's officially endorsed in my team for critical/production areas,"Domain modelling: making illegal states unrepresentable, Correctness: fewer bugs and less rework, More productive with fewer developers, Efficiency/Performance, Better for solving complex problems","No perceived benefits: They don't understand what benefits F# has over C# or other languages, Hiring: They worry about not being able to find F# developers, Fad: They have concerns over long term language viability, Too Windows-centric: They have concerns over cross-platform issues, No buy-in: There is lack of acceptance from other teams","More polish in libraries, a good data access story incl more features in type providers (e.g F# types, generics) and nicer use of inline functions and duck typing (better syntax). Overall F# needs to be innovative to stay relevant; it's main competition is C# which will soon get a lot of F# basic features.",Not enough real-world code to learn from,"Lack of F# friendly libraries, Lack of good wrappers for non-F# libraries, Type providers are limited in compiled code where generative type providers are preferred.",,"Lack of Polish/doco in libraries (build when you checkout, handled professionally), and even in features delivered. An example is type providers which should of been able to do everything F# can do from the beginning. The other weakness is C# which is catching up and has a lot more manpower. F# needs to deliver tooling that exploits C# libraries yet makes them more elegant to use with killer features since elegance is F#s strength. E.g type safe routing in web frameworks, static function inlining rather than virtual calls for math libraries, etc. F# needs to be seen as the forefront and the ""better tool"" for it to stay relevant and to justify converting teams to using it.",More f# features should have been listed and some should of been split. For example I like the promise of type providers but I'm an enterprise env erasing ones are less useful than in say data science.  Generative type providers have more promise for F# adoption than the erasing kind.,,"In-person: A talks at user groups, In-person: Attending a talks as part of a conference, Books or longer articles explaining full context, Reference works or documentation with API listings or short tutorials","Vs power tools, fake, paket, F# xamarin add in",
17/04/2016 23:25:01,10 or more years,Open source development,"Yes, I enjoy computer science and mathematics",Experienced,"C#, F#, Haskell, R",Less than a year,,I use it for hobby or side projects,Windows,"Visual Studio 2015 or newer, VS Code (with Ionide)","Twitter, F# Weekly, F# bloggers","Conciseness of code (I can see more at a glance), Correctness (no nulls, it works first time), Great community, Learning functional programming in general","Active Patterns, Algebraic types (inc discriminated unions and tuples), Async workflows, Backtick naming, Immutability by default, Type inference, Type providers, Units of measure","Agents (MailboxProcessor), Integration with non-F# libraries","Links and instructions from fsharp.org, F# bloggers, Videos (e.g. Community for F#), Reading F# code written by experts",I like theory -- I'm not afraid of monads and other abstractions,"More material with in-depth tutorials, More material with real-world examples and war stories",,"Commercial products, Open source projects","Commercial web site/app, Non-commercial web site/app, Mobile apps, Research/Teaching, Data analysis/statistics, Text analysis/language parsing","SQL databases, Read-only data sources such as feeds","Windows, Linux, WinPhone",I don't use F# at work,,,,"Lack of good tutorials/documentation, Not enough real-world code to learn from","Not being part of the core .NET distribution, Cross-platform issues",Native,Tooling.. e.g.: Visual Studio and Folders... Also the steep learning curve :/,WinPhone should be now WinMobile,,"Reference works or documentation with API listings or short tutorials, In-depth online courses (e.g. Pluralsight)",,
17/04/2016 23:36:25,10 or more years,Commercial software/web development,"No, I don't know much theory",Learner,"C#, Javascript, Python",Less than two months,,starting to learn as I know it can be useful in production,"Windows, Linux","Visual Studio 2015 or newer, VS Code (with Ionide)",F# bloggers,"Learning functional programming in general, Functional but can be tweaked to get high performance","Easy integration with other .NET libraries, The ""piping"" idiom",,"F# books, Videos (e.g. Community for F#)",I'm willing to learn advanced concepts but only if they are relevant and practical,"More material with short ""cookbook"" style information, More interactive tutorials (e.g. like the F# Koans)",,Commercial products,"Machine learning, Data analysis/statistics, Text analysis/language parsing","SQL databases, NoSQL database","Windows, Linux, Azure",It's used unofficially,Better for solving complex problems,"No perceived benefits: They don't understand what benefits F# has over C# or other languages, Hiring: They worry about not being able to find F# developers",,,"Lack of F# friendly libraries, Difficulty in troubleshooting problems",None -- I'm happy with the CLR/Mono,,,,"Reference works or documentation with API listings or short tutorials, Recorded talks from a conference or user group, In-depth online courses (e.g. Pluralsight)",,
17/04/2016 23:46:37,10 or more years,Enterprise development,"No, I don't know much theory",Intermediate,"C#, F#, Javascript",2-3 years,,I use it at work or for other commercial uses,Windows,"Visual Studio 2015 or newer, Sublime Text, VS Code (with Ionide)","Twitter, F# Weekly, fsharp channel on Slack","Better domain modelling with records and unions, Great community, Having fun again, Learning functional programming in general","Algebraic types (inc discriminated unions and tuples), Easy integration with other .NET libraries, Immutability by default, The ""piping"" idiom, Type providers","Interactive development, Object expressions","F# bloggers, Links mentioned in F# Weekly, Videos (e.g. Community for F#), Fsharpforfunandprofit.com (best dev site ever, any language, any platform)",I want to learn functional programming but I don't like academic jargon,More material with real-world examples and war stories,"More ent dev examples, less theory. ","Internal enterprise projects, Open source projects","Machine learning, Mainstream business & enterprise applications, Commercial web site/app, Data analysis/statistics, Text analysis/language parsing","SQL databases, Event sourcing, Data integration and EAI","Windows, Azure",It's used unofficially,"Domain modelling: making illegal states unrepresentable, Easy concurrency with async and agents, Better for solving complex problems","No perceived benefits: They don't understand what benefits F# has over C# or other languages, Hiring: They worry about not being able to find F# developers, Microsoft","It's not the community (which is awesome, tbh). The problem is inertia, conservatism, and Microsoft's inability to understand that Enterprise Development  is more functional than OO. ",Not enough real-world code to learn from,"Lack of good wrappers for non-F# libraries, Less sophisticated tools for refactoring, etc.","JVM, Javascript, LLVM",,,,"Books or longer articles explaining full context, Recorded talks from a conference or user group, In-depth online courses (e.g. Pluralsight)","FSharp.Data type provider
FSReveal
Paket
Fake
Azure storage type provider",
17/04/2016 23:47:08,10 or more years,Commercial software/web development,"Yes, I enjoy computer science and mathematics",Intermediate,"C#, C++, F#",3-4 years,,I use it at work or for other commercial uses,Windows,Visual Studio 2015 or newer,"Twitter, F# Weekly, F# bloggers","Better domain modelling with records and unions, Conciseness of code (I can see more at a glance), Correctness (no nulls, it works first time), Great community, Having fun again, Learning functional programming in general","Active Patterns, Agents (MailboxProcessor), Algebraic types (inc discriminated unions and tuples), Async workflows, Computation expressions, Easy integration with other .NET libraries, Immutability by default, Interactive development, No dependency cycles, Object expressions, Object-oriented features (inc. C# compatibility, conciseness), printf that is type checked, Simple ""one liner"" type definitions for records and DUs, The ""piping"" idiom, Type inference, Type providers, Units of measure",Quotations,"MSDN, Links and instructions from fsharp.org, F# books, F# bloggers, Links posted on social media such as Twitter, Links mentioned in F# Weekly, Answers to Stack Overflow questions, Videos (e.g. Community for F#), Reading F# code written by experts",I'm willing to learn advanced concepts but only if they are relevant and practical,"More material with in-depth tutorials, More short ""live coding"" videos",,"Internal enterprise projects, Commercial products","Utilities and tools, Algorithm-heavy business applications (non-financial), Custom development/specialist markets",Not doing data centric apps,Windows,I managed to get some projects written in F# but most of the team haven't looked properly at it and still think they are doing fine with C#.  If only they knew...,"Domain modelling: making illegal states unrepresentable, Correctness: fewer bugs and less rework, Easy concurrency with async and agents, Better for solving complex problems","No perceived benefits: They don't understand what benefits F# has over C# or other languages, Hiring: They worry about not being able to find F# developers, Fad: They have concerns over long term language viability, No buy-in: There is lack of acceptance from other teams",,Unlearning imperative and OO centric thinking/,Working with C#-centric tooling,"Javascript, Native",Compilation speed,,,"Books or longer articles explaining full context, Reference works or documentation with API listings or short tutorials, Recorded talks from a conference or user group",FSharp.Data for type providers to xml etc.,
18/04/2016 00:17:59,5-10 years,Student,"No, I don't know much theory",Learner,"C, C++, Clojure, Haskell, Python",Less than two months,,Just tinkering,"Mac, Linux","Xamarin, Vim",IRC,"Having fun again, Learning functional programming in general",,,,I like theory -- I'm not afraid of monads and other abstractions,"More material with in-depth tutorials, More material with real-world examples and war stories, More interactive tutorials (e.g. like the F# Koans)",,Not applicable. None of my F# code is used by other people,None - Just playing around,Not doing data centric apps,,I don't use F# at work,,,,,,"LLVM, Native",,,,"In-person: In-depth trainings (2 or 3 days), In-person: Shorter workshops focused on a specific topic (1 day), In-person: A talks at user groups, In-person: Attending a talks as part of a conference, Books or longer articles explaining full context, Recorded talks from a conference or user group, In-depth online courses (e.g. Pluralsight)",,
18/04/2016 00:37:30,5-10 years,Student,"No, I don't know much theory",Learner,"C#, Java",I was using F# but have stopped,University hasn't called for the use of F# yet and I've been busy learning the other languages I am required to. Once I get a break from work and have a project to work on I'll be open to furthering my functional programming skills.,Just tinkering,Windows,Visual Studio 2015 or newer,StackOverflow chat,Learning functional programming in general,pattern matching,Active Patterns,Answers to Stack Overflow questions,I'm willing to learn advanced concepts but only if they are relevant and practical,,,,,,,,,,,,,,People who are OO programmers (like myself) will likely struggle to implement functional solutions to problems with F#.,,,"Learn by using. I like to learn things as I should be using them, not as some abstract concept I should remember to use in ""vague"" circumstances",F# syntax highlighting for Visual Studio,
18/04/2016 00:44:52,10 or more years,Data or analytics related,"No, I don't know much theory",Experienced,"C#, F#, Python, R",1-2 years,,I use it at work or for other commercial uses,Windows,Visual Studio 2015 or newer,"F# Weekly, StackOverflow chat","Conciseness of code (I can see more at a glance), Correctness (no nulls, it works first time), Speed of development, Functional but can be tweaked to get high performance","Async workflows, Computation expressions, Immutability by default, Quotations, The ""piping"" idiom, Type inference, Type providers","Active Patterns, Agents (MailboxProcessor)","MSDN, F# books, F# bloggers, Links mentioned in F# Weekly, Answers to Stack Overflow questions",I'm willing to learn advanced concepts but only if they are relevant and practical,"More material with in-depth tutorials, More material with short ""cookbook"" style information, More material with real-world examples and war stories",,Internal enterprise projects,"Utilities and tools, Financial services, Data analysis/statistics","SQL databases, Analytics",Windows,It's used unofficially,"Domain modelling: making illegal states unrepresentable, Correctness: fewer bugs and less rework, More productive with fewer developers, Faster time to market, Efficiency/Performance, Easy concurrency with async and agents, Better for solving complex problems",No perceived benefits: They don't understand what benefits F# has over C# or other languages,,Not enough real-world code to learn from,Performance issues,None -- I'm happy with the CLR/Mono,,,,"Books or longer articles explaining full context, Reference works or documentation with API listings or short tutorials","Parallseq
FSLAB
TypeProviders",
18/04/2016 00:50:09,1-2 years,Start Up,"No, I don't know much theory",Learner,C#,1-2 years,,I use it at work or for other commercial uses,Windows,"Visual Studio 2015 or newer, Atom (with Ionide)",F# bloggers,"Better domain modelling with records and unions, Conciseness of code (I can see more at a glance)","Active Patterns, Algebraic types (inc discriminated unions and tuples), Easy integration with other .NET libraries, The ""piping"" idiom","Agents (MailboxProcessor), Quotations, Units of measure",F# bloggers,I like theory -- I'm not afraid of monads and other abstractions,"More material with in-depth tutorials, More material with short ""cookbook"" style information, More material with real-world examples and war stories",,"Open source projects, Not applicable. None of my F# code is used by other people","Utilities and tools, Commercial web site/app, Non-commercial web site/app","SQL databases, NoSQL database, Read-only data sources such as feeds","Windows, Linux",,"Domain modelling: making illegal states unrepresentable, Correctness: fewer bugs and less rework, Efficiency/Performance, Easy concurrency with async and agents, Better for solving complex problems",,,"Lack of good tutorials/documentation, Not enough real-world code to learn from","Lack of F# friendly libraries, Lack of good wrappers for non-F# libraries, Less sophisticated tools for refactoring, etc., Difficulty in troubleshooting problems","Javascript, Native",,,,"Books or longer articles explaining full context, Reference works or documentation with API listings or short tutorials",,
18/04/2016 02:40:51,10 or more years,Enterprise development,"Yes, I enjoy computer science and mathematics",Intermediate,"C#, F#, Javascript",Less than a year,,Just tinkering,Windows,"Visual Studio 2015 or newer, Linqpad",F# Weekly,Learning functional programming in general,"Immutability by default, The ""piping"" idiom",,"F# books, F# bloggers, Links mentioned in F# Weekly, Videos (e.g. Community for F#), Reading F# code written by experts",I'm willing to learn advanced concepts but only if they are relevant and practical,"More material with in-depth tutorials, More material with short ""cookbook"" style information, More material with real-world examples and war stories, More short ""live coding"" videos, More interactive tutorials (e.g. like the F# Koans)",,Not applicable. None of my F# code is used by other people,None - Just playing around,Not doing data centric apps,,I don't use F# at work,,,,Not enough real-world code to learn from,,None -- I'm happy with the CLR/Mono,,,,"Books or longer articles explaining full context, Reference works or documentation with API listings or short tutorials, Recorded talks from a conference or user group, In-depth online courses (e.g. Pluralsight)",,
18/04/2016 05:45:56,2-5 years,Data or analytics related,"No, I don't know much theory",Experienced,"Java, Python, Scala",Haven't really used it yet,,Just tinkering,Linux,Atom (with Ionide),"Twitter, F# Weekly","Better domain modelling with records and unions, Conciseness of code (I can see more at a glance), Correctness (no nulls, it works first time), Great community, Having fun again","Active Patterns, Agents (MailboxProcessor), Algebraic types (inc discriminated unions and tuples), Backtick naming, Computation expressions, Immutability by default, Object-oriented features (inc. C# compatibility, conciseness), Quotations, The ""piping"" idiom, Type inference, Type providers, Units of measure",Integration with non-F# libraries,"F# books, F# bloggers, Links posted on social media such as Twitter, Links mentioned in F# Weekly, Videos (e.g. Community for F#)",I'm willing to learn advanced concepts but only if they are relevant and practical,"More material with in-depth tutorials, More material with short ""cookbook"" style information, More material with real-world examples and war stories, More interactive tutorials (e.g. like the F# Koans)",,,,,,I don't use F# at work,,,,"Installation process, difficult in using on linux. Not many good tools. Ionide still is young","Less sophisticated tools for refactoring, etc.","JVM, LLVM, Native",,,,"In-person: Shorter workshops focused on a specific topic (1 day), In-person: A talks at user groups, In-person: Attending a talks as part of a conference, Books or longer articles explaining full context, Recorded talks from a conference or user group, In-depth online courses (e.g. Pluralsight)","ionide, try fsharp, akka.net",
18/04/2016 05:48:32,10 or more years,Commercial software/web development,"Yes, I enjoy computer science and mathematics",Intermediate,"C#, F#, Javascript",Less than a year,,I use it at work or for other commercial uses,Windows,"Visual Studio 2015 or newer, VS Code (with Ionide)",F# Weekly,"Better domain modelling with records and unions, Conciseness of code (I can see more at a glance), Correctness (no nulls, it works first time), Great community, Having fun again, Learning functional programming in general","Agents (MailboxProcessor), Algebraic types (inc discriminated unions and tuples), Async workflows, Computation expressions, Easy integration with other .NET libraries, Immutability by default, Interactive development, Simple ""one liner"" type definitions for records and DUs, The ""piping"" idiom, Type inference, Units of measure","Active Patterns, Object expressions","F# books, Links mentioned in F# Weekly, Answers to Stack Overflow questions, Structured training/workshops, Videos (e.g. Community for F#), Pluralsight videos",I like theory -- I'm not afraid of monads and other abstractions,"More material with in-depth tutorials, More material with short ""cookbook"" style information, More material with real-world examples and war stories, More short ""live coding"" videos, More interactive tutorials (e.g. like the F# Koans)",,Commercial products,Commercial web site/app,SQL databases,Windows,It's officially endorsed in my team for non-critical/non-production code,"Domain modelling: making illegal states unrepresentable, Correctness: fewer bugs and less rework, Easy concurrency with async and agents",Training: They are worried about getting non-F# developers up to speed,F# community is not the problem :-),,"Working with C#-centric tooling, Less sophisticated tools for refactoring, etc., Difficulty in troubleshooting problems","None -- I'm happy with the CLR/Mono, Javascript",Refactoring/Tools.,,,"Books or longer articles explaining full context, Reference works or documentation with API listings or short tutorials, Recorded talks from a conference or user group, In-depth online courses (e.g. Pluralsight)",,
18/04/2016 06:30:05,1-2 years,Student,"No, I don't know much theory",Learner,"C#, Java, Python, Typescript",I was using F# but have stopped,I can't understand it yet,Just tinkering,"Windows, Linux","Visual Studio 2015 or newer, Atom (with Ionide), VS Code (with Ionide)",Twitter,"Conciseness of code (I can see more at a glance), Correctness (no nulls, it works first time), Great community","Easy integration with other .NET libraries, Immutability by default, Interactive development, Type inference, Units of measure","Agents (MailboxProcessor), Async workflows, Integration with non-F# libraries, Object-oriented compatibility, Static type constraints","MSDN, F# bloggers, Links posted on social media such as Twitter",I want to learn functional programming but I don't like academic jargon,"More material with in-depth tutorials, More material with short ""cookbook"" style information, More material with real-world examples and war stories, More short ""live coding"" videos",,"Open source projects, Not applicable. None of my F# code is used by other people",None - Just playing around,Not doing data centric apps,"Windows, Linux",I don't use F# at work,,"Money: They worry that good F# developers will cost too much, Training: They are worried about getting non-F# developers up to speed",,"Lack of good tutorials/documentation, Installation process, I can't use my knowledge from C# or other imperative languages, Don't understand the compiler errors","Not being part of the core .NET distribution, Lack of F# friendly libraries, Lack of good wrappers for non-F# libraries, Less sophisticated tools for refactoring, etc., Difficulty in troubleshooting problems, Cross-platform issues","JVM, Javascript, Native",,,,"In-person: In-depth trainings (2 or 3 days), Reference works or documentation with API listings or short tutorials",,
18/04/2016 07:09:09,10 or more years,Commercial software/web development,"Yes, I enjoy computer science and mathematics",Learner,"C#, C++",Less than two months,,Just tinkering,Windows,"Visual Studio 2015 or newer, VS Code (with Ionide)","HN, Reddit and other programming news sites, F# bloggers",Learning functional programming in general,"Active Patterns, Algebraic types (inc discriminated unions and tuples), Easy integration with other .NET libraries, Interactive development, Object expressions, The ""piping"" idiom","Agents (MailboxProcessor), Computation expressions, Type providers","MSDN, Links and instructions from fsharp.org, F# books, F# bloggers, Reading F# code written by experts",I'm willing to learn advanced concepts but only if they are relevant and practical,"More material with short ""cookbook"" style information, More material with real-world examples and war stories, More short ""live coding"" videos",,Not applicable. None of my F# code is used by other people,None - Just playing around,Not doing data centric apps,Windows,I don't use F# at work,,No perceived benefits: They don't understand what benefits F# has over C# or other languages,,"Lack of good tutorials/documentation, Don't understand the compiler errors","Difficulty in troubleshooting problems, Lack of UWP app/lib support.",Native,,,,"Reference works or documentation with API listings or short tutorials, Recorded talks from a conference or user group",,
18/04/2016 07:18:35,10 or more years,Enterprise development,"No, I don't know much theory",Learner,C#,1-2 years,,I use it for hobby or side projects,Windows,"Visual Studio 2015 or newer, Visual Studio 2012 or 2013","Twitter, F# Weekly","Better domain modelling with records and unions, Conciseness of code (I can see more at a glance), Great community, Learning functional programming in general, Speed of development","Active Patterns, Agents (MailboxProcessor), Algebraic types (inc discriminated unions and tuples), Async workflows, Backtick naming, Computation expressions, Easy integration with other .NET libraries, Object-oriented features (inc. C# compatibility, conciseness), Type providers","Quotations, Units of measure","Links and instructions from fsharp.org, F# books, F# bloggers, Links posted on social media such as Twitter, Links mentioned in F# Weekly, Personal mentoring",I'm willing to learn advanced concepts but only if they are relevant and practical,"More material with short ""cookbook"" style information, More material with real-world examples and war stories, More interactive tutorials (e.g. like the F# Koans)",Providing LOB Scenarios with a step by step solution (also introducing and explaining some FP concepts) with refactoring on new insights. e.g. starting with a more OO approach and than switching more and more to FP concepts.,"Internal enterprise projects, Not applicable. None of my F# code is used by other people","Utilities and tools, Other",Not doing data centric apps,Windows,It's officially endorsed in my team for non-critical/non-production code,"Domain modelling: making illegal states unrepresentable, Correctness: fewer bugs and less rework, More productive with fewer developers","Hiring: They worry about not being able to find F# developers, Training: They are worried about getting non-F# developers up to speed, No buy-in: There is lack of acceptance from other teams","More ""Enterprise Marketing"", imho its something MS has to do/support. Difficult for communities to improve classical enterprise development culture.","Don't understand the compiler errors, Not enough real-world code to learn from",Difficulty in troubleshooting problems,"Javascript, LLVM, Native","""Marketing/Visibility"" outside the community.",,Awesome community!,"In-person: In-depth trainings (2 or 3 days), In-person: Shorter workshops focused on a specific topic (1 day), Reference works or documentation with API listings or short tutorials, Recorded talks from a conference or user group","Fake
F# Powertools
Paket
Suave
FSharp.Data",
18/04/2016 07:19:13,10 or more years,Retired,"Yes, I enjoy computer science and mathematics",Intermediate,"C#, C++",Less than a year,,I use it for hobby or side projects,Windows,Visual Studio 2015 or newer,"F# Weekly, F# bloggers","Better domain modelling with records and unions, Correctness (no nulls, it works first time), Learning functional programming in general","Algebraic types (inc discriminated unions and tuples), Computation expressions, Easy integration with other .NET libraries, Simple ""one liner"" type definitions for records and DUs, The ""piping"" idiom, Type inference, Type providers","Active Patterns, Agents (MailboxProcessor), Async workflows, Integration with non-F# libraries, Object expressions, Object-oriented compatibility, Units of measure","MSDN, F# books, F# bloggers",I'm willing to learn advanced concepts but only if they are relevant and practical,"More material with in-depth tutorials, More material with real-world examples and war stories",,Not applicable. None of my F# code is used by other people,Machine learning,Not doing data centric apps,,I don't use F# at work,"Domain modelling: making illegal states unrepresentable, Correctness: fewer bugs and less rework",,,Lack of good tutorials/documentation,,None -- I'm happy with the CLR/Mono,,,,"Books or longer articles explaining full context, Recorded talks from a conference or user group",,
18/04/2016 07:45:42,2-5 years,Enterprise development,"No, I don't know much theory",Intermediate,"C#, F#, Rust",4 or more years,,Just tinkering,"Windows, Linux","Visual Studio 2015 or newer, Emacs",F# Weekly,"Better domain modelling with records and unions, Conciseness of code (I can see more at a glance), Great community, Having fun again, Learning functional programming in general, Speed of development","Async workflows, Computation expressions, Interactive development, The ""piping"" idiom, Type inference, Type providers","Active Patterns, Agents (MailboxProcessor)","Links and instructions from fsharp.org, F# books, F# bloggers, Links mentioned in F# Weekly",I like theory -- I'm not afraid of monads and other abstractions,"More material with in-depth tutorials, More material with short ""cookbook"" style information, More material with real-world examples and war stories",,Not applicable. None of my F# code is used by other people,"Utilities and tools, Machine learning, Data analysis/statistics, Text analysis/language parsing",SQL databases,"Windows, Linux",It's used unofficially,"Correctness: fewer bugs and less rework, More productive with fewer developers","No perceived benefits: They don't understand what benefits F# has over C# or other languages, Hiring: They worry about not being able to find F# developers","I don't know, they have already do a lot",Lack of good tutorials/documentation,"Not being part of the core .NET distribution, Performance issues, Cross-platform issues","LLVM, Native","Too bad OOP support. It's not clear, many bad constructions for supporting OOP and imperative styles",It's OK,,"In-person: Shorter workshops focused on a specific topic (1 day), In-person: A talks at user groups, In-person: Attending a talks as part of a conference, Books or longer articles explaining full context, Reference works or documentation with API listings or short tutorials, Recorded talks from a conference or user group","Paket, FAKE, FSharp.Data, WebSharper, FSharp.Charting",
18/04/2016 07:53:46,10 or more years,Enterprise development,"No, I don't know much theory",Learner,"C#, C++, Python",Less than a year,,I use it for hobby or side projects,"Windows, Mac","Atom (with Ionide), VS Code (with Ionide)","Twitter, F# Weekly","Conciseness of code (I can see more at a glance), Great community, Learning functional programming in general","Active Patterns, Immutability by default, Interactive development, The ""piping"" idiom, Type inference","Agents (MailboxProcessor), Object-oriented compatibility, Quotations","Links and instructions from fsharp.org, F# books, F# bloggers, Links mentioned in F# Weekly",I'm willing to learn advanced concepts but only if they are relevant and practical,"More material with real-world examples and war stories, More interactive tutorials (e.g. like the F# Koans)",,Not applicable. None of my F# code is used by other people,"None - Just playing around, Custom development/specialist markets","Event sourcing, Read-only data sources such as feeds, Not doing data centric apps","Windows, Mac, Linux",It's used unofficially,Better for solving complex problems,"No perceived benefits: They don't understand what benefits F# has over C# or other languages, No buy-in: There is lack of acceptance from other teams",,Installation process,I do not know personaly any developer to work with,None -- I'm happy with the CLR/Mono,"As .Net ecosystem has evolved a lot (.Net Core, DNX) it was hard to figure out which tool to use.
Creating my first project I used DNX which was hard to use for F# development.

Now that I am aware of Fake/Forge/Paket, things tend to be a lot easier.",,,"Books or longer articles explaining full context, Reference works or documentation with API listings or short tutorials, In-depth online courses (e.g. Pluralsight)",,
18/04/2016 08:08:00,10 or more years,Commercial software/web development,"No, I don't know much theory",Intermediate,"C#, C++, F#, Javascript",1-2 years,,I use it for hobby or side projects,Windows,"Visual Studio 2015 or newer, Vim","F# Weekly, HN, Reddit and other programming news sites, F# bloggers, fsharp channel on Slack","Better domain modelling with records and unions, Conciseness of code (I can see more at a glance), Correctness (no nulls, it works first time), Great community, Having fun again, Learning functional programming in general","Active Patterns, Algebraic types (inc discriminated unions and tuples), Async workflows, Easy integration with other .NET libraries, Immutability by default, Object-oriented features (inc. C# compatibility, conciseness), Simple ""one liner"" type definitions for records and DUs, The ""piping"" idiom, Type inference, Type providers",Units of measure,"Links and instructions from fsharp.org, F# books, Links mentioned in F# Weekly",I like theory -- I'm not afraid of monads and other abstractions,"More short ""live coding"" videos, More interactive tutorials (e.g. like the F# Koans)",,Open source projects,Non-commercial web site/app,SQL databases,"Windows, WinPhone",It's used unofficially,"Correctness: fewer bugs and less rework, More productive with fewer developers","No perceived benefits: They don't understand what benefits F# has over C# or other languages, Hiring: They worry about not being able to find F# developers, Training: They are worried about getting non-F# developers up to speed, Fad: They have concerns over long term language viability",,"Lack of good tutorials/documentation, Not enough real-world code to learn from","Not being part of the core .NET distribution, Lack of good wrappers for non-F# libraries, Working with C#-centric tooling, Less sophisticated tools for refactoring, etc.",Javascript,,,,"Books or longer articles explaining full context, Recorded talks from a conference or user group, In-depth online courses (e.g. Pluralsight)",,
18/04/2016 08:08:01,10 or more years,Commercial software/web development,"Yes, I enjoy computer science and mathematics",Experienced,"C, C#, C++, F#",2-3 years,,I use it at work or for other commercial uses,Windows,"Visual Studio 2015 or newer, Visual Studio 2012 or 2013",F# Weekly,"Better domain modelling with records and unions, Conciseness of code (I can see more at a glance), Correctness (no nulls, it works first time), Great community, Having fun again, Learning functional programming in general, Speed of development, Functional but can be tweaked to get high performance","Active Patterns, Agents (MailboxProcessor), Algebraic types (inc discriminated unions and tuples), Async workflows, Computation expressions, Immutability by default, No dependency cycles, Object expressions, printf that is type checked, Quotations, Simple ""one liner"" type definitions for records and DUs, The ""piping"" idiom, Type inference, Type providers, Units of measure","Interactive development, Units of measure","F# books, Links mentioned in F# Weekly, Answers to Stack Overflow questions, fsharpforfunandprofit.com",I like theory -- I'm not afraid of monads and other abstractions,"More material with in-depth tutorials, More material with short ""cookbook"" style information, More material with real-world examples and war stories, fsharpforfunandprofit.com",The web site fsharpforfunandprofit.com has been my prime source of knowledge for learning F# properly. It starts where the books stops.,Commercial products,"Algorithm-heavy business applications (non-financial), Commercial web site/app",SQL databases,Windows,It's officially endorsed in my team for critical/production areas,"Domain modelling: making illegal states unrepresentable, Correctness: fewer bugs and less rework, More productive with fewer developers, Faster time to market, Efficiency/Performance, Easy concurrency with async and agents, Better for solving complex problems",Slow to adapt,Put pressure on Microsoft to put more resources into F#.,Lack of good tutorials/documentation,"Working with C#-centric tooling, Less sophisticated tools for refactoring, etc., Less support for F# GUI in VS",Native,F# should have everything C# has in Visual Studio.,,,"Books or longer articles explaining full context, Reference works or documentation with API listings or short tutorials, fsharpforfunandprofit.com","F# Power Tools
Unquote",
18/04/2016 08:10:43,10 or more years,Data or analytics related,"No, I don't know much theory",Intermediate,"C#, F#, Python",3-4 years,,I use it at work or for other commercial uses,"Windows, Mac","Visual Studio 2015 or newer, Visual Studio 2012 or 2013, Xamarin, Atom (with Ionide)","F# Weekly, HN, Reddit and other programming news sites, F# bloggers, fsharp channel on Slack","Better domain modelling with records and unions, Conciseness of code (I can see more at a glance), Correctness (no nulls, it works first time), Having fun again, Learning functional programming in general, Speed of development","Active Patterns, Algebraic types (inc discriminated unions and tuples), Backtick naming, Computation expressions, Immutability by default, Interactive development, The ""piping"" idiom, Type inference, Type providers, Units of measure","Agents (MailboxProcessor), Object expressions","F# books, F# bloggers, Links mentioned in F# Weekly, Answers to Stack Overflow questions, Videos (e.g. Community for F#), Reading F# code written by experts",I'm willing to learn advanced concepts but only if they are relevant and practical,"More material with short ""cookbook"" style information, More material with real-world examples and war stories",,"Internal enterprise projects, Open source projects","Algorithm-heavy business applications (non-financial), Non-commercial web site/app, Data analysis/statistics, Text analysis/language parsing","SQL databases, NoSQL database, Event sourcing, Read-only data sources such as feeds, Data integration and EAI","Windows, Mac, Linux",It's used unofficially,"Domain modelling: making illegal states unrepresentable, Correctness: fewer bugs and less rework, More productive with fewer developers, Efficiency/Performance, Better for solving complex problems","Hiring: They worry about not being able to find F# developers, Training: They are worried about getting non-F# developers up to speed, No buy-in: There is lack of acceptance from other teams",,Don't understand the compiler errors,"Not being part of the core .NET distribution, Difficulty in troubleshooting problems",JVM,,,,"Reference works or documentation with API listings or short tutorials, Recorded talks from a conference or user group, In-depth online courses (e.g. Pluralsight)","FAKE, Paket, Deedle, FsLab",
18/04/2016 08:13:05,2-5 years,Enterprise development,"No, I don't know much theory",Beginner,C#,Haven't really used it yet,,Just tinkering,Windows,Visual Studio 2015 or newer,F# Weekly,,,,"Links and instructions from fsharp.org, http://fsharpforfunandprofit.com/",I'm willing to learn advanced concepts but only if they are relevant and practical,"More material with in-depth tutorials, More material with real-world examples and war stories, More interactive tutorials (e.g. like the F# Koans)","Providing real-life examples that go a step further than your everyday ""hello world!"" - how to use it with MVC, how to use it with Entity Framwork, ...",,,,,I don't use F# at work,,,,"Lack of good tutorials/documentation, I can't use my knowledge from C# or other imperative languages, Not enough real-world code to learn from",,None -- I'm happy with the CLR/Mono,,,,"Books or longer articles explaining full context, Reference works or documentation with API listings or short tutorials",,
18/04/2016 08:18:07,5-10 years,Commercial software/web development,"Yes, I enjoy computer science and mathematics",Intermediate,"C#, F#",1-2 years,,Just tinkering,Windows,"Visual Studio 2015 or newer, Atom (with Ionide), VS Code (with Ionide)","Twitter, HN, Reddit and other programming news sites","Better domain modelling with records and unions, Conciseness of code (I can see more at a glance), Correctness (no nulls, it works first time), Great community, Having fun again, Learning functional programming in general","Algebraic types (inc discriminated unions and tuples), Backtick naming, Computation expressions, Easy integration with other .NET libraries, Immutability by default, Interactive development, Quotations, Simple ""one liner"" type definitions for records and DUs, The ""piping"" idiom, Type inference, Type providers","Agents (MailboxProcessor), Units of measure","Links and instructions from fsharp.org, F# bloggers",I'm willing to learn advanced concepts but only if they are relevant and practical,More material with real-world examples and war stories,"Higher adoption in workplace so that you can ""learn/practice in the job""",Scripts,"None - Just playing around, Utilities and tools",Read-only data sources such as feeds,Windows,It's used unofficially,Scripting,"No perceived benefits: They don't understand what benefits F# has over C# or other languages, Hiring: They worry about not being able to find F# developers, Training: They are worried about getting non-F# developers up to speed, Fad: They have concerns over long term language viability, No buy-in: There is lack of acceptance from other teams",,,"Working with C#-centric tooling, Less sophisticated tools for refactoring, etc.","None -- I'm happy with the CLR/Mono, Javascript, Native",,,,"Books or longer articles explaining full context, Reference works or documentation with API listings or short tutorials, Recorded talks from a conference or user group, In-depth online courses (e.g. Pluralsight)",,
18/04/2016 08:21:46,10 or more years,Financial services or similar,"Yes, I enjoy computer science and mathematics",Experienced,F#,4 or more years,,I use it at work or for other commercial uses,Windows,Visual Studio 2012 or 2013,"Twitter, F# Weekly","Conciseness of code (I can see more at a glance), Correctness (no nulls, it works first time), Functional but can be tweaked to get high performance","Algebraic types (inc discriminated unions and tuples), Async workflows, Interactive development, Type inference","Quotations, Type providers, Units of measure","F# books, Doing it !",I'm willing to learn advanced concepts but only if they are relevant and practical,,,Internal enterprise projects,"Financial services, Data analysis/statistics","SQL databases, NoSQL database, Read-only data sources such as feeds",Windows,It's officially endorsed in my team for critical/production areas,"Correctness: fewer bugs and less rework, More productive with fewer developers, Easy concurrency with async and agents, Better for solving complex problems",Nothing. Everyone loves it.,,,Lack of F# friendly libraries,None -- I'm happy with the CLR/Mono,,,,,,
18/04/2016 09:06:35,10 or more years,Financial services or similar,"Yes, I enjoy computer science and mathematics",Learner,"C#, Javascript",Haven't really used it yet,,Just tinkering,Windows,Visual Studio 2015 or newer,"Twitter, F# bloggers",Learning functional programming in general,,,"F# books, F# bloggers",I like theory -- I'm not afraid of monads and other abstractions,More material with real-world examples and war stories,,,,,,I don't use F# at work,,"No perceived benefits: They don't understand what benefits F# has over C# or other languages, Training: They are worried about getting non-F# developers up to speed",,,,None -- I'm happy with the CLR/Mono,,,,Books or longer articles explaining full context,,
18/04/2016 09:24:05,5-10 years,Commercial software/web development,"No, I don't know much theory",Beginner,"C, C#, C++, Go, Python, rust",Haven't really used it yet,Haskell,Just tinkering,Linux,"MonoDevelop, Vim, Sublime Text, Atom (with Ionide)","HN, Reddit and other programming news sites, fsharp channel on Slack, IRC",,,,"MSDN, Links and instructions from fsharp.org, F# books, F# bloggers",I'm willing to learn advanced concepts but only if they are relevant and practical,"More material with in-depth tutorials, More material with short ""cookbook"" style information, More material with real-world examples and war stories, More short ""live coding"" videos, More interactive tutorials (e.g. like the F# Koans)",,Not applicable. None of my F# code is used by other people,None - Just playing around,Not doing data centric apps,Linux,I don't use F# at work,,"No perceived benefits: They don't understand what benefits F# has over C# or other languages, Training: They are worried about getting non-F# developers up to speed, Fad: They have concerns over long term language viability, Too Windows-centric: They have concerns over cross-platform issues, Too Microsoft-centric: They think it is too closely linked to Microsoft",,,"Not being part of the core .NET distribution, Lack of F# friendly libraries, Lack of good wrappers for non-F# libraries","None -- I'm happy with the CLR/Mono, LLVM, Native",,,,"In-person: In-depth trainings (2 or 3 days), In-person: Shorter workshops focused on a specific topic (1 day), In-person: A talks at user groups, Books or longer articles explaining full context, Recorded talks from a conference or user group, In-depth online courses (e.g. Pluralsight)",,
18/04/2016 09:28:09,5-10 years,Commercial software/web development,"No, I don't know much theory",Intermediate,"C#, F#, Javascript, Typescript",1-2 years,,I use it at work or for other commercial uses,"Windows, Linux","Visual Studio 2015 or newer, MonoDevelop","F# Weekly, HN, Reddit and other programming news sites","Better domain modelling with records and unions, Conciseness of code (I can see more at a glance), Correctness (no nulls, it works first time), Having fun again","Algebraic types (inc discriminated unions and tuples), Computation expressions, Easy integration with other .NET libraries, Immutability by default, Interactive development, Type inference, Type providers, Units of measure","Active Patterns, Agents (MailboxProcessor), Object expressions, Object-oriented compatibility, Quotations","MSDN, F# bloggers, Links mentioned in F# Weekly, Answers to Stack Overflow questions, Videos (e.g. Community for F#), fsharpforfunandprofit",I like theory -- I'm not afraid of monads and other abstractions,"More material with in-depth tutorials, More material with real-world examples and war stories",Awesome question :),Commercial products,"Mainstream business & enterprise applications, Commercial web site/app, Data analysis/statistics","SQL databases, NoSQL database","Windows, Amazon Web services",It's officially endorsed in my team for critical/production areas,"Domain modelling: making illegal states unrepresentable, Correctness: fewer bugs and less rework, Easy concurrency with async and agents, Better for solving complex problems","No perceived benefits: They don't understand what benefits F# has over C# or other languages, Hiring: They worry about not being able to find F# developers, Training: They are worried about getting non-F# developers up to speed, No buy-in: There is lack of acceptance from other teams",,"Don't understand the compiler errors, No higher kinded types(haskell fan here)","Not being part of the core .NET distribution, Less sophisticated tools for refactoring, etc., Difficulty in troubleshooting problems, Cross-platform issues","None -- I'm happy with the CLR/Mono, LLVM",Cross platform development. I've tried CoreCLR and Mono but both feels unstable and buggy.,,Keep up with the good job you guys are doing(just give a bit more love to linux).,"Reference works or documentation with API listings or short tutorials, Recorded talks from a conference or user group, In-depth online courses (e.g. Pluralsight)","Fake
FSharp.Data",
18/04/2016 09:35:49,2-5 years,Enterprise development,"No, I don't know much theory",Learner,"C#, Javascript",Less than a year,I only use F# for side project and fun. It's hard to maintain when you don't use it at work.,I use it for hobby or side projects,Windows,"Visual Studio 2015 or newer, Sublime Text, VS Code (with Ionide)","Twitter, F# Weekly, F# bloggers","Better domain modelling with records and unions, Correctness (no nulls, it works first time), Learning functional programming in general","Immutability by default, The ""piping"" idiom","Agents (MailboxProcessor), Object-oriented compatibility","F# bloggers, Links mentioned in F# Weekly, Structured training/workshops, Videos (e.g. Community for F#)",I'm willing to learn advanced concepts but only if they are relevant and practical,"More material with short ""cookbook"" style information, More material with real-world examples and war stories, More short ""live coding"" videos",,Not applicable. None of my F# code is used by other people,Commercial web site/app,Not doing data centric apps,Windows,I don't use F# at work,,"Training: They are worried about getting non-F# developers up to speed, No buy-in: There is lack of acceptance from other teams",,Not enough real-world code to learn from,"Lack of F# friendly libraries, Lack of good wrappers for non-F# libraries, Working with C#-centric tooling",None -- I'm happy with the CLR/Mono,,,,"Books or longer articles explaining full context, Recorded talks from a conference or user group, In-depth online courses (e.g. Pluralsight)","suave, fake, the repl (fsi.exe)",
18/04/2016 09:44:22,5-10 years,Enterprise development,"No, I don't know much theory",Experienced,"C#, F#, Rust",4 or more years,,I use it for hobby or side projects,"Windows, Mac","Visual Studio 2015 or newer, Xamarin, VS Code (with Ionide)","Twitter, F# Weekly, F# bloggers","Better domain modelling with records and unions, Conciseness of code (I can see more at a glance), Correctness (no nulls, it works first time), Great community, Having fun again, Learning functional programming in general, Speed of development, Functional but can be tweaked to get high performance","Active Patterns, Agents (MailboxProcessor), Algebraic types (inc discriminated unions and tuples), Async workflows, Computation expressions, Easy integration with other .NET libraries, Immutability by default, No dependency cycles, Object expressions, printf that is type checked, Simple ""one liner"" type definitions for records and DUs, The ""piping"" idiom, Type inference","Object-oriented compatibility, Quotations, Type providers, Units of measure","F# books, F# bloggers, Personal mentoring, Reading F# code written by experts",,More podcasts and other audio-only material,"I think the hardest part is making it clear how un-hard it is! I think theres still a bit of an aura of FP is for maths, and as soon as people start hearing words theyve not come across in (for example) C# (ie discriminated union, algebraic data type, monad, etc) they assume it's hard. 

I think (ironically) the adoption of many of these ideas in C# could help drive F# adoption. A large population of devs will become accustomed to the vocabulary, realise it's not hard, and how in fact the ideas help, and start to move to F# for the other features such as type-providers.  ",Commercial products,"Financial services, Games",Not doing data centric apps,"Windows, Mac, iOS, Android",It's used unofficially,"Domain modelling: making illegal states unrepresentable, Easy concurrency with async and agents, Better for solving complex problems",Training: They are worried about getting non-F# developers up to speed,,"None, but i jumoed that hurdle 7 years ago!","Lack of good wrappers for non-F# libraries, Less sophisticated tools for refactoring, etc.","JVM, LLVM, Native",None really,,,,I dont generally consume lots of F# specific libraries. The main 2 I do use are FParsec & FSCheck,
18/04/2016 09:47:23,10 or more years,Enterprise development,"Yes, I enjoy computer science and mathematics",Intermediate,"C#, F#",3-4 years,,I use it for hobby or side projects,"Windows, Mac","Visual Studio 2015 or newer, Atom (with Ionide)","F# Weekly, F# bloggers","Better domain modelling with records and unions, Conciseness of code (I can see more at a glance), Correctness (no nulls, it works first time)","Algebraic types (inc discriminated unions and tuples), Async workflows, Easy integration with other .NET libraries, Immutability by default","Agents (MailboxProcessor), Type providers","Links and instructions from fsharp.org, F# bloggers, Links mentioned in F# Weekly, Reading F# code written by experts",I like theory -- I'm not afraid of monads and other abstractions,"More material with in-depth tutorials, More podcasts and other audio-only material",,Not applicable. None of my F# code is used by other people,"Algorithm-heavy business applications (non-financial), Non-commercial web site/app, Research/Teaching, Data analysis/statistics",Analytics,"Mac, Other",It's used unofficially,"Domain modelling: making illegal states unrepresentable, Correctness: fewer bugs and less rework","Training: They are worried about getting non-F# developers up to speed, No buy-in: There is lack of acceptance from other teams",,,"Less sophisticated tools for refactoring, etc.",LLVM,,,,"Books or longer articles explaining full context, Recorded talks from a conference or user group","suave.io
",
18/04/2016 09:54:52,10 or more years,Enterprise development,"No, I don't know much theory",Intermediate,"C#, F#, Javascript",1-2 years,,I use it at work or for other commercial uses,Windows,Visual Studio 2015 or newer,"Twitter, F# Weekly",Better domain modelling with records and unions,Algebraic types (inc discriminated unions and tuples),"Quotations, Units of measure","Links posted on social media such as Twitter, Links mentioned in F# Weekly",I'm willing to learn advanced concepts but only if they are relevant and practical,"More material with in-depth tutorials, More material with short ""cookbook"" style information, More material with real-world examples and war stories, More short ""live coding"" videos, More podcasts and other audio-only material, More interactive tutorials (e.g. like the F# Koans)",,Internal enterprise projects,"Algorithm-heavy business applications (non-financial), Financial services, Data analysis/statistics","SQL databases, Event sourcing, Read-only data sources such as feeds",Windows,It's officially endorsed in my team for critical/production areas,"Domain modelling: making illegal states unrepresentable, Correctness: fewer bugs and less rework",Training: They are worried about getting non-F# developers up to speed,,,"Working with C#-centric tooling, Less sophisticated tools for refactoring, etc.",None -- I'm happy with the CLR/Mono,,,,"In-person: In-depth trainings (2 or 3 days), In-person: Shorter workshops focused on a specific topic (1 day), In-person: Attending a talks as part of a conference, Reference works or documentation with API listings or short tutorials",,
18/04/2016 10:24:46,10 or more years,Enterprise development,"No, I don't know much theory",Intermediate,C#,1-2 years,,I use it for hobby or side projects,Windows,"Visual Studio 2015 or newer, VS Code (with Ionide)","F# Weekly, Google groups, fsharp channel on Slack","Better domain modelling with records and unions, Correctness (no nulls, it works first time), Learning functional programming in general","Immutability by default, Object-oriented features (inc. C# compatibility, conciseness), The ""piping"" idiom, Type inference, Type providers, Units of measure",Computation expressions,"Links and instructions from fsharp.org, F# bloggers",I'm willing to learn advanced concepts but only if they are relevant and practical,"More material with in-depth tutorials, More material with real-world examples and war stories",,Not applicable. None of my F# code is used by other people,"Utilities and tools, Commercial web site/app","SQL databases, NoSQL database",Windows,I don't use F# at work,,"No perceived benefits: They don't understand what benefits F# has over C# or other languages, Hiring: They worry about not being able to find F# developers, Fad: They have concerns over long term language viability",,,Working with C#-centric tooling,"LLVM, Native",Perceived lack of support from Microsoft.,,,"In-person: A talks at user groups, Books or longer articles explaining full context, In-depth online courses (e.g. Pluralsight)",,
18/04/2016 10:35:20,2-5 years,Science or related,"No, I don't know much theory",Intermediate,"C#, F#, Python",2-3 years,,I use it at work or for other commercial uses,Windows,"Visual Studio 2015 or newer, Tsunami","Twitter, F# Weekly, F# bloggers","Conciseness of code (I can see more at a glance), Great community, Functional but can be tweaked to get high performance","Active Patterns, Algebraic types (inc discriminated unions and tuples), Easy integration with other .NET libraries, Simple ""one liner"" type definitions for records and DUs, The ""piping"" idiom, Type inference, Type providers","Agents (MailboxProcessor), Computation expressions, Object expressions, Quotations","F# bloggers, Links posted on social media such as Twitter, Links mentioned in F# Weekly, Answers to Stack Overflow questions, Videos (e.g. Community for F#), Reading F# code written by experts",I'm willing to learn advanced concepts but only if they are relevant and practical,"More material with in-depth tutorials, More short ""live coding"" videos, More podcasts and other audio-only material",,Internal enterprise projects,Custom development/specialist markets,Not doing data centric apps,Windows,It's used unofficially,"Domain modelling: making illegal states unrepresentable, Correctness: fewer bugs and less rework, Efficiency/Performance, Better for solving complex problems",,,,"Less sophisticated tools for refactoring, etc.",Javascript,,,,In-depth online courses (e.g. Pluralsight),,
18/04/2016 10:53:27,10 or more years,Commercial software/web development,"No, I don't know much theory",Learner,"C#, C++, F#",Less than a year,,I use it at work or for other commercial uses,Windows,Visual Studio 2015 or newer,F# Weekly,"Better domain modelling with records and unions, Conciseness of code (I can see more at a glance), Correctness (no nulls, it works first time), Learning functional programming in general","Algebraic types (inc discriminated unions and tuples), Easy integration with other .NET libraries, Immutability by default, No dependency cycles, Object-oriented features (inc. C# compatibility, conciseness), Simple ""one liner"" type definitions for records and DUs, The ""piping"" idiom, Type inference","Agents (MailboxProcessor), Async workflows, Interactive development, Quotations, Units of measure","Links mentioned in F# Weekly, Videos (e.g. Community for F#), Reading F# code written by experts, fsharpforfunandprofit.com",I like theory -- I'm not afraid of monads and other abstractions,"More material with in-depth tutorials, More material with real-world examples and war stories, More short ""live coding"" videos",Project templates for common uses with working sample code. Would allow to tinker around and try stuff without a lot of upfront work.,Commercial products,"Algorithm-heavy business applications (non-financial), Machine learning, Data analysis/statistics",Data integration and EAI,Windows,It's officially endorsed in my team for non-critical/non-production code,"Domain modelling: making illegal states unrepresentable, Correctness: fewer bugs and less rework, Better for solving complex problems","Training: They are worried about getting non-F# developers up to speed, Fad: They have concerns over long term language viability",,"Don't understand the compiler errors, Not enough real-world code to learn from","Less sophisticated tools for refactoring, etc., Difficulty in troubleshooting problems","LLVM, Native","The IDEs aren't good at representing the ""No dependency cycle"" approach. In VS Code the files and folders are always sorted by name and in VS2015 the projects are always sorted by name, independent of their build-order.",,Keep up the good work! <3,"Books or longer articles explaining full context, Recorded talks from a conference or user group",,
18/04/2016 11:47:13,5-10 years,Enterprise development,"Yes, I enjoy computer science and mathematics",Intermediate,"C#, F#, Javascript, Ocaml/SML, Python",4 or more years,,I use it for hobby or side projects,"Windows, Mac","Visual Studio 2015 or newer, Visual Studio 2012 or 2013, VS Code (with Ionide), OmniSharp","F# Weekly, HN, Reddit and other programming news sites, F# bloggers","Better domain modelling with records and unions, Great community, Having fun again","Active Patterns, Algebraic types (inc discriminated unions and tuples), Backtick naming, Immutability by default, Interactive development, No dependency cycles, The ""piping"" idiom, Type inference, Type providers","Agents (MailboxProcessor), Async workflows, Quotations, Static type constraints, Units of measure","Links and instructions from fsharp.org, F# bloggers, Links mentioned in F# Weekly, Answers to Stack Overflow questions, Videos (e.g. Community for F#), Reading F# code written by experts",I'm willing to learn advanced concepts but only if they are relevant and practical,"More material with in-depth tutorials, More material with short ""cookbook"" style information, More material with real-world examples and war stories",more things to try online like tryfsharp,Not applicable. None of my F# code is used by other people,"None - Just playing around, Utilities and tools, Non-commercial web site/app, Text analysis/language parsing",Event sourcing,"Windows, Mac, Linux",It's used unofficially,"fake, paket","No perceived benefits: They don't understand what benefits F# has over C# or other languages, Hiring: They worry about not being able to find F# developers, Fad: They have concerns over long term language viability, No buy-in: There is lack of acceptance from other teams","spread the word
embrace the microservice trend and make F# THE language on .NET for this approach","Lack of good tutorials/documentation, Installation process, Not enough real-world code to learn from","Not being part of the core .NET distribution, Working with C#-centric tooling, Less sophisticated tools for refactoring, etc., Difficulty in troubleshooting problems",Native,weak .Net Core support of F# and F# libraries,,,"Books or longer articles explaining full context, Reference works or documentation with API listings or short tutorials, Recorded talks from a conference or user group","argu
fparsec
paket
fake
fancy",
18/04/2016 11:59:36,2-5 years,Enterprise development,"No, I don't know much theory",Learner,"C#, F#",2-3 years,,I use it at work or for other commercial uses,Windows,Visual Studio 2015 or newer,Twitter,"Better domain modelling with records and unions, Correctness (no nulls, it works first time), Great community","Agents (MailboxProcessor), Algebraic types (inc discriminated unions and tuples), Async workflows, Immutability by default, Simple ""one liner"" type definitions for records and DUs, The ""piping"" idiom","Active Patterns, Computation expressions, Interactive development, Quotations","F# bloggers, Links posted on social media such as Twitter, Answers to Stack Overflow questions, Personal mentoring",I'm willing to learn advanced concepts but only if they are relevant and practical,,,Commercial products,Financial services,,Windows,It's officially endorsed in my team for critical/production areas,"Domain modelling: making illegal states unrepresentable, Correctness: fewer bugs and less rework, Easy concurrency with async and agents","Hiring: They worry about not being able to find F# developers, Training: They are worried about getting non-F# developers up to speed, Fad: They have concerns over long term language viability",,Don't understand the compiler errors,"Less sophisticated tools for refactoring, etc., Difficulty in troubleshooting problems",None -- I'm happy with the CLR/Mono,,,,"In-person: Shorter workshops focused on a specific topic (1 day), In-person: A talks at user groups, In-person: Attending a talks as part of a conference, In-depth online courses (e.g. Pluralsight)",,
18/04/2016 12:15:49,2-5 years,Enterprise development,"Yes, I enjoy computer science and mathematics",Learner,"C#, Python",Less than a year,,I use it for hobby or side projects,Windows,Visual Studio 2015 or newer,"F# Weekly, F# bloggers",Learning functional programming in general,"Algebraic types (inc discriminated unions and tuples), The ""piping"" idiom",Quotations,MSDN,I like theory -- I'm not afraid of monads and other abstractions,More material with real-world examples and war stories,,Not applicable. None of my F# code is used by other people,None - Just playing around,Not doing data centric apps,Windows,It's used unofficially,"Correctness: fewer bugs and less rework, Easy concurrency with async and agents","Hiring: They worry about not being able to find F# developers, Training: They are worried about getting non-F# developers up to speed",,"Don't understand the compiler errors, Not enough real-world code to learn from","Less sophisticated tools for refactoring, etc., Difficulty in troubleshooting problems",None -- I'm happy with the CLR/Mono,,,,Books or longer articles explaining full context,,
18/04/2016 12:24:11,10 or more years,Commercial software/web development,"No, I don't know much theory",Beginner,"C#, Javascript, Typescript",Less than a year,"I keep starting and stopping with F#.  Seems like that the paradigm shift is enough that I cannot retain what I ""learned"" from previous sessions.
",Just tinkering,Windows,Visual Studio 2015 or newer,"Twitter, F# Weekly, skillsmatter.com and fsharp.org","Having fun again, Learning functional programming in general","Immutability by default, Interactive development",,"Links and instructions from fsharp.org, F# bloggers, Links mentioned in F# Weekly",I'm willing to learn advanced concepts but only if they are relevant and practical,"More material with in-depth tutorials, More material with real-world examples and war stories","The book ecosystem around F# appears slim or out of date.  Could just be me but none of the available books appear to be ""the"" book to get.",Commercial products,"None - Just playing around, Utilities and tools, Commercial web site/app","SQL databases, Event sourcing, Data integration and EAI","Windows, Azure",I don't use F# at work,,"No perceived benefits: They don't understand what benefits F# has over C# or other languages, Hiring: They worry about not being able to find F# developers, Money: They worry that good F# developers will cost too much, Fad: They have concerns over long term language viability",,I can't use my knowledge from C# or other imperative languages,,None -- I'm happy with the CLR/Mono,"""monads""",,,"Books or longer articles explaining full context, Reference works or documentation with API listings or short tutorials, In-depth online courses (e.g. Pluralsight)",,
18/04/2016 12:27:59,10 or more years,Enterprise development,"No, I don't know much theory",Intermediate,"C#, F#, Javascript, Typescript",1-2 years,,I use it at work or for other commercial uses,Windows,"Visual Studio 2015 or newer, Atom (with Ionide), VS Code (with Ionide)","Twitter, F# Weekly, F# bloggers","Better domain modelling with records and unions, Correctness (no nulls, it works first time), Having fun again, Learning functional programming in general, Speed of development","Active Patterns, Algebraic types (inc discriminated unions and tuples), Backtick naming, Easy integration with other .NET libraries, Immutability by default, Interactive development, The ""piping"" idiom, Type inference, Type providers","Agents (MailboxProcessor), Quotations, Units of measure","F# books, F# bloggers, Links posted on social media such as Twitter, Links mentioned in F# Weekly, Structured training/workshops, Videos (e.g. Community for F#)",I want to learn functional programming but I don't like academic jargon,"More material with short ""cookbook"" style information, More interactive tutorials (e.g. like the F# Koans)",,Internal enterprise projects,"Utilities and tools, Mainstream business & enterprise applications",SQL databases,Windows,It's officially endorsed in my team for non-critical/non-production code,"Domain modelling: making illegal states unrepresentable, Correctness: fewer bugs and less rework, More productive with fewer developers",Hiring: They worry about not being able to find F# developers,,,"Less sophisticated tools for refactoring, etc.","Javascript, LLVM",association with hard core science or finance  - thought appreciate that lots of work has gone into overturning this misconception,,,"In-person: In-depth trainings (2 or 3 days), In-person: Shorter workshops focused on a specific topic (1 day), In-person: A talks at user groups, In-person: Attending a talks as part of a conference, Books or longer articles explaining full context, Recorded talks from a conference or user group, In-depth online courses (e.g. Pluralsight)","Canopy for test automation
Fake for build tasks
Fsharp.Data type provider",
18/04/2016 12:51:28,10 or more years,Enterprise development,"Yes, I enjoy computer science and mathematics",Intermediate,"C#, F#",Less than a year,,Just tinkering,Windows,"Visual Studio 2015 or newer, Visual Studio 2012 or 2013","Twitter, F# Weekly","Better domain modelling with records and unions, Conciseness of code (I can see more at a glance), Correctness (no nulls, it works first time), Having fun again, Learning functional programming in general","Active Patterns, Computation expressions, Easy integration with other .NET libraries, Immutability by default",,"Links and instructions from fsharp.org, F# books, Links mentioned in F# Weekly",I'm willing to learn advanced concepts but only if they are relevant and practical,,,,,,,,,,,,,"JVM, Javascript, LLVM",,,,,,
18/04/2016 13:54:48,10 or more years,Commercial software/web development,"No, I don't know much theory",Experienced,"C#, C++, F#, Javascript, Typescript",3-4 years,,I use it for hobby or side projects,Windows,Visual Studio 2015 or newer,"F# Weekly, HN, Reddit and other programming news sites","Better domain modelling with records and unions, Correctness (no nulls, it works first time), Having fun again, Speed of development, Functional but can be tweaked to get high performance","Algebraic types (inc discriminated unions and tuples), Computation expressions, Immutability by default, Interactive development, No dependency cycles, Object expressions, printf that is type checked",Active Patterns,"MSDN, F# books",I like theory -- I'm not afraid of monads and other abstractions,More material with real-world examples and war stories,It's already quite easy :),,,,,It's used unofficially,"Domain modelling: making illegal states unrepresentable, Correctness: fewer bugs and less rework, More productive with fewer developers","Hiring: They worry about not being able to find F# developers, Training: They are worried about getting non-F# developers up to speed","Better show the benefits in real-world projects, which might not be always the most exciting last-and-greatest machine-learning microservice-based number crunching code, but ordinary business functionality in which F#'s domain modeling power really excels.",Not enough real-world code to learn from,"Working with C#-centric tooling, Less sophisticated tools for refactoring, etc.","Javascript, LLVM",Lack of traits/typeclasses (probably hard to fix considering the CLR's design).,,,"In-person: In-depth trainings (2 or 3 days), Books or longer articles explaining full context, Recorded talks from a conference or user group","Visual F# Power Tools extension, FSharpx.Collections, FsUnit",
18/04/2016 14:38:21,10 or more years,Enterprise development,"Yes, I enjoy computer science and mathematics",Learner,"C, C#, Java, Javascript, Typescript",2-3 years,,I use it for hobby or side projects,Windows,"Visual Studio 2015 or newer, Visual Studio 2012 or 2013","Twitter, HN, Reddit and other programming news sites","Conciseness of code (I can see more at a glance), Functional but can be tweaked to get high performance","Active Patterns, Agents (MailboxProcessor), Algebraic types (inc discriminated unions and tuples), Async workflows, Easy integration with other .NET libraries, Immutability by default, Object-oriented features (inc. C# compatibility, conciseness), printf that is type checked, Type providers",Quotations,"MSDN, Links and instructions from fsharp.org, F# books, F# bloggers",I'm willing to learn advanced concepts but only if they are relevant and practical,"More material with short ""cookbook"" style information",,Internal enterprise projects,"Utilities and tools, Data analysis/statistics","SQL databases, Read-only data sources such as feeds",Windows,It's used unofficially,,"No perceived benefits: They don't understand what benefits F# has over C# or other languages, Hiring: They worry about not being able to find F# developers, Training: They are worried about getting non-F# developers up to speed, No buy-in: There is lack of acceptance from other teams",,"Lack of good tutorials/documentation, Installation process, I can't use my knowledge from C# or other imperative languages, Not enough real-world code to learn from","Not being part of the core .NET distribution, Lack of F# friendly libraries, Less sophisticated tools for refactoring, etc.",,,,,"In-person: A talks at user groups, Books or longer articles explaining full context, Reference works or documentation with API listings or short tutorials, Recorded talks from a conference or user group",,
18/04/2016 14:39:26,5-10 years,Commercial software/web development,"No, I don't know much theory",Intermediate,C#,Less than a year,,I use it for hobby or side projects,"Windows, Mac","Visual Studio 2015 or newer, VS Code (with Ionide)","HN, Reddit and other programming news sites, F# bloggers","Better domain modelling with records and unions, Conciseness of code (I can see more at a glance), Correctness (no nulls, it works first time), Having fun again","Algebraic types (inc discriminated unions and tuples), Immutability by default, Interactive development, Simple ""one liner"" type definitions for records and DUs, Type inference, Type providers",,"Links and instructions from fsharp.org, F# books, F# bloggers, Videos (e.g. Community for F#)",I'm willing to learn advanced concepts but only if they are relevant and practical,"More material with in-depth tutorials, More material with real-world examples and war stories, More short ""live coding"" videos, More podcasts and other audio-only material",,Not applicable. None of my F# code is used by other people,None - Just playing around,"SQL databases, NoSQL database",Azure,I don't use F# at work,,"Hiring: They worry about not being able to find F# developers, Training: They are worried about getting non-F# developers up to speed, No buy-in: There is lack of acceptance from other teams",,Lack of good tutorials/documentation,"Lack of F# friendly libraries, Lack of good wrappers for non-F# libraries, Working with C#-centric tooling","JVM, Javascript",,,,"Books or longer articles explaining full context, Recorded talks from a conference or user group, In-depth online courses (e.g. Pluralsight)",,
18/04/2016 15:03:47,10 or more years,Enterprise development,"Yes, I enjoy computer science and mathematics",Experienced,C#,Less than a year,"Don't have a real project to apply it
",I use it for hobby or side projects,Windows,Visual Studio 2015 or newer,"Twitter, F# Weekly, F# bloggers",Learning functional programming in general,"Active Patterns, Immutability by default","Agents (MailboxProcessor), Object expressions","F# books, F# bloggers, Links mentioned in F# Weekly",I want to learn functional programming but I don't like academic jargon,"More material with in-depth tutorials, More material with real-world examples and war stories, More podcasts and other audio-only material, More interactive tutorials (e.g. like the F# Koans)",,Not applicable. None of my F# code is used by other people,Utilities and tools,SQL databases,Windows,I don't use F# at work,"Domain modelling: making illegal states unrepresentable, Correctness: fewer bugs and less rework, More productive with fewer developers, Faster time to market, Efficiency/Performance","No perceived benefits: They don't understand what benefits F# has over C# or other languages, Training: They are worried about getting non-F# developers up to speed, No buy-in: There is lack of acceptance from other teams",,"Lack of good tutorials/documentation, Not enough real-world code to learn from",Working with C#-centric tooling,Native,,,,"Books or longer articles explaining full context, Reference works or documentation with API listings or short tutorials, Recorded talks from a conference or user group, In-depth online courses (e.g. Pluralsight)",,
18/04/2016 15:07:25,10 or more years,Commercial software/web development,"No, I don't know much theory",Experienced,"F#, Ruby",1-2 years,,I use it at work or for other commercial uses,"Windows, Linux","Visual Studio 2015 or newer, MonoDevelop, Vim, VS Code (with Ionide)","F# Weekly, Google+, F# bloggers","Conciseness of code (I can see more at a glance), Correctness (no nulls, it works first time), Great community, Having fun again, Learning functional programming in general, Speed of development, easier to come up with better abstractions","Algebraic types (inc discriminated unions and tuples), Computation expressions, Immutability by default, Quotations, Type inference, polymorphic by default",Type providers,"F# bloggers, Reading F# code written by experts",I like theory -- I'm not afraid of monads and other abstractions,More material with real-world examples and war stories,"Coming from mostly OOP background the biggest hurdle is not F#, it's the ""functional"" part. We are not getting rid of state, so more examples of idiomatic F# abstracting, capturing and passing the state around would help. Modelling with DUs can only take one so far.
Functional mentality is all about being non-prescriptive, but for less academically inclined more ""pit-of-success"" sort of approach is required. Templates, reference architecture, integration samples, etc.
Also, MSDN needs a lot more love, it's non-existent as a learning tool.","Commercial products, Open source projects","Utilities and tools, Algorithm-heavy business applications (non-financial), Custom development/specialist markets, Commercial web site/app, Mobile apps, Data analysis/statistics","NoSQL database, Event sourcing, Read-only data sources such as feeds, Analytics, Data integration and EAI","Linux, iOS, Android, Amazon Web services",It's officially endorsed in my team for critical/production areas,"Domain modelling: making illegal states unrepresentable, Correctness: fewer bugs and less rework, More productive with fewer developers, Faster time to market, Easy concurrency with async and agents, Better for solving complex problems","Nothing. Everyone loves it., Xamarin/UI integration needs some love","Better Linux experience, Mono 4.x + F# 4.0 should just work:
- VSCode plugin shouldn't require F# 3.1
- MonoDevelop F# plugin should work (no IntelliSense at all atm)",Not enough real-world code to learn from,"Not being part of the core .NET distribution, Working with C#-centric tooling, Less sophisticated tools for refactoring, etc., Performance issues, type errors highlighted by type inference are maddening to pinpoint","LLVM, Native","It suggests you step away from objects/interfaces and embrace functional, but doesn't offer higher-kinded polymorphism to replace them.
In terms of meta-programming, code->quotations->code needs to be a lot easier.",,,"Books or longer articles explaining full context, Reference works or documentation with API listings or short tutorials","OSS F# that runs on Mono
F# PowerTools
paket
F# project scaffold
FAKE",
18/04/2016 15:33:00,2-5 years,Enterprise development,"No, I don't know much theory",Learner,C#,Less than a year,,I use it for hobby or side projects,Windows,Visual Studio 2015 or newer,F# bloggers,"Conciseness of code (I can see more at a glance), Correctness (no nulls, it works first time), Great community, Having fun again, Learning functional programming in general","Active Patterns, Algebraic types (inc discriminated unions and tuples), Async workflows, Backtick naming, Easy integration with other .NET libraries, No dependency cycles, Object expressions, Object-oriented features (inc. C# compatibility, conciseness), printf that is type checked, The ""piping"" idiom, Type inference, Type providers, Units of measure","Agents (MailboxProcessor), Computation expressions, Quotations","MSDN, Links and instructions from fsharp.org, F# books, F# bloggers, Answers to Stack Overflow questions",I like theory -- I'm not afraid of monads and other abstractions,"More material with real-world examples and war stories, More short ""live coding"" videos",,Not applicable. None of my F# code is used by other people,None - Just playing around,Not doing data centric apps,Windows,I don't use F# at work,,"Hiring: They worry about not being able to find F# developers, Training: They are worried about getting non-F# developers up to speed, No buy-in: There is lack of acceptance from other teams",,"Don't understand the compiler errors, Not enough real-world code to learn from","Less sophisticated tools for refactoring, etc.",Native,,,,"Books or longer articles explaining full context, Reference works or documentation with API listings or short tutorials, Recorded talks from a conference or user group, In-depth online courses (e.g. Pluralsight)",Visual F# Power tools,
18/04/2016 15:36:16,10 or more years,Science or related,"No, I don't know much theory",Experienced,"C, C#, C++, F#, Javascript, Python, Typescript, FORTRAN",4 or more years,,I use it at work or for other commercial uses,"Windows, Mac, Linux","Visual Studio 2015 or newer, Xamarin, VS Code (with Ionide)","Twitter, F# Weekly, F# bloggers","Better domain modelling with records and unions, Conciseness of code (I can see more at a glance), Correctness (no nulls, it works first time), Learning functional programming in general, Functional but can be tweaked to get high performance","Active Patterns, Algebraic types (inc discriminated unions and tuples), Easy integration with other .NET libraries, Immutability by default, The ""piping"" idiom, Type inference, Type providers, Units of measure",Agents (MailboxProcessor),"F# books, Personal mentoring, Autodidactic",I'm willing to learn advanced concepts but only if they are relevant and practical,"More material with in-depth tutorials, More material with real-world examples and war stories, More interactive tutorials (e.g. like the F# Koans)",,"Internal enterprise projects, Commercial products, Open source projects, Scientific research","Utilities and tools, Algorithm-heavy business applications (non-financial), Machine learning, Commercial web site/app, Non-commercial web site/app, Research/Teaching, Data analysis/statistics",NoSQL database,"Windows, Mac, Linux, iOS, Android, Azure",It's officially endorsed in my team for critical/production areas,"Domain modelling: making illegal states unrepresentable, Correctness: fewer bugs and less rework, More productive with fewer developers, Efficiency/Performance, Better for solving complex problems",No buy-in: There is lack of acceptance from other teams,Going in the right direction. More use cross-platform.,"Don't understand the compiler errors, Not enough real-world code to learn from","Not being part of the core .NET distribution, Performance issues, FSharp.Core.dll","Javascript, Native","IDE tools are much better via F# Powertools but there's still a gap to C#/Java level.
Sketchy situation with .net native is annoying in theory.",,,"Books or longer articles explaining full context, Recorded talks from a conference or user group","FAKE, Paket, F# Powertools, IfSharp, FParsec",
18/04/2016 15:56:22,10 or more years,Enterprise development,"No, I don't know much theory",Intermediate,"C#, F#",2-3 years,,I use it at work or for other commercial uses,Windows,Visual Studio 2015 or newer,F# Weekly,"Conciseness of code (I can see more at a glance), Correctness (no nulls, it works first time), Great community, Having fun again","Algebraic types (inc discriminated unions and tuples), Computation expressions, Easy integration with other .NET libraries, Interactive development, Simple ""one liner"" type definitions for records and DUs, The ""piping"" idiom, Type providers",,"F# books, F# bloggers, Answers to Stack Overflow questions",I'm willing to learn advanced concepts but only if they are relevant and practical,"More material with in-depth tutorials, More material with short ""cookbook"" style information, More material with real-world examples and war stories",Tough question! It's taken me about 4 years to get really comfortable with it.,Internal enterprise projects,"Algorithm-heavy business applications (non-financial), Mainstream business & enterprise applications, Non-commercial web site/app, Data analysis/statistics, Text analysis/language parsing","SQL databases, Analytics","Windows, Amazon Web services",It's officially endorsed in my team for critical/production areas,"Correctness: fewer bugs and less rework, More productive with fewer developers, Better for solving complex problems, I enjoy my work",Nothing. Everyone loves it.,,The paradigm shift,"Less sophisticated tools for refactoring, etc.",,Lack of support from Microsoft. Visual Studio support is appalling. You can't crack the corporate market unless MS is 100% behind it.,,"I'm the first IT person at my company. So it's 100% F# now. In my previous positions, I had no luck persuading people of the benefits of F#.","Books or longer articles explaining full context, Reference works or documentation with API listings or short tutorials, In-depth online courses (e.g. Pluralsight)","Power Tools (which needs way more work!!)

I've had to rely a lot on existing libraries in C#, but in the future will probably me making more use of native F# libraries.",
18/04/2016 16:21:16,10 or more years,Commercial software/web development,"Yes, I enjoy computer science and mathematics",Experienced,"C#, F#",4 or more years,,I use it at work or for other commercial uses,Windows,"Visual Studio 2012 or 2013, VS Code (with Ionide)",F# Weekly,"Better domain modelling with records and unions, Conciseness of code (I can see more at a glance), Correctness (no nulls, it works first time), Having fun again, Learning functional programming in general","Agents (MailboxProcessor), Algebraic types (inc discriminated unions and tuples), Async workflows, Easy integration with other .NET libraries, Immutability by default, Interactive development, Simple ""one liner"" type definitions for records and DUs, The ""piping"" idiom, Type inference","Object expressions, Quotations, Units of measure","F# books, F# bloggers, Links posted on social media such as Twitter, Links mentioned in F# Weekly, Answers to Stack Overflow questions, Reading F# code written by experts",I like theory -- I'm not afraid of monads and other abstractions,"More material with in-depth tutorials, More material with short ""cookbook"" style information, More material with real-world examples and war stories, More podcasts and other audio-only material",,"Commercial products, Open source projects","Algorithm-heavy business applications (non-financial), Custom development/specialist markets","SQL databases, NoSQL database",Windows,It's officially endorsed in my team for critical/production areas,"Domain modelling: making illegal states unrepresentable, Correctness: fewer bugs and less rework, More productive with fewer developers, Faster time to market, Easy concurrency with async and agents, Better for solving complex problems","No perceived benefits: They don't understand what benefits F# has over C# or other languages, Hiring: They worry about not being able to find F# developers, Training: They are worried about getting non-F# developers up to speed, No buy-in: There is lack of acceptance from other teams","I don't know if there is anything that can be done directly. I think the overall mission is the correct one, and the more people who are exposed to F# and begin to see the benefits to easier it will be for adoption to spread through the organization.","Lack of good tutorials/documentation, Don't understand the compiler errors, Not enough real-world code to learn from","Not being part of the core .NET distribution, Working with C#-centric tooling, Less sophisticated tools for refactoring, etc.","JVM, Javascript, LLVM, Native","I think the image of F# as an academic or specialty language is still hanging on. There has been a lot of really good work done in the last few years to address that, but I still feel like the idea of F# as a general purpose language still hasn't hit critical mass.",,,"Books or longer articles explaining full context, Reference works or documentation with API listings or short tutorials",Visual F# PowerTools,
18/04/2016 16:35:00,2-5 years,Enterprise development,"Yes, I enjoy computer science and mathematics",Intermediate,"C#, F#, Javascript",2-3 years,,I use it for hobby or side projects,Windows,Visual Studio 2015 or newer,"Twitter, F# Weekly, F# bloggers","Better domain modelling with records and unions, Conciseness of code (I can see more at a glance), Great community, Learning functional programming in general","Algebraic types (inc discriminated unions and tuples), Backtick naming, Easy integration with other .NET libraries, Immutability by default, No dependency cycles, Object expressions, Simple ""one liner"" type definitions for records and DUs, Type inference","Active Patterns, Agents (MailboxProcessor), Integration with non-F# libraries, Interactive development, Quotations, Static type constraints, Type providers, Units of measure","F# books, F# bloggers, Links mentioned in F# Weekly, Videos (e.g. Community for F#), fsharpforfunandprofit",I'm willing to learn advanced concepts but only if they are relevant and practical,"More material with in-depth tutorials, More material with short ""cookbook"" style information, More material with real-world examples and war stories",If tooling was better -> vs2015,Not applicable. None of my F# code is used by other people,Commercial web site/app,SQL databases,"Windows, Azure",I don't use F# at work,,its outsourcing,,Don't understand the compiler errors,"Lack of good wrappers for non-F# libraries, Working with C#-centric tooling, Less sophisticated tools for refactoring, etc., Difficulty in troubleshooting problems",None -- I'm happy with the CLR/Mono,,,good luck!,"Books or longer articles explaining full context, Reference works or documentation with API listings or short tutorials, Recorded talks from a conference or user group, In-depth online courses (e.g. Pluralsight)",the compiler :D,
18/04/2016 17:10:45,10 or more years,"Academic, research, or related","Yes, I enjoy computer science and mathematics",Expert,"C#, F#, Java, Python, Scheme/CL",2-3 years,,I use it for research or academic work,Windows,Visual Studio 2015 or newer,F# Weekly,Speed of development,"Active Patterns, Algebraic types (inc discriminated unions and tuples), Object-oriented features (inc. C# compatibility, conciseness), Quotations, The ""piping"" idiom, Type inference","Agents (MailboxProcessor), Object expressions, Type providers, Units of measure","MSDN, Links mentioned in F# Weekly",I like theory -- I'm not afraid of monads and other abstractions,More material with real-world examples and war stories,,Open source projects,"Algorithm-heavy business applications (non-financial), Custom development/specialist markets, Research/Teaching",Not doing data centric apps,"Windows, Mac, Linux",It's officially endorsed in my team for critical/production areas,"More productive with fewer developers, Better for solving complex problems",Nothing. Everyone loves it.,,Lack of good tutorials/documentation,"Working with C#-centric tooling, Less sophisticated tools for refactoring, etc.",Native,,,,Books or longer articles explaining full context,,
18/04/2016 17:34:54,5-10 years,Enterprise development,"Yes, I enjoy computer science and mathematics",Intermediate,"C#, F#, Javascript, Ruby",I was using F# but have stopped,"Because I've changed the job, and I'm involved in a project where the team leader considers that F# isn't a good fit because my colleagues don't know anything else except C# and VB.NET :)",I use it for hobby or side projects,Windows,"Visual Studio 2012 or 2013, Vim","Twitter, F# bloggers","Better domain modelling with records and unions, Conciseness of code (I can see more at a glance), Correctness (no nulls, it works first time), Great community, Having fun again, Learning functional programming in general","Agents (MailboxProcessor), Async workflows, Computation expressions, Immutability by default, Interactive development, The ""piping"" idiom, Type providers",Units of measure,"Links and instructions from fsharp.org, F# books, F# bloggers, Links posted on social media such as Twitter, Videos (e.g. Community for F#)",I'm willing to learn advanced concepts but only if they are relevant and practical,"More material with short ""cookbook"" style information, More material with real-world examples and war stories, More short ""live coding"" videos",,"Commercial products, Online Sports Betting Website","Utilities and tools, Commercial web site/app","SQL databases, NoSQL database",Windows,I don't use F# at work,,Hiring: They worry about not being able to find F# developers,Talk to my team leader and convince him it's acceptable to use F# at least for development of some libraries for the project :),,Lack of good wrappers for non-F# libraries,"JVM, Javascript, LLVM, Native",,,,"In-person: In-depth trainings (2 or 3 days), In-person: Shorter workshops focused on a specific topic (1 day), Books or longer articles explaining full context, Recorded talks from a conference or user group, In-depth online courses (e.g. Pluralsight)","FAKE
PAKET
FSharp.Data
SUAVE

",
18/04/2016 17:53:22,5-10 years,Enterprise development,"Yes, I enjoy computer science and mathematics",Learner,"C#, C++",2-3 years,,I use it for hobby or side projects,Windows,"Visual Studio 2015 or newer, Visual Studio 2012 or 2013","Twitter, F# bloggers","Better domain modelling with records and unions, Conciseness of code (I can see more at a glance), Correctness (no nulls, it works first time), Great community, Having fun again, Learning functional programming in general",Immutability by default,,"Links and instructions from fsharp.org, F# books, F# bloggers",I like theory -- I'm not afraid of monads and other abstractions,More material with in-depth tutorials,,Not applicable. None of my F# code is used by other people,None - Just playing around,,Windows,I don't use F# at work,,,,,,Native,,,,"Books or longer articles explaining full context, In-depth online courses (e.g. Pluralsight)",,
18/04/2016 18:32:50,10 or more years,Commercial software/web development,"Yes, I enjoy computer science and mathematics",Intermediate,"C, C++, F#, Haskell",Haven't really used it yet,"Too hard to get a workable development environment on Mac.

Xamarin Studio seems to conflict with Homebrew, and it is a very far cry from Visual Studio anyway.",I use it for hobby or side projects,Linux,"Xamarin, Emacs","F# Weekly, HN, Reddit and other programming news sites, F# bloggers","Better domain modelling with records and unions, Conciseness of code (I can see more at a glance), Correctness (no nulls, it works first time), Great community","Active Patterns, Algebraic types (inc discriminated unions and tuples), Easy integration with other .NET libraries",,"F# books, F# bloggers",I like theory -- I'm not afraid of monads and other abstractions,More material with in-depth tutorials,,"Commercial products, Open source projects",Custom development/specialist markets,Not doing data centric apps,Mac,It's used unofficially,"Domain modelling: making illegal states unrepresentable, Correctness: fewer bugs and less rework, More productive with fewer developers","Training: They are worried about getting non-F# developers up to speed, Too Windows-centric: They have concerns over cross-platform issues",Much better non-Windows story.,Installation process,Cross-platform issues,"LLVM, Native","Tooling and library support on non-windows platform is poor for the casual developer.

Xamarin was far too expensive to consider (will be interested to see what happens as it goes Open Source)",,"F# has potential as the most pragmatic FP language. It mainly needs a better cross-platform story (libraries and tooling - the core language is, I think, OK).

LLVM or native would be beyond awesome.",Books or longer articles explaining full context,,
18/04/2016 19:31:16,10 or more years,Financial services or similar,"Yes, I enjoy computer science and mathematics",Intermediate,"C#, F#, Javascript",1-2 years,,"Use it for work, but for tooling and smaller projects, side by main codebase",Windows,Visual Studio 2015 or newer,"Twitter, F# Weekly, F# bloggers","Better domain modelling with records and unions, exhaustive pattern matching","Async workflows, Backtick naming, Immutability by default","Agents (MailboxProcessor), Quotations, Units of measure","F# books, Links mentioned in F# Weekly, Answers to Stack Overflow questions, Reading F# code written by experts, F# for Fun and Profit :)",I like theory -- I'm not afraid of monads and other abstractions,"More material with in-depth tutorials, More material with real-world examples and war stories","My biggest concern when looking for materials for F# / FP in general is that there are lots of materials about how patterns must / should change when changing thinking from C#/OOP to F#/FP.

However, materials practically never touch how those concepts should be implemented in bigger, real-world systems. An example, it is advised to throw away ""manager"" classes with DI, like:
class NotifyManager : INotify 
{
  NotifyManager(ISmsService sms, IMailService mail) { this.sms = sms; this.mail = mail); 

// other methods
}

and instead just use functions and compose dependencies as params:

let sendNotification (sms: ISmsService) (mail: IMailService) to body = ...

Which looks great, because things can be injected easily (for testability etc). But question arises - how to properly implement this pattern if we are dependent on 5, 8 external services, which is quite common in bigger systems. If we have 10 functions, will each take additional 5-8 parameters just to inject dependencies? This seems less practical than OOP approach where those services can be injected only once in ctor by DI container. 

Those are questions which someone who would like to re-implement / implement his/her next system in F# will face and with materials that give advice only for simpler ""demo"" cases it is easier to get lost.",Commercial products,"Utilities and tools, Financial services","SQL databases, NoSQL database, Event sourcing","Windows, Linux",It's officially endorsed in my team for non-critical/non-production code,"Domain modelling: making illegal states unrepresentable, Easy concurrency with async and agents, Better for solving complex problems","Training: They are worried about getting non-F# developers up to speed, Tooling, which slows development, especially for new projects / less experienced people","Tooling, mainly discover ability of APIs through Intellisense. For example it is much easier to create C# object with ctor / init expression, because VS (with ReSharper) never gets lost and correctly tells which properties are not yet set, so you don't have to look for file where class was declared. With F#, it is much harder to fe. correctly implement a record instance, often Intellisense will not filter out hundreds of out-of-scope suggestions, so just creating an object is frustrating, as one has to find class declaration, memorize properties, get back, implement, rinse and repeat.",,"Lack of F# friendly libraries, Lack of good wrappers for non-F# libraries, Working with C#-centric tooling",Native,"I'd love to see struct tuples (I know it's been worked on, because C# team is also working on it for C#7) and struct Option<a'>, so I would not feel that guilty of making allocations every time I use more better pattern (Option instead of exception/null).",,,"Books or longer articles explaining full context, In-depth online courses (e.g. Pluralsight)","Visual F# Power Tools - bring it closer to C# experience
VS Code Ionide - for tinkering
Fake - no other alternative that good anywhere
",
18/04/2016 20:19:12,10 or more years,Financial services or similar,"Yes, I enjoy computer science and mathematics",Experienced,"Ada, F#, Swift",2-3 years,,I use it at work or for other commercial uses,Windows,Visual Studio 2015 or newer,"Twitter, F# Weekly, StackOverflow chat","Better domain modelling with records and unions, Conciseness of code (I can see more at a glance), Correctness (no nulls, it works first time), Speed of development, Functional but can be tweaked to get high performance","Active Patterns, Agents (MailboxProcessor), Algebraic types (inc discriminated unions and tuples), Async workflows, Backtick naming, Computation expressions, Easy integration with other .NET libraries, Immutability by default, Interactive development, Object expressions, Object-oriented features (inc. C# compatibility, conciseness), printf that is type checked, The ""piping"" idiom, Type inference, Type providers, Units of measure",Quotations,"MSDN, F# books, Links mentioned in F# Weekly, Answers to Stack Overflow questions, Reading F# code written by experts",I'm willing to learn advanced concepts but only if they are relevant and practical,"More material with in-depth tutorials, More material with short ""cookbook"" style information, More material with real-world examples and war stories, More short ""live coding"" videos, More interactive tutorials (e.g. like the F# Koans)",,Internal enterprise projects,"Custom development/specialist markets, Financial services, Mainstream business & enterprise applications, Data analysis/statistics, Text analysis/language parsing","SQL databases, Analytics, Data integration and EAI",Windows,It's officially endorsed in my team for critical/production areas,"Correctness: fewer bugs and less rework, Efficiency/Performance, Easy concurrency with async and agents, Better for solving complex problems",Fad: They have concerns over long term language viability,,"Lack of good tutorials/documentation, Not enough real-world code to learn from","Less sophisticated tools for refactoring, etc.","JVM, Native",,,,"Books or longer articles explaining full context, Reference works or documentation with API listings or short tutorials, Recorded talks from a conference or user group, In-depth online courses (e.g. Pluralsight)",,
18/04/2016 20:54:09,10 or more years,Enterprise development,"Yes, I enjoy computer science and mathematics",Intermediate,"C#, Java, Python",Less than two months,,I want to use it at work,"Windows, Mac, Linux","Visual Studio 2015 or newer, Xamarin, Vim, VS Code (with Ionide)",F# Weekly,"Better domain modelling with records and unions, Conciseness of code (I can see more at a glance), Having fun again, Learning functional programming in general","Algebraic types (inc discriminated unions and tuples), Immutability by default, No dependency cycles, printf that is type checked, The ""piping"" idiom, Type inference","Agents (MailboxProcessor), Quotations, Static type constraints, Type providers, Units of measure","Links and instructions from fsharp.org, Reading F# code written by experts, F# For Fun And Profit",I want to learn functional programming but I don't like academic jargon,More podcasts and other audio-only material,,Internal enterprise projects,"None - Just playing around, Utilities and tools",,"Windows, Linux, Azure",It's used unofficially,"Domain modelling: making illegal states unrepresentable, Correctness: fewer bugs and less rework",Hasn't come up yet,,Don't understand the compiler errors,,None -- I'm happy with the CLR/Mono,,,,"In-person: In-depth trainings (2 or 3 days), Books or longer articles explaining full context, Reference works or documentation with API listings or short tutorials, In-depth online courses (e.g. Pluralsight)",,
18/04/2016 20:57:26,10 or more years,"Academic, research, or related","Yes, I enjoy computer science and mathematics",Experienced,"C#, C++, F#, Python, Matlab",4 or more years,,I use it for research or academic work,"Windows, Linux","Visual Studio 2015 or newer, Sublime Text","F# Weekly, F# bloggers","Better domain modelling with records and unions, Conciseness of code (I can see more at a glance), Correctness (no nulls, it works first time), Great community, Having fun again","Algebraic types (inc discriminated unions and tuples), Immutability by default, Interactive development, Simple ""one liner"" type definitions for records and DUs, Type inference","Agents (MailboxProcessor), Object expressions, Object-oriented compatibility","F# books, F# bloggers, Answers to Stack Overflow questions, Videos (e.g. Community for F#)",I like theory -- I'm not afraid of monads and other abstractions,,,"Internal enterprise projects, Open source projects","Machine learning, Research/Teaching, Text analysis/language parsing, Other",Not doing data centric apps,"Windows, Linux",It's officially endorsed in my team for critical/production areas,"Domain modelling: making illegal states unrepresentable, Correctness: fewer bugs and less rework","Too Windows-centric: They have concerns over cross-platform issues, Too Microsoft-centric: They think it is too closely linked to Microsoft, Performance (for numerical codes)",,,"Lack of F# friendly libraries, Lack of good wrappers for non-F# libraries, Working with C#-centric tooling, Performance issues","LLVM, Native",,,,"Books or longer articles explaining full context, Recorded talks from a conference or user group",,
18/04/2016 21:11:31,10 or more years,Enterprise development,"No, I don't know much theory",Learner,"C#, Javascript",Less than a year,,Just tinkering,Windows,"Visual Studio 2012 or 2013, VS Code (with Ionide)",Twitter,"Having fun again, Learning functional programming in general","printf that is type checked, The ""piping"" idiom, Type providers, Units of measure","Active Patterns, Agents (MailboxProcessor), Async workflows, Object expressions, Object-oriented compatibility","F# bloggers, Links posted on social media such as Twitter, Videos (e.g. Community for F#)",I'm willing to learn advanced concepts but only if they are relevant and practical,"More material with real-world examples and war stories, More podcasts and other audio-only material, More interactive tutorials (e.g. like the F# Koans)",,Not applicable. None of my F# code is used by other people,Utilities and tools,,Windows,It's used unofficially,More time yo try it out,"No perceived benefits: They don't understand what benefits F# has over C# or other languages, Hiring: They worry about not being able to find F# developers, No buy-in: There is lack of acceptance from other teams",,Not enougth time,"Working with C#-centric tooling, Less sophisticated tools for refactoring, etc.",,,,,"Reference works or documentation with API listings or short tutorials, Recorded talks from a conference or user group, In-depth online courses (e.g. Pluralsight)",,
18/04/2016 21:18:28,10 or more years,Commercial software/web development,"Yes, I enjoy computer science and mathematics",Intermediate,"C#, F#, Ruby, Smalltalk",1-2 years,,I use it for hobby or side projects,Windows,Visual Studio 2015 or newer,"F# bloggers, fsharp@microsoft.com","Better domain modelling with records and unions, Conciseness of code (I can see more at a glance), Correctness (no nulls, it works first time), Having fun again, Speed of development, Functional but can be tweaked to get high performance","Algebraic types (inc discriminated unions and tuples), Backtick naming, Computation expressions, Immutability by default, Interactive development, No dependency cycles, printf that is type checked, Type inference, Type providers, Units of measure","Agents (MailboxProcessor), Async workflows","F# bloggers, Self-learning",I like theory -- I'm not afraid of monads and other abstractions,"More material with short ""cookbook"" style information, More material with real-world examples and war stories",It's already easy enough for an 8-year-old to learn it...,"Internal enterprise projects, Open source projects","Utilities and tools, Text analysis/language parsing",,,It's used unofficially,"More productive with fewer developers, Faster time to market","No perceived benefits: They don't understand what benefits F# has over C# or other languages, Hiring: They worry about not being able to find F# developers, Fad: They have concerns over long term language viability","Convince Microsoft teams that it's OK (no, really!) to use a Microsoft language that's not C++ or C#.

Get the Visual Studio guys to make VS 2015+ ship by default with F#.

Help Paket developers solve the annoying and complicated issues around Visual Studio integration.",,"Not being part of the core .NET distribution, Working with C#-centric tooling, Less sophisticated tools for refactoring, etc., Difficulty in troubleshooting problems",None -- I'm happy with the CLR/Mono,I would love to have something like typeclasses.,,,,"NCrunch!
F# Power Tools
NUnit",
18/04/2016 21:33:53,10 or more years,Commercial software/web development,"Yes, I enjoy computer science and mathematics",Experienced,"C#, F#, Javascript, Typescript",4 or more years,,,,"Visual Studio 2015 or newer, Visual Studio 2012 or 2013, Visual Studio 2010 or older, VS Code (with Ionide)","Twitter, F# Weekly","Better domain modelling with records and unions, Conciseness of code (I can see more at a glance), Correctness (no nulls, it works first time), Great community, Having fun again, Learning functional programming in general, Speed of development, Functional but can be tweaked to get high performance","Active Patterns, Algebraic types (inc discriminated unions and tuples), Computation expressions, Easy integration with other .NET libraries, Immutability by default, Object expressions, printf that is type checked, The ""piping"" idiom, Type inference, Type providers",Units of measure,"F# bloggers, Links mentioned in F# Weekly, Videos (e.g. Community for F#), Reading F# code written by experts",I like theory -- I'm not afraid of monads and other abstractions,"More material with short ""cookbook"" style information, More material with real-world examples and war stories, More short ""live coding"" videos",,"Commercial products, Open source projects","Utilities and tools, Mainstream business & enterprise applications, Non-commercial web site/app","SQL databases, Event sourcing",Windows,It's used unofficially,"Domain modelling: making illegal states unrepresentable, Correctness: fewer bugs and less rework, More productive with fewer developers, Efficiency/Performance, Easy concurrency with async and agents, Better for solving complex problems","No perceived benefits: They don't understand what benefits F# has over C# or other languages, Hiring: They worry about not being able to find F# developers, Training: They are worried about getting non-F# developers up to speed, I'm probably the only South African F# Dev","Increase market share in slowed up countries like S.A, which is admittedly very difficult. Having said that I'm a full time F# / functional programming ambassador, and doing all I can in the 3rd world!
","More functional goodness - higher kinded types perhaps, and the other 'advanced' functional features listed on F# user voice.",Working with C#-centric tooling,"Javascript, Native","Not F#'s weakness, developers ignorance and lack of passion. The thinking that what I have has served me well and is good enough.",,Thank you,"Books or longer articles explaining full context, Reference works or documentation with API listings or short tutorials, Recorded talks from a conference or user group","Sql Type Provider
Argu
Result type based on Elm's implementation (FSharp.Core.Extra)
FSPickle
",
18/04/2016 21:34:05,5-10 years,Student,"Yes, I enjoy computer science and mathematics",Experienced,"C#, F#, Java",Less than a year,,I use it for student work,Windows,Visual Studio 2015 or newer,"F# Weekly, HN, Reddit and other programming news sites","Better domain modelling with records and unions, Conciseness of code (I can see more at a glance), Correctness (no nulls, it works first time), Having fun again, Learning functional programming in general, Speed of development, Functional but can be tweaked to get high performance","Algebraic types (inc discriminated unions and tuples), printf that is type checked, The ""piping"" idiom, Type inference","Agents (MailboxProcessor), Async workflows, Object expressions, Object-oriented compatibility, Quotations, Static type constraints","MSDN, F# bloggers, Links mentioned in F# Weekly",I like theory -- I'm not afraid of monads and other abstractions,More material with real-world examples and war stories,"The syntax is easy to learn, but the concepts seems extraterrestrial to imperative programmers at first. An in-depth comparison of the train of thought of solving the same problem with C# and F# can be a good way for showing the benefits without scaring the programmer.",Not applicable. None of my F# code is used by other people,"Utilities and tools, Games",Not doing data centric apps,Windows,It's used unofficially,Better for solving complex problems,,,,Difficulty in troubleshooting problems,Native,No support in Universal Windows Platform.,,,Reference works or documentation with API listings or short tutorials,,
18/04/2016 21:42:48,10 or more years,Financial services or similar,"Yes, I enjoy computer science and mathematics",Expert,"C#, F#",4 or more years,,I use it at work or for other commercial uses,Windows,Visual Studio 2015 or newer,"F# Weekly, HN, Reddit and other programming news sites","Correctness (no nulls, it works first time), Speed of development","Easy integration with other .NET libraries, Type providers, Units of measure","Agents (MailboxProcessor), Quotations","F# books, Personal mentoring",I'm willing to learn advanced concepts but only if they are relevant and practical,More material with in-depth tutorials,,Internal enterprise projects,"Financial services, Data analysis/statistics","SQL databases, NoSQL database",Windows,It's officially endorsed in my team for critical/production areas,"Domain modelling: making illegal states unrepresentable, Correctness: fewer bugs and less rework, More productive with fewer developers, Better for solving complex problems",Nothing. Everyone loves it.,,n/a,Performance issues,None -- I'm happy with the CLR/Mono,"Performance: 1) Idiomatic code creates far too many heap allocated objects (especially tuples and options), 2) For time series analysis, non-structural comparison for DateTime and TimeSpan should be enabled by default (i.e., without having to open FSharp.Core.Operators.NonStructuralComparison).. 3) Immutable container types are significantly slower than corresponding mutable container types in Collections.Generic.",,,"Books or longer articles explaining full context, Reference works or documentation with API listings or short tutorials","FSharp.Data, FsCheck",
18/04/2016 22:09:09,Less than a year,Commercial software/web development,"Yes, I enjoy computer science and mathematics",Expert,"Clojure, PHP, Python",Less than a year,,I use it at work or for other commercial uses,"Windows, Mac","Visual Studio 2015 or newer, VS Code (with Ionide)","Twitter, F# Weekly, F# bloggers",Functional in strong Enterprise env where JVM (Clojure) is not an option.,"Easy integration with other .NET libraries, Immutability by default, Interactive development",Units of measure,"MSDN, Links and instructions from fsharp.org, Reading F# code written by experts",I'm willing to learn advanced concepts but only if they are relevant and practical,"More material with in-depth tutorials, More material with real-world examples and war stories, More short ""live coding"" videos",,Internal enterprise projects,"Utilities and tools, Algorithm-heavy business applications (non-financial), Machine learning, Data analysis/statistics","SQL databases, Read-only data sources such as feeds",Windows,It's used unofficially,Better for solving complex problems,"Training: They are worried about getting non-F# developers up to speed, Too Windows-centric: They have concerns over cross-platform issues, Too Microsoft-centric: They think it is too closely linked to Microsoft, No buy-in: There is lack of acceptance from other teams",,Lack of good tutorials/documentation,Cross-platform issues,"JVM, Native",,,,"Books or longer articles explaining full context, Reference works or documentation with API listings or short tutorials, Recorded talks from a conference or user group",,
18/04/2016 22:16:39,10 or more years,Enterprise development,"Yes, I enjoy computer science and mathematics",Intermediate,"C#, F#, Java, Javascript, Typescript",I was using F# but have stopped,,I use it at work or for other commercial uses,Windows,Visual Studio 2015 or newer,"Twitter, F# Weekly, F# bloggers","Better domain modelling with records and unions, Great community, Having fun again","Active Patterns, Algebraic types (inc discriminated unions and tuples), Async workflows, Computation expressions, Interactive development, Object expressions, The ""piping"" idiom, Type inference, Type providers","Agents (MailboxProcessor), Units of measure","F# books, F# bloggers, Links mentioned in F# Weekly, Reading F# code written by experts",I like theory -- I'm not afraid of monads and other abstractions,"More material with in-depth tutorials, More material with real-world examples and war stories, More short ""live coding"" videos",,Internal enterprise projects,"Utilities and tools, Algorithm-heavy business applications (non-financial), Financial services, Machine learning, Commercial web site/app, Non-commercial web site/app, Mobile apps","SQL databases, Read-only data sources such as feeds","Windows, iOS, Android",It's used unofficially,"Faster time to market, Easy concurrency with async and agents","No perceived benefits: They don't understand what benefits F# has over C# or other languages, Hiring: They worry about not being able to find F# developers, Money: They worry that good F# developers will cost too much, Training: They are worried about getting non-F# developers up to speed, Fad: They have concerns over long term language viability, No buy-in: There is lack of acceptance from other teams",,Not enough real-world code to learn from,"Working with C#-centric tooling, Difficulty in troubleshooting problems, Performance issues","JVM, LLVM, Native",,,,"Books or longer articles explaining full context, In-depth online courses (e.g. Pluralsight)",,
18/04/2016 22:18:08,5-10 years,Commercial software/web development,"No, I don't know much theory",Intermediate,"C#, F#, Javascript",3-4 years,,I use it for hobby or side projects,"Windows, Linux","Visual Studio 2015 or newer, Visual Studio 2012 or 2013, Atom (with Ionide)","Twitter, F# Weekly, F# bloggers","Better domain modelling with records and unions, Conciseness of code (I can see more at a glance), Correctness (no nulls, it works first time), Great community, Having fun again, Learning functional programming in general","Easy integration with other .NET libraries, Immutability by default, Interactive development, No dependency cycles, Object-oriented features (inc. C# compatibility, conciseness), printf that is type checked, The ""piping"" idiom, Type inference, Type providers","Computation expressions, Object expressions, Quotations, Units of measure","Links and instructions from fsharp.org, Links posted on social media such as Twitter, Links mentioned in F# Weekly, Answers to Stack Overflow questions, Personal mentoring, Videos (e.g. Community for F#), Reading F# code written by experts",I'm willing to learn advanced concepts but only if they are relevant and practical,"More material with short ""cookbook"" style information, More material with real-world examples and war stories, More interactive tutorials (e.g. like the F# Koans)",,"Internal enterprise projects, Open source projects","Mainstream business & enterprise applications, Commercial web site/app, Data analysis/statistics","SQL databases, NoSQL database, Read-only data sources such as feeds","Windows, Linux",It's officially endorsed in my team for non-critical/non-production code,"Domain modelling: making illegal states unrepresentable, Correctness: fewer bugs and less rework","No perceived benefits: They don't understand what benefits F# has over C# or other languages, Hiring: They worry about not being able to find F# developers, Fad: They have concerns over long term language viability, No buy-in: There is lack of acceptance from other teams",,Don't understand the compiler errors,Debugging in atom on windows,None -- I'm happy with the CLR/Mono,,,,"In-person: A talks at user groups, In-person: Attending a talks as part of a conference, Books or longer articles explaining full context, Reference works or documentation with API listings or short tutorials, Recorded talks from a conference or user group, In-depth online courses (e.g. Pluralsight)",,
18/04/2016 22:21:54,10 or more years,Enterprise development,"Yes, I enjoy computer science and mathematics",Learner,"C, C#, C++, powershell",Haven't really used it yet,,Just tinkering,"Windows, Linux","Visual Studio 2015 or newer, Visual Studio 2012 or 2013, VS Code (with Ionide)","Twitter, F# bloggers","Better domain modelling with records and unions, Correctness (no nulls, it works first time), Learning functional programming in general","Agents (MailboxProcessor), Algebraic types (inc discriminated unions and tuples), Easy integration with other .NET libraries, Immutability by default, Interactive development, No dependency cycles, The ""piping"" idiom, Type inference, Type providers, Units of measure",,"Links and instructions from fsharp.org, F# books, F# bloggers, Videos (e.g. Community for F#)",I'm willing to learn advanced concepts but only if they are relevant and practical,"More material with in-depth tutorials, More material with short ""cookbook"" style information, More material with real-world examples and war stories, how do I do evolutionary sql dB design?",,,,SQL databases,"Windows, Linux",I don't use F# at work,,"No perceived benefits: They don't understand what benefits F# has over C# or other languages, Hiring: They worry about not being able to find F# developers, Training: They are worried about getting non-F# developers up to speed, No buy-in: There is lack of acceptance from other teams",,lack how to do evolutionary sql dB design and development in f# context ,,"Javascript, Native, think go language! ",,,,"In-person: In-depth trainings (2 or 3 days), In-person: Shorter workshops focused on a specific topic (1 day), Books or longer articles explaining full context, Recorded talks from a conference or user group, In-depth online courses (e.g. Pluralsight)",,
18/04/2016 22:23:51,5-10 years,Commercial software/web development,"Yes, I enjoy computer science and mathematics",Intermediate,"C#, Javascript, Scala",Less than two months,,Just tinkering,Mac,"Vim, Atom (with Ionide)","HN, Reddit and other programming news sites",Better domain modelling with records and unions,"Algebraic types (inc discriminated unions and tuples), Immutability by default, Type inference, Type providers",,"Links and instructions from fsharp.org, F# bloggers, Personal mentoring, Reading F# code written by experts",I like theory -- I'm not afraid of monads and other abstractions,"More material with in-depth tutorials, More material with real-world examples and war stories, More interactive tutorials (e.g. like the F# Koans)",,,None - Just playing around,,"Mac, Linux",I don't use F# at work,,,,"Lack of good tutorials/documentation, Not enough real-world code to learn from, Project structure and Tooling","Less sophisticated tools for refactoring, etc.","Javascript, LLVM",,,,"Books or longer articles explaining full context, Reference works or documentation with API listings or short tutorials",,
18/04/2016 22:24:14,5-10 years,Commercial software/web development,"Yes, I enjoy computer science and mathematics",Experienced,"C#, F#, Python",4 or more years,,I use it at work or for other commercial uses,"Windows, Mac, Linux","Visual Studio 2015 or newer, Xamarin, Emacs","Twitter, F# Weekly, F# bloggers","Better domain modelling with records and unions, Conciseness of code (I can see more at a glance), Correctness (no nulls, it works first time), Great community, Speed of development","Active Patterns, Algebraic types (inc discriminated unions and tuples), Computation expressions, Immutability by default, No dependency cycles, Quotations, Type inference, Type providers, Static member constraints",,"F# books, F# bloggers, Structured training/workshops, Reading F# code written by experts",I like theory -- I'm not afraid of monads and other abstractions,"More material with in-depth tutorials, More short ""live coding"" videos",,"Internal enterprise projects, Commercial products, Open source projects","Utilities and tools, Custom development/specialist markets, Financial services, Mainstream business & enterprise applications, Commercial web site/app","SQL databases, Event sourcing","Windows, Linux",It's officially endorsed in my team for critical/production areas,"Domain modelling: making illegal states unrepresentable, Correctness: fewer bugs and less rework, More productive with fewer developers, Faster time to market, Easy concurrency with async and agents, Better for solving complex problems",Nothing. Everyone loves it.,,"Lack of good tutorials/documentation, We could have much more friendly compiler errors... ",,"Javascript, LLVM",,,,"In-person: Shorter workshops focused on a specific topic (1 day), Books or longer articles explaining full context, Recorded talks from a conference or user group","Hopac, Chiron/Fleece, FsCheck, Paket, Suave",
18/04/2016 22:36:57,10 or more years,Commercial software/web development,"No, I don't know much theory",Expert,F#,3-4 years,,I use it at work or for other commercial uses,"Windows, Mac, Linux","Visual Studio 2015 or newer, UltraEdit",,Having fun again,,,Reading F# code written by experts,I want to learn functional programming but I don't like academic jargon,,,Commercial products,"Utilities and tools, Text analysis/language parsing",Not doing data centric apps,"Windows, Mac, Linux",Its what I am employed to do.,,,,"Lack of good tutorials/documentation, Don't understand the compiler errors",Performance issues,coreclr,Tooling is not great.,,,In-depth online courses (e.g. Pluralsight),JSon TypeProvider,
18/04/2016 22:45:21,10 or more years,Enterprise development,"Yes, I enjoy computer science and mathematics",Experienced,"F#, Scala",3-4 years,,I use it at work or for other commercial uses,"Windows, Linux","Visual Studio 2015 or newer, VS Code (with Ionide)","Twitter, F# Weekly, F# bloggers","Better domain modelling with records and unions, Conciseness of code (I can see more at a glance), Correctness (no nulls, it works first time), Great community, Having fun again, Learning functional programming in general, Speed of development, Functional but can be tweaked to get high performance","Algebraic types (inc discriminated unions and tuples), Computation expressions, Immutability by default, Simple ""one liner"" type definitions for records and DUs, The ""piping"" idiom, Type inference","Object expressions, Static type constraints","Links and instructions from fsharp.org, F# books, F# bloggers, Links posted on social media such as Twitter, Links mentioned in F# Weekly, Videos (e.g. Community for F#), Reading F# code written by experts",I like theory -- I'm not afraid of monads and other abstractions,,,Internal enterprise projects,"Utilities and tools, Mainstream business & enterprise applications","SQL databases, Read-only data sources such as feeds",Windows,It's officially endorsed in my team for critical/production areas,"Domain modelling: making illegal states unrepresentable, Correctness: fewer bugs and less rework, More productive with fewer developers","No perceived benefits: They don't understand what benefits F# has over C# or other languages, Hiring: They worry about not being able to find F# developers, Fad: They have concerns over long term language viability, No buy-in: There is lack of acceptance from other teams",,,"Working with C#-centric tooling, Less sophisticated tools for refactoring, etc.","JVM, Javascript, LLVM, Native","One gets the feeling that MS isn't very interested in F#. In theory, that's not a problem, but in practice it may really hurt further adoption.",,,"In-person: In-depth trainings (2 or 3 days), In-person: Shorter workshops focused on a specific topic (1 day), In-person: A talks at user groups, In-person: Attending a talks as part of a conference, Books or longer articles explaining full context, Recorded talks from a conference or user group, In-depth online courses (e.g. Pluralsight)",,
18/04/2016 22:46:33,5-10 years,Commercial software/web development,"No, I don't know much theory",Learner,"C#, Javascript",1-2 years,,I use it for hobby or side projects,"Windows, Mac","Visual Studio 2015 or newer, VS Code (with Ionide)","Twitter, F# Weekly, HN, Reddit and other programming news sites, F# bloggers","Better domain modelling with records and unions, Conciseness of code (I can see more at a glance), Correctness (no nulls, it works first time), Great community, Having fun again, Learning functional programming in general, Speed of development","Algebraic types (inc discriminated unions and tuples), Immutability by default, The ""piping"" idiom, Type inference, Type providers",,"F# bloggers, Links posted on social media such as Twitter, Links mentioned in F# Weekly",I like theory -- I'm not afraid of monads and other abstractions,"More material with in-depth tutorials, More material with real-world examples and war stories",,Internal enterprise projects,"Utilities and tools, Data analysis/statistics","SQL databases, NoSQL database, Event sourcing",Windows,It's used unofficially,"Domain modelling: making illegal states unrepresentable, Correctness: fewer bugs and less rework, More productive with fewer developers","No perceived benefits: They don't understand what benefits F# has over C# or other languages, No buy-in: There is lack of acceptance from other teams",,Not enough real-world code to learn from,Working with C#-centric tooling,None -- I'm happy with the CLR/Mono,,,,"Books or longer articles explaining full context, Reference works or documentation with API listings or short tutorials, Recorded talks from a conference or user group, In-depth online courses (e.g. Pluralsight)",,
18/04/2016 22:51:59,10 or more years,Enterprise development,"Yes, I enjoy computer science and mathematics",Learner,"C#, F#, Javascript",1-2 years,,I use it at work or for other commercial uses,Windows,Visual Studio 2015 or newer,"Twitter, F# Weekly, F# bloggers","Better domain modelling with records and unions, Conciseness of code (I can see more at a glance), Correctness (no nulls, it works first time), Great community, Having fun again, Learning functional programming in general","Agents (MailboxProcessor), Algebraic types (inc discriminated unions and tuples), Immutability by default, Simple ""one liner"" type definitions for records and DUs, The ""piping"" idiom, Type inference, Type providers, Units of measure","Active Patterns, Async workflows, Computation expressions, Integration with non-F# libraries, Object expressions, Object-oriented compatibility, Quotations","MSDN, F# books, F# bloggers, Links posted on social media such as Twitter, Links mentioned in F# Weekly, Answers to Stack Overflow questions, Videos (e.g. Community for F#)",I'm willing to learn advanced concepts but only if they are relevant and practical,"More material with in-depth tutorials, More material with short ""cookbook"" style information, More material with real-world examples and war stories, More podcasts and other audio-only material","Beginners need more guidance about how idiomatic F# code should look like. This might sound inappropriate because F# is a rich language where things can be done in thousands of different, all valid ways. But when you're starting out, you really need rules of thumb and models, even if only to discover later that they were wrong. You've got to start with something.",Internal enterprise projects,"Games, Data analysis/statistics, Other","SQL databases, Event sourcing",Windows,It's officially endorsed in my team for critical/production areas,"More productive with fewer developers, Faster time to market, Better for solving complex problems","Hiring: They worry about not being able to find F# developers, Training: They are worried about getting non-F# developers up to speed",,Not enough real-world code to learn from,"Lack of F# friendly libraries, Working with C#-centric tooling, Less sophisticated tools for refactoring, etc.",None -- I'm happy with the CLR/Mono,Lack of at least one authoritative web framework/library that would be the equivalent of ASP.NET MVC / Web API but functional-first.,,,"In-person: In-depth trainings (2 or 3 days), Books or longer articles explaining full context, Recorded talks from a conference or user group, In-depth online courses (e.g. Pluralsight)","FsCheck
",
18/04/2016 22:54:32,10 or more years,Enterprise development,"Yes, I enjoy computer science and mathematics",Intermediate,C#,Less than a year,,I use it for hobby or side projects,Windows,Visual Studio 2015 or newer,"Twitter, F# Weekly, F# bloggers","Conciseness of code (I can see more at a glance), Great community, Learning functional programming in general","Algebraic types (inc discriminated unions and tuples), Immutability by default, Simple ""one liner"" type definitions for records and DUs, The ""piping"" idiom, Type inference",,"F# books, F# bloggers, Links posted on social media such as Twitter, Links mentioned in F# Weekly, Videos (e.g. Community for F#), Reading F# code written by experts",I like theory -- I'm not afraid of monads and other abstractions,"More material with real-world examples and war stories, More short ""live coding"" videos, More interactive tutorials (e.g. like the F# Koans)","Find me extra hours in the day to spend learning the language :) Seriously, though, I use C# every day at work, so maybe some tutorials focused on some of the hurdles a C# developer has to overcome. For example, walking through debugging why I'm not actually using the type that I think I am (manifesting as why there's a red squiggle underneath the function I'm trying to call).",,,,,It's used unofficially,More productive with fewer developers,"No perceived benefits: They don't understand what benefits F# has over C# or other languages, Hiring: They worry about not being able to find F# developers, No buy-in: There is lack of acceptance from other teams","I would love to attend an F# talk at a local user group or some place like that. Also, it would be great to see some pieces of a larger ""enterprise-y"" application to see F# as part of a larger solution.",Not enough real-world code to learn from,Difficulty in troubleshooting problems,Native,,,,"In-person: A talks at user groups, In-person: Attending a talks as part of a conference, Reference works or documentation with API listings or short tutorials, In-depth online courses (e.g. Pluralsight)","Unquote
FsCheck",
18/04/2016 22:56:07,5-10 years,Consulting,"No, I don't know much theory",Intermediate,"C, F#, Python",4 or more years,,I use it for hobby or side projects,Windows,"Visual Studio 2015 or newer, Emacs","Twitter, fsharp channel on Slack","Conciseness of code (I can see more at a glance), Learning functional programming in general, Functional but can be tweaked to get high performance","Easy integration with other .NET libraries, Interactive development, The ""piping"" idiom, Type inference","Object expressions, Object-oriented compatibility, Quotations, Static type constraints, Units of measure","MSDN, Answers to Stack Overflow questions",I'm willing to learn advanced concepts but only if they are relevant and practical,"More material with in-depth tutorials, More material with short ""cookbook"" style information",,Not applicable. None of my F# code is used by other people,"Utilities and tools, Text analysis/language parsing",SQL databases,Windows,It's used unofficially,Better for solving complex problems,"No perceived benefits: They don't understand what benefits F# has over C# or other languages, Fad: They have concerns over long term language viability, Too Microsoft-centric: They think it is too closely linked to Microsoft, No buy-in: There is lack of acceptance from other teams",,"Installation process, Not enough real-world code to learn from","Less sophisticated tools for refactoring, etc., Performance issues","LLVM, Native","Rubbish tools support, compiler services is under performant, horrible installation woes on fresh VS2015, just generally lack of care from VS Core team towards F#.",,,Reference works or documentation with API listings or short tutorials,"FSI, FSharp.Data has its uses",
18/04/2016 23:01:42,10 or more years,Enterprise development,"Yes, I enjoy computer science and mathematics",Intermediate,"C#, Javascript, Scala",2-3 years,,,"Windows, Mac, Linux","Visual Studio 2012 or 2013, Atom (with Ionide), VS Code (with Ionide)","Twitter, F# Weekly, F# bloggers","Better domain modelling with records and unions, Conciseness of code (I can see more at a glance), Correctness (no nulls, it works first time)","Algebraic types (inc discriminated unions and tuples), Async workflows, The ""piping"" idiom, Type providers",Static type constraints,"Links and instructions from fsharp.org, Links posted on social media such as Twitter, Links mentioned in F# Weekly",I want to learn functional programming but I don't like academic jargon,"More material with in-depth tutorials, More material with real-world examples and war stories, More interactive tutorials (e.g. like the F# Koans)",,Internal enterprise projects,"Utilities and tools, Data analysis/statistics, Text analysis/language parsing","SQL databases, NoSQL database","Windows, Linux",It's used unofficially,"Domain modelling: making illegal states unrepresentable, Correctness: fewer bugs and less rework, Faster time to market",,,"Installation process, Don't understand the compiler errors, Not enough real-world code to learn from","Lack of F# friendly libraries, Less sophisticated tools for refactoring, etc.","JVM, Javascript, LLVM",,,,In-depth online courses (e.g. Pluralsight),,
18/04/2016 23:06:44,10 or more years,Commercial software/web development,"No, I don't know much theory",Intermediate,"C#, F#, Typescript, Elm",2-3 years,,I use it at work or for other commercial uses,Windows,"Visual Studio 2015 or newer, Visual Studio 2012 or 2013, VS Code (with Ionide)","Twitter, F# bloggers","Better domain modelling with records and unions, Conciseness of code (I can see more at a glance), Correctness (no nulls, it works first time), Great community, Having fun again, Speed of development, Functional but can be tweaked to get high performance","Active Patterns, Async workflows, Computation expressions, Immutability by default, Object expressions, Quotations, Simple ""one liner"" type definitions for records and DUs, The ""piping"" idiom, Type providers",Agents (MailboxProcessor),"F# books, F# bloggers, Links mentioned in F# Weekly, Answers to Stack Overflow questions, Videos (e.g. Community for F#)",I'm willing to learn advanced concepts but only if they are relevant and practical,More interactive tutorials (e.g. like the F# Koans),Make it easier to setup the development environment without much hustle.,"Internal enterprise projects, Commercial products","Utilities and tools, Financial services, Text analysis/language parsing",SQL databases,Windows,It's used unofficially,"Domain modelling: making illegal states unrepresentable, Correctness: fewer bugs and less rework, Easy concurrency with async and agents",No buy-in: There is lack of acceptance from other teams,Present more everyday uses of F# instead of the mostly academic ones.,Installation process,"Not being part of the core .NET distribution, Working with C#-centric tooling, Less sophisticated tools for refactoring, etc.",Native,Insufficient tooling,,,"Books or longer articles explaining full context, Recorded talks from a conference or user group",Ionide,
18/04/2016 23:16:21,5-10 years,Enterprise development,"Yes, I enjoy computer science and mathematics",Intermediate,"C#, F#, Javascript",1-2 years,,I use it for hobby or side projects,"Windows, Mac","Visual Studio 2015 or newer, Visual Studio 2012 or 2013, VS Code (with Ionide)","Twitter, F# bloggers","Better domain modelling with records and unions, Conciseness of code (I can see more at a glance), Having fun again, Learning functional programming in general","Algebraic types (inc discriminated unions and tuples), Easy integration with other .NET libraries, Immutability by default, Simple ""one liner"" type definitions for records and DUs, The ""piping"" idiom, Type inference, Type providers, Units of measure, Less boilerplate","Agents (MailboxProcessor), Integration with non-F# libraries, Quotations, Static type constraints, Units of measure","F# bloggers, Links posted on social media such as Twitter, Answers to Stack Overflow questions, Reading F# code written by experts",I want to learn functional programming but I don't like academic jargon,"More material with real-world examples and war stories, More short ""live coding"" videos",Have a well known app coverted to idiomatic fsharp,"Internal enterprise projects, Open source projects","Utilities and tools, Custom development/specialist markets","Read-only data sources such as feeds, Not doing data centric apps","Windows, Mac",It's officially endorsed in my team for non-critical/non-production code,"Domain modelling: making illegal states unrepresentable, Correctness: fewer bugs and less rework","No perceived benefits: They don't understand what benefits F# has over C# or other languages, Hiring: They worry about not being able to find F# developers, Training: They are worried about getting non-F# developers up to speed, Fad: They have concerns over long term language viability",Have microsoft write a product in fsharp,"Don't understand the compiler errors, Not enough real-world code to learn from",Difficulty in troubleshooting problems,None -- I'm happy with the CLR/Mono,Cryptic errors are really frustrating (usually due to spacing). Bad debug experienc where values can be inspected or evaluated.,A comment next to submit button asuring me it wont fail and loose the data even in phone connection is intermittent.,,Recorded talks from a conference or user group,"Fake
Ionide
",
18/04/2016 23:19:05,5-10 years,Commercial software/web development,"Yes, I enjoy computer science and mathematics",Expert,"C#, F#, Javascript",1-2 years,,I use it at work or for other commercial uses,"Windows, Mac, Linux",Emacs,"Twitter, HN, Reddit and other programming news sites, F# bloggers","Better domain modelling with records and unions, Conciseness of code (I can see more at a glance), Correctness (no nulls, it works first time), Great community, Having fun again, Learning functional programming in general, Speed of development, Functional but can be tweaked to get high performance","Active Patterns, Agents (MailboxProcessor), Algebraic types (inc discriminated unions and tuples), Async workflows, Computation expressions, Easy integration with other .NET libraries, Immutability by default, Interactive development, No dependency cycles, Object-oriented features (inc. C# compatibility, conciseness), printf that is type checked, Quotations, Simple ""one liner"" type definitions for records and DUs, The ""piping"" idiom, Type inference, Type providers, Units of measure","Computation expressions, Object expressions","Links and instructions from fsharp.org, Reading F# code written by experts, Writing code and Peer review",I like theory -- I'm not afraid of monads and other abstractions,"More material with short ""cookbook"" style information, More material with real-world examples and war stories, More short ""live coding"" videos",,"Commercial products, Open source projects","Utilities and tools, Commercial web site/app, Mobile apps, Text analysis/language parsing","SQL databases, Read-only data sources such as feeds","Windows, Mac, Linux",It's officially endorsed in my team for non-critical/non-production code,"Domain modelling: making illegal states unrepresentable, Correctness: fewer bugs and less rework, More productive with fewer developers, Faster time to market, Efficiency/Performance, Easy concurrency with async and agents, Better for solving complex problems","Hiring: They worry about not being able to find F# developers, Training: They are worried about getting non-F# developers up to speed, Too Microsoft-centric: They think it is too closely linked to Microsoft, No buy-in: There is lack of acceptance from other teams",Teach F# to the younger generations,,"Working with C#-centric tooling, Team adoption","None -- I'm happy with the CLR/Mono, Native",It's not mainstream,,,"In-person: A talks at user groups, In-person: Attending a talks as part of a conference, Books or longer articles explaining full context, Reference works or documentation with API listings or short tutorials, Recorded talks from a conference or user group","Canopy
Fsharp.data
Suave.IO
REPL",
18/04/2016 23:22:32,5-10 years,Commercial software/web development,"Yes, I enjoy computer science and mathematics",Expert,"C#, F#, Javascript",1-2 years,,I use it at work or for other commercial uses,"Windows, Mac, Linux",Emacs,"Twitter, HN, Reddit and other programming news sites, F# bloggers","Better domain modelling with records and unions, Conciseness of code (I can see more at a glance), Correctness (no nulls, it works first time), Great community, Having fun again, Learning functional programming in general, Speed of development, Functional but can be tweaked to get high performance","Active Patterns, Agents (MailboxProcessor), Algebraic types (inc discriminated unions and tuples), Async workflows, Computation expressions, Easy integration with other .NET libraries, Immutability by default, Interactive development, No dependency cycles, Object-oriented features (inc. C# compatibility, conciseness), printf that is type checked, Quotations, Simple ""one liner"" type definitions for records and DUs, The ""piping"" idiom, Type inference, Type providers, Units of measure","Computation expressions, Object expressions","Links and instructions from fsharp.org, Reading F# code written by experts, Writing code and Peer review",I like theory -- I'm not afraid of monads and other abstractions,"More material with short ""cookbook"" style information, More material with real-world examples and war stories, More short ""live coding"" videos",,"Commercial products, Open source projects","Utilities and tools, Commercial web site/app, Mobile apps, Text analysis/language parsing","SQL databases, Read-only data sources such as feeds","Windows, Mac, Linux",It's officially endorsed in my team for non-critical/non-production code,"Domain modelling: making illegal states unrepresentable, Correctness: fewer bugs and less rework, More productive with fewer developers, Faster time to market, Efficiency/Performance, Easy concurrency with async and agents, Better for solving complex problems","Hiring: They worry about not being able to find F# developers, Training: They are worried about getting non-F# developers up to speed, Too Microsoft-centric: They think it is too closely linked to Microsoft, No buy-in: There is lack of acceptance from other teams",Teach F# to the younger generations,,"Working with C#-centric tooling, Team adoption","None -- I'm happy with the CLR/Mono, Native",It's not mainstream,,,"In-person: A talks at user groups, In-person: Attending a talks as part of a conference, Books or longer articles explaining full context, Reference works or documentation with API listings or short tutorials, Recorded talks from a conference or user group","Canopy
Fsharp.data
Suave.IO
REPL
Fake
Paket",
18/04/2016 23:23:42,10 or more years,Financial services or similar,"Yes, I enjoy computer science and mathematics",Experienced,"C#, F#, Typescript",2-3 years,,I use it at work or for other commercial uses,Windows,Visual Studio 2015 or newer,Twitter,"Conciseness of code (I can see more at a glance), Correctness (no nulls, it works first time), Speed of development","Easy integration with other .NET libraries, Immutability by default, Object-oriented features (inc. C# compatibility, conciseness), The ""piping"" idiom, Type inference","Agents (MailboxProcessor), Computation expressions, Units of measure","MSDN, F# books, F# bloggers, Answers to Stack Overflow questions",I'm willing to learn advanced concepts but only if they are relevant and practical,"More material with in-depth tutorials, More interactive tutorials (e.g. like the F# Koans)",,"Internal enterprise projects, Open source projects","Utilities and tools, Financial services, Commercial web site/app",SQL databases,"Windows, Mac",It's officially endorsed in my team for critical/production areas,"Correctness: fewer bugs and less rework, More productive with fewer developers, Better for solving complex problems",Tooling,"f# autocomplete/static analysis in visual studio, ionide, linqpad can lock up or slow down a LOT.",,"Less sophisticated tools for refactoring, etc.",LLVM,,,,"Books or longer articles explaining full context, In-depth online courses (e.g. Pluralsight)","fsc, fake",
18/04/2016 23:24:44,1-2 years,IT Support,"No, I don't know much theory",Intermediate,"C#, F#, Haskell, Python",Less than a year,,I use it for hobby or side projects,Windows,Visual Studio 2015 or newer,"Twitter, F# bloggers, fsharp channel on Slack","Better domain modelling with records and unions, Conciseness of code (I can see more at a glance), Correctness (no nulls, it works first time), Learning functional programming in general, Speed of development","Algebraic types (inc discriminated unions and tuples), Easy integration with other .NET libraries, Immutability by default, Interactive development, The ""piping"" idiom, Type providers, Units of measure",Active Patterns,"F# books, F# bloggers, Links posted on social media such as Twitter, Videos (e.g. Community for F#)",I want to learn functional programming but I don't like academic jargon,More material with real-world examples and war stories,,Not applicable. None of my F# code is used by other people,"None - Just playing around, Utilities and tools",Not doing data centric apps,Windows,I don't use F# at work,,,,,Not being part of the core .NET distribution,None -- I'm happy with the CLR/Mono,,,,"In-person: A talks at user groups, In-person: Attending a talks as part of a conference, Books or longer articles explaining full context, Recorded talks from a conference or user group",,
18/04/2016 23:31:56,Less than a year,Consulting,"No, I don't know much theory",Learner,C#,Less than a year,,Just tinkering,Windows,Visual Studio 2015 or newer,Twitter,"Better domain modelling with records and unions, Conciseness of code (I can see more at a glance), Great community, Learning functional programming in general","Active Patterns, Interactive development, The ""piping"" idiom, Type inference","Agents (MailboxProcessor), Integration with non-F# libraries, Object expressions, Object-oriented compatibility, Type providers, Units of measure","F# books, Answers to Stack Overflow questions",I'm willing to learn advanced concepts but only if they are relevant and practical,"More material with real-world examples and war stories, More podcasts and other audio-only material","More applications to apply F# to.

Universal Windows Apple
Xamarin on Visual Studio",,None - Just playing around,,,I don't use F# at work,,Hiring: They worry about not being able to find F# developers,Promote F# more on Microsoft Build events.,Don't understand the compiler errors,"Working with C#-centric tooling, Less sophisticated tools for refactoring, etc., Difficulty in troubleshooting problems","JVM, Native",Lack of portability,,,"In-person: In-depth trainings (2 or 3 days), In-person: Attending a talks as part of a conference, Books or longer articles explaining full context, Recorded talks from a conference or user group","FsLint
F# Power Tools
FsCheck
FsUnit
XUnit ",
18/04/2016 23:47:33,10 or more years,Open source development,"Yes, I enjoy computer science and mathematics",Expert,"C#, F#, Java, Javascript, Scala",4 or more years,,I use it for research or academic work,Windows,Visual Studio 2015 or newer,Twitter,"Better domain modelling with records and unions, Conciseness of code (I can see more at a glance), Correctness (no nulls, it works first time), Great community, Having fun again, Speed of development, Functional but can be tweaked to get high performance","Active Patterns, Agents (MailboxProcessor), Algebraic types (inc discriminated unions and tuples), Async workflows, Computation expressions, Easy integration with other .NET libraries, Immutability by default, Interactive development, No dependency cycles, printf that is type checked, Simple ""one liner"" type definitions for records and DUs, The ""piping"" idiom, Type inference, Type providers","Object expressions, Object-oriented compatibility, Quotations, Static type constraints",F# books,I like theory -- I'm not afraid of monads and other abstractions,,,Open source projects,"Utilities and tools, Machine learning, Non-commercial web site/app, Mobile apps, Data analysis/statistics, Text analysis/language parsing",,"Windows, Mac, Linux, iOS, Android",,"Correctness: fewer bugs and less rework, More productive with fewer developers, Easy concurrency with async and agents, Better for solving complex problems",,,,"Less sophisticated tools for refactoring, etc.","Javascript, LLVM, Native",Hmm...lack of extension interfaces. See https://fslang.uservoice.com/forums/245727-f-language/suggestions/5665042-allow-extension-interfaces,,,,"FSharp.Data , F# power tools, fparsec, Fspickler, suave.io, xplot, Fsharp.Formatting",
18/04/2016 23:46:58,10 or more years,Engineer ,"No, I don't know much theory",Intermediate,"C#, C++, F#",2-3 years,,I use it at work or for other commercial uses,Windows,"Visual Studio 2015 or newer, Visual Studio 2010 or older","Twitter, F# bloggers","Better domain modelling with records and unions, Correctness (no nulls, it works first time), Having fun again, Learning functional programming in general, Speed of development","Algebraic types (inc discriminated unions and tuples), Easy integration with other .NET libraries, Immutability by default, Interactive development, printf that is type checked, Simple ""one liner"" type definitions for records and DUs, Type inference, Units of measure","Computation expressions, Quotations, Type providers","F# books, F# bloggers, Answers to Stack Overflow questions, Videos (e.g. Community for F#)",I'm willing to learn advanced concepts but only if they are relevant and practical,"More podcasts and other audio-only material, More interactive tutorials (e.g. like the F# Koans)",Examples with good explanation,Internal enterprise projects,"Utilities and tools, Custom development/specialist markets, Other","SQL databases, Not doing data centric apps",Windows,It's officially endorsed in my team for critical/production areas,"Domain modelling: making illegal states unrepresentable, Correctness: fewer bugs and less rework, Faster time to market, Better for solving complex problems","Too Windows-centric: They have concerns over cross-platform issues, Too Microsoft-centric: They think it is too closely linked to Microsoft, No buy-in: There is lack of acceptance from other teams",Interoperation with c++and java,Don't understand the compiler errors,Difficulty in troubleshooting problems,Javascript,Getting started,,,"Reference works or documentation with API listings or short tutorials, Recorded talks from a conference or user group","Paket
Fscheck
Fsharp.data
PowerTools
Charting

",
19/04/2016 00:00:59,10 or more years,Enterprise development,"Yes, I enjoy computer science and mathematics",Intermediate,"C, C#, F#, Javascript, Rust",Less than a year,,I use it at work or for other commercial uses,Windows,"Visual Studio 2015 or newer, Atom (with Ionide), VS Code (with Ionide), OmniSharp","Twitter, F# Weekly","Better domain modelling with records and unions, Conciseness of code (I can see more at a glance), Correctness (no nulls, it works first time), Having fun again","Easy integration with other .NET libraries, Interactive development, The ""piping"" idiom, Type inference, Type providers","Agents (MailboxProcessor), Units of measure","Links and instructions from fsharp.org, F# books, Videos (e.g. Community for F#)",I like theory -- I'm not afraid of monads and other abstractions,"More material with in-depth tutorials, More short ""live coding"" videos, More podcasts and other audio-only material",,Internal enterprise projects,Custom development/specialist markets,SQL databases,"Windows, Linux, Azure",It's officially endorsed in my team for critical/production areas,"Domain modelling: making illegal states unrepresentable, Correctness: fewer bugs and less rework, More productive with fewer developers, Better for solving complex problems",Nothing. Everyone loves it.,,Lack of good tutorials/documentation,,LLVM,,,,"Books or longer articles explaining full context, Reference works or documentation with API listings or short tutorials, Recorded talks from a conference or user group, In-depth online courses (e.g. Pluralsight)",,
19/04/2016 00:01:25,10 or more years,Commercial software/web development,"Yes, I enjoy computer science and mathematics",Intermediate,"C#, F#, Javascript, SQL",3-4 years,,I use it at work or for other commercial uses,Windows,"Visual Studio 2012 or 2013, Visual Studio 2010 or older",Twitter,"Better domain modelling with records and unions, Conciseness of code (I can see more at a glance), Correctness (no nulls, it works first time), Great community, Having fun again","Active Patterns, Algebraic types (inc discriminated unions and tuples), Backtick naming, Easy integration with other .NET libraries, Immutability by default, Object-oriented features (inc. C# compatibility, conciseness), The ""piping"" idiom, Type inference","Agents (MailboxProcessor), Async workflows, Interactive development, Quotations, Type providers, Units of measure","MSDN, F# bloggers, Links posted on social media such as Twitter, Personal mentoring, Reading F# code written by experts",I'm willing to learn advanced concepts but only if they are relevant and practical,"More material with short ""cookbook"" style information, More material with real-world examples and war stories, More interactive tutorials (e.g. like the F# Koans)",,"Internal enterprise projects, Commercial products","Utilities and tools, Mainstream business & enterprise applications, Text analysis/language parsing","SQL databases, Read-only data sources such as feeds",Windows,It's in use in critical production areas but not yet fully understood or adopted by my team. ,"Domain modelling: making illegal states unrepresentable, Correctness: fewer bugs and less rework, Better for solving complex problems","Training: They are worried about getting non-F# developers up to speed, No buy-in: There is lack of acceptance from other teams",,Dependency management,,,,,,Reference works or documentation with API listings or short tutorials,"Visual studio integration 
FParsec 
Fsharpforfunandprofit",
19/04/2016 00:16:32,10 or more years,Commercial software/web development,"Yes, I enjoy computer science and mathematics",Intermediate,"C#, F#, Javascript, Scala, Typescript",2-3 years,,I use it for hobby or side projects,"Windows, Mac, Linux","Visual Studio 2015 or newer, VS Code (with Ionide)",Twitter,"Better domain modelling with records and unions, Conciseness of code (I can see more at a glance), Correctness (no nulls, it works first time), Great community, Having fun again, Speed of development","Algebraic types (inc discriminated unions and tuples), Async workflows, Immutability by default, Interactive development, No dependency cycles, Simple ""one liner"" type definitions for records and DUs, The ""piping"" idiom, Type inference, Type providers, Units of measure",Integration with non-F# libraries,"F# books, F# bloggers, Links posted on social media such as Twitter, Reading F# code written by experts",I like theory -- I'm not afraid of monads and other abstractions,"More material with in-depth tutorials, More material with short ""cookbook"" style information, More material with real-world examples and war stories, More short ""live coding"" videos",,Not applicable. None of my F# code is used by other people,"Utilities and tools, Mainstream business & enterprise applications, Commercial web site/app","SQL databases, NoSQL database","Windows, Mac, Linux",I don't use F# at work,"Domain modelling: making illegal states unrepresentable, Correctness: fewer bugs and less rework, More productive with fewer developers, Efficiency/Performance, Easy concurrency with async and agents","Hiring: They worry about not being able to find F# developers, No buy-in: There is lack of acceptance from other teams",,,Lack of F# friendly libraries,"JVM, Javascript, Native",obsession wit c# - JavaScript is better target (go fabel!),,,,,
19/04/2016 00:28:51,10 or more years,Enterprise development,"Yes, I enjoy computer science and mathematics",Experienced,"C#, F#",2-3 years,,I use it for hobby or side projects,Windows,Visual Studio 2015 or newer,"Twitter, F# Weekly, HN, Reddit and other programming news sites, F# bloggers","Better domain modelling with records and unions, Conciseness of code (I can see more at a glance), Correctness (no nulls, it works first time), Having fun again, Speed of development","Agents (MailboxProcessor), Algebraic types (inc discriminated unions and tuples), Async workflows, Immutability by default, Interactive development, No dependency cycles, Simple ""one liner"" type definitions for records and DUs, The ""piping"" idiom, Type inference","Active Patterns, Object expressions, Quotations, Static type constraints, Units of measure","Links and instructions from fsharp.org, F# books, F# bloggers, Links posted on social media such as Twitter, Links mentioned in F# Weekly, Answers to Stack Overflow questions, Structured training/workshops, Videos (e.g. Community for F#), Reading F# code written by experts",I'm willing to learn advanced concepts but only if they are relevant and practical,"More material with in-depth tutorials, More material with short ""cookbook"" style information, More material with real-world examples and war stories, More podcasts and other audio-only material, More interactive tutorials (e.g. like the F# Koans)",,Internal enterprise projects,"Utilities and tools, Mainstream business & enterprise applications, Data analysis/statistics",,Windows,It's officially endorsed in my team for non-critical/non-production code,"Domain modelling: making illegal states unrepresentable, More productive with fewer developers, Faster time to market, Better for solving complex problems","Hiring: They worry about not being able to find F# developers, Training: They are worried about getting non-F# developers up to speed, No buy-in: There is lack of acceptance from other teams",,"Lack of good tutorials/documentation, Not enough real-world code to learn from","Working with C#-centric tooling, Less sophisticated tools for refactoring, etc., Difficulty in troubleshooting problems","Javascript, Native","It's so productive comparable to languages such as C# that if every developer switched, there'd be much fewer developers needed.",,,"In-person: In-depth trainings (2 or 3 days), In-person: A talks at user groups, In-person: Attending a talks as part of a conference, Books or longer articles explaining full context, Recorded talks from a conference or user group, In-depth online courses (e.g. Pluralsight)","Visual F# power tools, paket, fake, f# data, unquote",
19/04/2016 00:32:24,5-10 years,Enterprise development,"No, I don't know much theory",Learner,C#,Haven't really used it yet,"Poor IDE support, having difficulties using F# with WPF.",Just tinkering,Windows,Visual Studio 2015 or newer,"Twitter, F# bloggers","Better domain modelling with records and unions, Conciseness of code (I can see more at a glance), Correctness (no nulls, it works first time), Learning functional programming in general, Speed of development","Agents (MailboxProcessor), Algebraic types (inc discriminated unions and tuples), Immutability by default, Simple ""one liner"" type definitions for records and DUs, The ""piping"" idiom",,"F# bloggers, Links posted on social media such as Twitter, Videos (e.g. Community for F#)",I'm willing to learn advanced concepts but only if they are relevant and practical,"More material with in-depth tutorials, More material with real-world examples and war stories, More short ""live coding"" videos",,Not applicable. None of my F# code is used by other people,None - Just playing around,,Windows,I don't use F# at work,,,,Not enough real-world code to learn from,"Lack of F# friendly libraries, Working with C#-centric tooling, Less sophisticated tools for refactoring, etc., Difficulty in troubleshooting problems",None -- I'm happy with the CLR/Mono,Lack of instrumentation.,,,"In-person: In-depth trainings (2 or 3 days), In-person: Shorter workshops focused on a specific topic (1 day), In-person: Attending a talks as part of a conference, Recorded talks from a conference or user group, In-depth online courses (e.g. Pluralsight)",,
19/04/2016 00:41:30,10 or more years,Enterprise development,"Yes, I enjoy computer science and mathematics",Experienced,"C#, F#, Javascript, PHP",4 or more years,,I use it at work or for other commercial uses,Windows,Visual Studio 2015 or newer,"Twitter, F# Weekly","Better domain modelling with records and unions, Conciseness of code (I can see more at a glance), Correctness (no nulls, it works first time), Great community, Having fun again, Learning functional programming in general, Speed of development, Functional but can be tweaked to get high performance","Active Patterns, Algebraic types (inc discriminated unions and tuples), Async workflows, Computation expressions, Easy integration with other .NET libraries, Immutability by default, Interactive development, Object-oriented features (inc. C# compatibility, conciseness), printf that is type checked, Simple ""one liner"" type definitions for records and DUs, The ""piping"" idiom, Type providers","Agents (MailboxProcessor), Object expressions, Quotations, Static type constraints, Units of measure","MSDN, F# bloggers, Links posted on social media such as Twitter, Links mentioned in F# Weekly, Answers to Stack Overflow questions",I'm willing to learn advanced concepts but only if they are relevant and practical,"More material with in-depth tutorials, More material with short ""cookbook"" style information, More material with real-world examples and war stories, More short ""live coding"" videos",,"Internal enterprise projects, Open source projects","Utilities and tools, Algorithm-heavy business applications (non-financial), Commercial web site/app, Non-commercial web site/app","SQL databases, NoSQL database","Windows, Azure",It's officially endorsed in my team for critical/production areas,"Domain modelling: making illegal states unrepresentable, Correctness: fewer bugs and less rework, More productive with fewer developers, Easy concurrency with async and agents, Better for solving complex problems","Hiring: They worry about not being able to find F# developers, Fad: They have concerns over long term language viability",,,"Not being part of the core .NET distribution, Lack of good wrappers for non-F# libraries, Working with C#-centric tooling, Performance issues",Native,Still not much marketed by Microsoft,,,Reference works or documentation with API listings or short tutorials,"Visual F# Power tools
Fsharp.Data type providers",
19/04/2016 01:12:30,10 or more years,Enterprise development,"Yes, I enjoy computer science and mathematics",Experienced,"F#, Haskell",4 or more years,,I use it at work or for other commercial uses,Windows,"Visual Studio 2015 or newer, Visual Studio 2012 or 2013","Twitter, HN, Reddit and other programming news sites","Better domain modelling with records and unions, Conciseness of code (I can see more at a glance), Correctness (no nulls, it works first time), Speed of development","Active Patterns, Algebraic types (inc discriminated unions and tuples), Async workflows, Computation expressions, Easy integration with other .NET libraries, Immutability by default, Interactive development, Type inference","Object expressions, Type providers","MSDN, F# books, Reading F# code written by experts",I like theory -- I'm not afraid of monads and other abstractions,,,Internal enterprise projects,"Financial services, Mainstream business & enterprise applications",Not doing data centric apps,Windows,It's officially endorsed in my team for critical/production areas,"Domain modelling: making illegal states unrepresentable, Correctness: fewer bugs and less rework, More productive with fewer developers, Easy concurrency with async and agents, Better for solving complex problems",,,,Performance issues,"Javascript, Native",,,,"Books or longer articles explaining full context, Reference works or documentation with API listings or short tutorials, Recorded talks from a conference or user group","Async 
.Net Framework
WPF",
19/04/2016 02:03:11,2-5 years,Enterprise development,"Yes, I enjoy computer science and mathematics",Intermediate,"C#, Javascript, Typescript, Visual Basic",Haven't really used it yet,,Just tinkering,"Windows, Linux","Visual Studio 2015 or newer, VS Code (with Ionide)",Twitter,"Correctness (no nulls, it works first time), Great community, Learning functional programming in general, Speed of development","Active Patterns, The ""piping"" idiom, Type inference, Type providers, Units of measure",,"MSDN, Links and instructions from fsharp.org, F# books, Answers to Stack Overflow questions",I like theory -- I'm not afraid of monads and other abstractions,"More material with in-depth tutorials, More material with real-world examples and war stories",,,,,,It's used unofficially,Domain modelling: making illegal states unrepresentable,"No perceived benefits: They don't understand what benefits F# has over C# or other languages, Hiring: They worry about not being able to find F# developers, Fad: They have concerns over long term language viability, No buy-in: There is lack of acceptance from other teams",,Not enough real-world code to learn from,Not being part of the core .NET distribution,"JVM, Javascript, Native",,,,"In-person: Shorter workshops focused on a specific topic (1 day), Books or longer articles explaining full context, In-depth online courses (e.g. Pluralsight)",,
19/04/2016 02:04:34,10 or more years,Consulting,"Yes, I enjoy computer science and mathematics",Intermediate,"C#, Javascript",2-3 years,,I use it for hobby or side projects,"Windows, Mac","Visual Studio 2015 or newer, Atom (with Ionide), VS Code (with Ionide)","Twitter, F# Weekly, F# bloggers, fsharp channel on Slack","Conciseness of code (I can see more at a glance), Great community, Having fun again, Learning functional programming in general","Algebraic types (inc discriminated unions and tuples), Async workflows, Interactive development, Type providers, Units of measure","Agents (MailboxProcessor), Computation expressions","F# bloggers, Links posted on social media such as Twitter, Links mentioned in F# Weekly, Answers to Stack Overflow questions, Structured training/workshops, Videos (e.g. Community for F#)",I'm willing to learn advanced concepts but only if they are relevant and practical,"More material with in-depth tutorials, More short ""live coding"" videos",,Not applicable. None of my F# code is used by other people,None - Just playing around,"SQL databases, Read-only data sources such as feeds",Windows,It's used unofficially,,"No perceived benefits: They don't understand what benefits F# has over C# or other languages, Hiring: They worry about not being able to find F# developers, Training: They are worried about getting non-F# developers up to speed, No buy-in: There is lack of acceptance from other teams",,Don't understand the compiler errors,"Working with C#-centric tooling, Less sophisticated tools for refactoring, etc.",None -- I'm happy with the CLR/Mono,,,,"In-person: In-depth trainings (2 or 3 days), Books or longer articles explaining full context, In-depth online courses (e.g. Pluralsight)","F# Power Tools
Fake
Paket
Mbrace",
19/04/2016 02:12:07,10 or more years,Data or analytics related,"Yes, I enjoy computer science and mathematics",Intermediate,"C#, Java, Javascript",2-3 years,,I use it for hobby or side projects,"Windows, Linux",Visual Studio 2015 or newer,"F# Weekly, F# bloggers","Better domain modelling with records and unions, Correctness (no nulls, it works first time), Great community, Having fun again, Learning functional programming in general","Agents (MailboxProcessor), Algebraic types (inc discriminated unions and tuples), Async workflows, Interactive development, Simple ""one liner"" type definitions for records and DUs, Type inference, Type providers","Quotations, Units of measure","Links and instructions from fsharp.org, F# books, F# bloggers, Links posted on social media such as Twitter, Links mentioned in F# Weekly, Videos (e.g. Community for F#), Reading F# code written by experts",I like theory -- I'm not afraid of monads and other abstractions,"More material with real-world examples and war stories, More short ""live coding"" videos, More interactive tutorials (e.g. like the F# Koans)","pluralsight
Fsharp.tv beta course is aswsome",Not applicable. None of my F# code is used by other people,"None - Just playing around, Machine learning, Data analysis/statistics, Text analysis/language parsing","SQL databases, Event sourcing","Windows, Linux",I don't use F# at work,"Domain modelling: making illegal states unrepresentable, More productive with fewer developers, Faster time to market, Efficiency/Performance, Easy concurrency with async and agents, Better for solving complex problems","No perceived benefits: They don't understand what benefits F# has over C# or other languages, Training: They are worried about getting non-F# developers up to speed, No buy-in: There is lack of acceptance from other teams",,,"Less sophisticated tools for refactoring, etc., Difficulty in troubleshooting problems",JVM,,,,"In-person: A talks at user groups, Recorded talks from a conference or user group, In-depth online courses (e.g. Pluralsight)","fsfake
vs code
type providers
linqpad",
19/04/2016 02:18:18,5-10 years,Commercial software/web development,"Yes, I enjoy computer science and mathematics",Learner,"Java, Javascript, Python",Less than a year,,I use it for hobby or side projects,"Mac, Linux","MonoDevelop, Atom (with Ionide)","F# Weekly, HN, Reddit and other programming news sites, F# bloggers","Better domain modelling with records and unions, Conciseness of code (I can see more at a glance), Correctness (no nulls, it works first time)","Algebraic types (inc discriminated unions and tuples), Immutability by default, The ""piping"" idiom, Type providers","Active Patterns, Agents (MailboxProcessor), Async workflows, Computation expressions, Integration with non-F# libraries, Object expressions, Quotations","Links and instructions from fsharp.org, F# books, F# bloggers, Links mentioned in F# Weekly, Answers to Stack Overflow questions",I'm willing to learn advanced concepts but only if they are relevant and practical,"More material with in-depth tutorials, More material with short ""cookbook"" style information, More material with real-world examples and war stories, More short ""live coding"" videos",,Not applicable. None of my F# code is used by other people,Non-commercial web site/app,Not doing data centric apps,Linux,I don't use F# at work,,"Training: They are worried about getting non-F# developers up to speed, Fad: They have concerns over long term language viability, Too Windows-centric: They have concerns over cross-platform issues",,Lack of good tutorials/documentation,"Lack of F# friendly libraries, Less sophisticated tools for refactoring, etc.",JVM,"No easy to use tool such as lein (for clojure).

fsproject sets things up, paket manages packages, but running/testing all must be scripted by hand.",,,"Books or longer articles explaining full context, Reference works or documentation with API listings or short tutorials, Recorded talks from a conference or user group, In-depth online courses (e.g. Pluralsight)",,
19/04/2016 02:24:39,10 or more years,Consulting,"Yes, I enjoy computer science and mathematics",Learner,"C#, Javascript",1-2 years,,Just tinkering,Windows,Visual Studio 2015 or newer,Twitter,"Having fun again, Learning functional programming in general","Agents (MailboxProcessor), Async workflows, Easy integration with other .NET libraries, Immutability by default, Simple ""one liner"" type definitions for records and DUs","Type providers, Units of measure","F# bloggers, Links posted on social media such as Twitter, fsharpforfunandprofit.com",I'm willing to learn advanced concepts but only if they are relevant and practical,"More material with short ""cookbook"" style information, More short ""live coding"" videos",,Not applicable. None of my F# code is used by other people,None - Just playing around,Not doing data centric apps,Azure,I don't use F# at work,,,,Not enough real-world code to learn from,"Lack of F# friendly libraries, Lack of good wrappers for non-F# libraries",None -- I'm happy with the CLR/Mono,,,,"Books or longer articles explaining full context, Recorded talks from a conference or user group",,
19/04/2016 03:13:36,5-10 years,Enterprise development,"No, I don't know much theory",Learner,"C#, F#, Python",Less than a year,,I use it at work or for other commercial uses,Windows,"Visual Studio 2015 or newer, VS Code (with Ionide)","Twitter, F# Weekly, fsharp channel on Slack","Better domain modelling with records and unions, Conciseness of code (I can see more at a glance), Correctness (no nulls, it works first time), Great community, Having fun again, Learning functional programming in general, Speed of development","Agents (MailboxProcessor), Algebraic types (inc discriminated unions and tuples), Async workflows, Backtick naming, Immutability by default, The ""piping"" idiom","Computation expressions, Units of measure","F# books, F# bloggers, Links posted on social media such as Twitter, Links mentioned in F# Weekly, Videos (e.g. Community for F#)",I like theory -- I'm not afraid of monads and other abstractions,"More material with real-world examples and war stories, More short ""live coding"" videos, More podcasts and other audio-only material",Close the gap between novice and bind.,"Internal enterprise projects, Open source projects","Algorithm-heavy business applications (non-financial), Mainstream business & enterprise applications","SQL databases, NoSQL database, Event sourcing, Analytics",Windows,It's officially endorsed in my team for critical/production areas,"Domain modelling: making illegal states unrepresentable, Correctness: fewer bugs and less rework, More productive with fewer developers, Better for solving complex problems","No perceived benefits: They don't understand what benefits F# has over C# or other languages, Training: They are worried about getting non-F# developers up to speed, No buy-in: There is lack of acceptance from other teams",,"Lack of good tutorials/documentation, Not enough real-world code to learn from","Lack of F# friendly libraries, Lack of good wrappers for non-F# libraries, Less sophisticated tools for refactoring, etc.",None -- I'm happy with the CLR/Mono,"False sense of ""academic"" ... But that's aimed at FP not just f#",,,"In-person: In-depth trainings (2 or 3 days), In-person: Shorter workshops focused on a specific topic (1 day), In-person: A talks at user groups, In-person: Attending a talks as part of a conference, Books or longer articles explaining full context, Recorded talks from a conference or user group, In-depth online courses (e.g. Pluralsight)","Data/providers
Fscheck
Fsunit",
19/04/2016 03:28:40,10 or more years,Commercial software/web development,"No, I don't know much theory",Learner,"C#, F#",2-3 years,,I use it for hobby or side projects,Windows,Visual Studio 2015 or newer,"Twitter, F# bloggers","Better domain modelling with records and unions, Conciseness of code (I can see more at a glance)","Active Patterns, Algebraic types (inc discriminated unions and tuples), Immutability by default, Interactive development, Simple ""one liner"" type definitions for records and DUs, The ""piping"" idiom, Type inference","Computation expressions, Quotations, Static type constraints, Units of measure","F# books, F# bloggers, Links posted on social media such as Twitter, Answers to Stack Overflow questions, Videos (e.g. Community for F#)",I'm willing to learn advanced concepts but only if they are relevant and practical,"More material with in-depth tutorials, More material with short ""cookbook"" style information, More material with real-world examples and war stories, More short ""live coding"" videos",,"Commercial products, Open source projects","Utilities and tools, Custom development/specialist markets, Non-commercial web site/app",SQL databases,Windows,"It's not used officially, and only by me, but there is an F# production project that I maintain.","Domain modelling: making illegal states unrepresentable, Better for solving complex problems","No perceived benefits: They don't understand what benefits F# has over C# or other languages, No buy-in: There is lack of acceptance from other teams, Tooling; missing integration with e.g. ReSharper for coverage of the complete codebase makes using F# less desirable.",,"Don't understand the compiler errors, Not enough real-world code to learn from","Working with C#-centric tooling, Less sophisticated tools for refactoring, etc., Difficulty in troubleshooting problems",Javascript,"Being the red-headed step child in Microsoft's view of .NET. Visual Studio tooling lags far behind that for C# and VB, and integration between tooling for the languages isn't very deep; it's also never mentioned as a general-purpose language in official communication, thus most .NET developers don't even know about it, and many of those that do don't take it seriously.",,,"Books or longer articles explaining full context, Reference works or documentation with API listings or short tutorials, Recorded talks from a conference or user group, In-depth online courses (e.g. Pluralsight)","F# Power Tools, FAKE, Paket, FSharp.Data, FSharp.Desktop.UI",
19/04/2016 04:11:49,10 or more years,Enterprise development,"Yes, I enjoy computer science and mathematics",Experienced,"F#, Haskell, Python",I was using F# but have stopped,I moved to Haskell largely because it has far better linux support (Mono turned out to be horrible to work with) and I am very very sick of Windows as a server OS.,I use it at work or for other commercial uses,Windows,Visual Studio 2015 or newer,"Twitter, F# Weekly","Better domain modelling with records and unions, Conciseness of code (I can see more at a glance), Correctness (no nulls, it works first time), Great community, Having fun again, Learning functional programming in general, Speed of development","Algebraic types (inc discriminated unions and tuples), Computation expressions, Immutability by default, No dependency cycles, printf that is type checked, Simple ""one liner"" type definitions for records and DUs, Type inference","Agents (MailboxProcessor), Integration with non-F# libraries, Object-oriented compatibility, Quotations, Type providers, Units of measure","F# books, F# bloggers, Links posted on social media such as Twitter, Links mentioned in F# Weekly, Answers to Stack Overflow questions, Videos (e.g. Community for F#), Reading F# code written by experts",I like theory -- I'm not afraid of monads and other abstractions,"More short ""live coding"" videos, More interactive tutorials (e.g. like the F# Koans)","Get out from under Microsoft as fast as possible, make linux/Mac support critical.",Internal enterprise projects,"Mainstream business & enterprise applications, Commercial web site/app","Event sourcing, Read-only data sources such as feeds",Windows,It's officially endorsed in my team for critical/production areas,"Domain modelling: making illegal states unrepresentable, Correctness: fewer bugs and less rework, Easy concurrency with async and agents, Better for solving complex problems","Too Windows-centric: They have concerns over cross-platform issues, Too Microsoft-centric: They think it is too closely linked to Microsoft",Make the linux/Mac story for F# amazing.,Installation process,Cross-platform issues,"LLVM, Native",,,,"In-person: A talks at user groups, In-person: Attending a talks as part of a conference, Books or longer articles explaining full context, Reference works or documentation with API listings or short tutorials, Recorded talks from a conference or user group, In-depth online courses (e.g. Pluralsight)",,
19/04/2016 04:44:41,5-10 years,Enterprise development,"Yes, I enjoy computer science and mathematics",Expert,"C#, F#, Javascript, Ocaml/SML, Typescript",4 or more years,,I use it at work or for other commercial uses,"Windows, Mac, Linux","Visual Studio 2015 or newer, Xamarin, VS Code (with Ionide), OmniSharp, Cloudsharper","Twitter, F# Weekly","Great community, Having fun again","Async workflows, No dependency cycles, The ""piping"" idiom, Type inference, Type providers","Object expressions, Units of measure","MSDN, Links and instructions from fsharp.org, F# books, F# bloggers",I like theory -- I'm not afraid of monads and other abstractions,"More material with in-depth tutorials, More material with short ""cookbook"" style information, More material with real-world examples and war stories",,Commercial products,"None - Just playing around, Games, Commercial web site/app, Mobile apps","SQL databases, NoSQL database","Windows, Mac, Linux, iOS, Android, WinPhone",It's officially endorsed in my team for critical/production areas,"Easy concurrency with async and agents, Better for solving complex problems",Nothing. Everyone loves it.,,,Working with C#-centric tooling,Javascript,,,,"Books or longer articles explaining full context, Reference works or documentation with API listings or short tutorials","WebSharper
Fable
SqlClient
..and other typerproviders",
19/04/2016 04:52:25,10 or more years,Enterprise development,"Yes, I enjoy computer science and mathematics",Intermediate,"C#, Javascript",4 or more years,,I use it at work or for other commercial uses,Windows,Visual Studio 2015 or newer,"Twitter, F# Weekly","Better domain modelling with records and unions, Conciseness of code (I can see more at a glance)","Async workflows, Interactive development, Type providers, Units of measure",Agents (MailboxProcessor),"F# books, Links posted on social media such as Twitter, Links mentioned in F# Weekly, Answers to Stack Overflow questions, Videos (e.g. Community for F#)",I'm willing to learn advanced concepts but only if they are relevant and practical,"More material with in-depth tutorials, More material with real-world examples and war stories",,Internal enterprise projects,Financial services,SQL databases,Windows,It's officially endorsed in my team for critical/production areas,"Domain modelling: making illegal states unrepresentable, Better for solving complex problems","Hiring: They worry about not being able to find F# developers, No buy-in: There is lack of acceptance from other teams",Keep including at Microsoft events.,Not enough real-world code to learn from,Working with C#-centric tooling,None -- I'm happy with the CLR/Mono,,,,"Books or longer articles explaining full context, Reference works or documentation with API listings or short tutorials, Recorded talks from a conference or user group, In-depth online courses (e.g. Pluralsight)","Canopy
",
19/04/2016 05:03:22,10 or more years,Commercial software/web development,"No, I don't know much theory",Experienced,"C#, Clojure, F#",1-2 years,,I use it for hobby or side projects,Mac,VS Code (with Ionide),"Twitter, F# Weekly","Conciseness of code (I can see more at a glance), Correctness (no nulls, it works first time), Having fun again, Learning functional programming in general, Speed of development","Active Patterns, Algebraic types (inc discriminated unions and tuples), Easy integration with other .NET libraries, Immutability by default, Object expressions, Simple ""one liner"" type definitions for records and DUs, The ""piping"" idiom, Type inference","Object-oriented compatibility, Units of measure","F# books, F# bloggers, Links mentioned in F# Weekly, Answers to Stack Overflow questions",I like theory -- I'm not afraid of monads and other abstractions,"More material with in-depth tutorials, More material with short ""cookbook"" style information, More material with real-world examples and war stories, More interactive tutorials (e.g. like the F# Koans)",,Commercial products,"Algorithm-heavy business applications (non-financial), Commercial web site/app",Read-only data sources such as feeds,Azure,It's officially endorsed in my team for critical/production areas,"Domain modelling: making illegal states unrepresentable, Correctness: fewer bugs and less rework, More productive with fewer developers, Better for solving complex problems","Hiring: They worry about not being able to find F# developers, Too Windows-centric: They have concerns over cross-platform issues, No buy-in: There is lack of acceptance from other teams",,,"Not being part of the core .NET distribution, Working with C#-centric tooling, Less sophisticated tools for refactoring, etc.","JVM, LLVM, Native",Still seen as tied to MS,,,"Books or longer articles explaining full context, Reference works or documentation with API listings or short tutorials, Recorded talks from a conference or user group","Nessos, FsPicker, Parsec, Suave ",
19/04/2016 05:28:19,10 or more years,Commercial software/web development,"Yes, I enjoy computer science and mathematics",Intermediate,"C#, Javascript",4 or more years,,I use it for hobby or side projects,Windows,"Visual Studio 2015 or newer, Emacs","Twitter, F# Weekly","Better domain modelling with records and unions, Conciseness of code (I can see more at a glance), Correctness (no nulls, it works first time), Great community, Having fun again","Algebraic types (inc discriminated unions and tuples), Immutability by default, No dependency cycles, Simple ""one liner"" type definitions for records and DUs, Type inference","Object-oriented compatibility, Quotations, Static type constraints","F# bloggers, Videos (e.g. Community for F#), Reading F# code written by experts",I like theory -- I'm not afraid of monads and other abstractions,"More material with real-world examples and war stories, More short ""live coding"" videos",,Internal enterprise projects,"Utilities and tools, Algorithm-heavy business applications (non-financial), Mainstream business & enterprise applications","SQL databases, Read-only data sources such as feeds",Windows,It's used unofficially,"Domain modelling: making illegal states unrepresentable, Correctness: fewer bugs and less rework, More productive with fewer developers","No perceived benefits: They don't understand what benefits F# has over C# or other languages, Hiring: They worry about not being able to find F# developers",,,Working with C#-centric tooling,None -- I'm happy with the CLR/Mono,,,,"In-person: Shorter workshops focused on a specific topic (1 day), Books or longer articles explaining full context, Recorded talks from a conference or user group",,
19/04/2016 06:34:14,10 or more years,Enterprise development,"Yes, I enjoy computer science and mathematics",Experienced,C#,3-4 years,,I use it for hobby or side projects,Windows,Visual Studio 2015 or newer,"Twitter, F# Weekly","Better domain modelling with records and unions, Conciseness of code (I can see more at a glance), Having fun again","Algebraic types (inc discriminated unions and tuples), Immutability by default, The ""piping"" idiom","Active Patterns, Agents (MailboxProcessor), Async workflows, Object-oriented compatibility, Quotations, Static type constraints, Units of measure","F# books, Links posted on social media such as Twitter, Videos (e.g. Community for F#)",I like theory -- I'm not afraid of monads and other abstractions,,,Open source projects,Utilities and tools,,,I don't use F# at work,,,,,,,,,,"Books or longer articles explaining full context, Recorded talks from a conference or user group","Fscheck
Vs power tools
Fsharp.data
",
19/04/2016 07:00:25,10 or more years,"Academic, research, or related","Yes, I enjoy computer science and mathematics",Intermediate,"C++, F#, Java, Python",2-3 years,,I use it for hobby or side projects,Windows,"Visual Studio 2015 or newer, Visual Studio 2012 or 2013",F# Weekly,"Conciseness of code (I can see more at a glance), Correctness (no nulls, it works first time), Learning functional programming in general","Immutability by default, Interactive development, The ""piping"" idiom, Type inference","Active Patterns, Agents (MailboxProcessor), Async workflows, Quotations",F# books,I like theory -- I'm not afraid of monads and other abstractions,More interactive tutorials (e.g. like the F# Koans),,Not applicable. None of my F# code is used by other people,Financial services,Read-only data sources such as feeds,"Windows, Azure",I don't use F# at work,,No perceived benefits: They don't understand what benefits F# has over C# or other languages,,Installation process,Working with C#-centric tooling,"JVM, Javascript",,,,"Books or longer articles explaining full context, Reference works or documentation with API listings or short tutorials, In-depth online courses (e.g. Pluralsight)",,
19/04/2016 07:38:05,5-10 years,Commercial software/web development,"No, I don't know much theory",Intermediate,"C#, F#, Java, Javascript, Typescript",1-2 years,,I use it for hobby or side projects,Windows,"Visual Studio 2015 or newer, Visual Studio 2012 or 2013, Atom (with Ionide)","Twitter, F# Weekly, F# bloggers","Better domain modelling with records and unions, Conciseness of code (I can see more at a glance), Correctness (no nulls, it works first time), Great community, Having fun again","Immutability by default, No dependency cycles, Simple ""one liner"" type definitions for records and DUs, The ""piping"" idiom","Computation expressions, Type providers","F# bloggers, Links mentioned in F# Weekly, Reading F# code written by experts",I want to learn functional programming but I don't like academic jargon,"More material with in-depth tutorials, More material with short ""cookbook"" style information",,Not applicable. None of my F# code is used by other people,None - Just playing around,"SQL databases, Analytics","Windows, Linux",It's used unofficially,Domain modelling: making illegal states unrepresentable,No buy-in: There is lack of acceptance from other teams,,"Lack of good tutorials/documentation, Don't understand the compiler errors",Working with C#-centric tooling,None -- I'm happy with the CLR/Mono,,,,"Reference works or documentation with API listings or short tutorials, In-depth online courses (e.g. Pluralsight)",,
19/04/2016 07:39:43,10 or more years,Consulting,"No, I don't know much theory",Learner,C#,Less than a year,,I use it for hobby or side projects,Windows,"Visual Studio 2015 or newer, Visual Studio 2012 or 2013, VS Code (with Ionide)",Mathias Brandewinder,"Better domain modelling with records and unions, Conciseness of code (I can see more at a glance), Correctness (no nulls, it works first time), Great community, Having fun again, Learning functional programming in general, Speed of development",,,"MSDN, Links and instructions from fsharp.org, F# bloggers, Videos (e.g. Community for F#), Reading F# code written by experts, Mathias Brandewinder",I like theory -- I'm not afraid of monads and other abstractions,"More material with in-depth tutorials, More material with short ""cookbook"" style information, More material with real-world examples and war stories, More short ""live coding"" videos",,Not applicable. None of my F# code is used by other people,"None - Just playing around, Financial services",SQL databases,Windows,I don't use F# at work,,,,Don't understand the compiler errors,"Less sophisticated tools for refactoring, etc., Difficulty in troubleshooting problems",None -- I'm happy with the CLR/Mono,,,,"Books or longer articles explaining full context, Reference works or documentation with API listings or short tutorials, Recorded talks from a conference or user group, In-depth online courses (e.g. Pluralsight)",,
19/04/2016 07:45:16,5-10 years,Commercial software/web development,"No, I don't know much theory",Intermediate,"F#, Java, Javascript",Less than a year,,I use it for hobby or side projects,"Windows, Linux","Visual Studio 2015 or newer, Atom (with Ionide)",Twitter,"Correctness (no nulls, it works first time), Learning functional programming in general","Agents (MailboxProcessor), Easy integration with other .NET libraries, No dependency cycles, The ""piping"" idiom","Active Patterns, Async workflows","Links and instructions from fsharp.org, Answers to Stack Overflow questions",I want to learn functional programming but I don't like academic jargon,"More material with short ""cookbook"" style information, More material with real-world examples and war stories",,Not applicable. None of my F# code is used by other people,"Utilities and tools, Games, Non-commercial web site/app",Not doing data centric apps,"Windows, Linux",It's used unofficially,"More productive with fewer developers, Easy connection to MS Office",No real reason to and noboby else knows the language,,"Lack of good tutorials/documentation, Not enough real-world code to learn from","Not being part of the core .NET distribution, Working with C#-centric tooling",None -- I'm happy with the CLR/Mono,,,,"Reference works or documentation with API listings or short tutorials, In-depth online courses (e.g. Pluralsight)",,
19/04/2016 07:46:31,2-5 years,Science or related,"Yes, I enjoy computer science and mathematics",Learner,"C#, MATLAB",Less than a year,,I use it for hobby or side projects,Windows,"Visual Studio 2015 or newer, VS Code (with Ionide)","Twitter, F# Weekly, F# bloggers, fsharp channel on Slack","Having fun again, Learning functional programming in general, Functional but can be tweaked to get high performance","Active Patterns, Algebraic types (inc discriminated unions and tuples), Computation expressions, Easy integration with other .NET libraries, Immutability by default, Interactive development, Simple ""one liner"" type definitions for records and DUs, Type inference, Type providers, Units of measure",Agents (MailboxProcessor),"Links posted on social media such as Twitter, Links mentioned in F# Weekly, Videos (e.g. Community for F#), Reading F# code written by experts",I like theory -- I'm not afraid of monads and other abstractions,"More material with in-depth tutorials, More material with real-world examples and war stories, More short ""live coding"" videos",,Not applicable. None of my F# code is used by other people,,,,I don't use F# at work,,"No perceived benefits: They don't understand what benefits F# has over C# or other languages, Hiring: They worry about not being able to find F# developers",,I can't use my knowledge from C# or other imperative languages,,LLVM,lack of typeclasses/impicits,,,"Books or longer articles explaining full context, Reference works or documentation with API listings or short tutorials, Recorded talks from a conference or user group",,
19/04/2016 08:18:29,10 or more years,Financial services or similar,"Yes, I enjoy computer science and mathematics",Experienced,"C#, F#, Javascript",3-4 years,,I use it at work or for other commercial uses,Windows,"Visual Studio 2012 or 2013, Atom (with Ionide)","Twitter, F# Weekly, fsharp channel on Slack","Better domain modelling with records and unions, Conciseness of code (I can see more at a glance), Correctness (no nulls, it works first time)","Active Patterns, Async workflows, Computation expressions, Immutability by default, No dependency cycles, The ""piping"" idiom, Type inference, Type providers","Quotations, Units of measure","F# books, Links posted on social media such as Twitter, Links mentioned in F# Weekly",I'm willing to learn advanced concepts but only if they are relevant and practical,More interactive tutorials (e.g. like the F# Koans),,"Internal enterprise projects, Open source projects","Algorithm-heavy business applications (non-financial), Financial services, Text analysis/language parsing","SQL databases, Event sourcing","Windows, Amazon Web services",It's officially endorsed in my team for critical/production areas,"Domain modelling: making illegal states unrepresentable, Better for solving complex problems","Hiring: They worry about not being able to find F# developers, No buy-in: There is lack of acceptance from other teams",,Lack of good tutorials/documentation,"Not being part of the core .NET distribution, Working with C#-centric tooling","Javascript, LLVM",,,,"In-person: A talks at user groups, Books or longer articles explaining full context, Reference works or documentation with API listings or short tutorials","SqlCommandProvider
FSharp.Data
FAKE
Swensen.Unquote",
19/04/2016 08:31:13,10 or more years,Commercial software/web development,"Yes, I enjoy computer science and mathematics",Intermediate,"C#, C++, Elixir, F#, Ruby",2-3 years,,I use it for hobby or side projects,Windows,"Visual Studio 2015 or newer, Atom (with Ionide), VS Code (with Ionide)","Twitter, F# Weekly","Having fun again, Learning functional programming in general","Agents (MailboxProcessor), Async workflows, Easy integration with other .NET libraries, Type providers",,"Links and instructions from fsharp.org, F# bloggers, Links mentioned in F# Weekly",I'm willing to learn advanced concepts but only if they are relevant and practical,"More material with in-depth tutorials, More material with real-world examples and war stories, More podcasts and other audio-only material",,Internal enterprise projects,"Utilities and tools, Machine learning, Text analysis/language parsing","SQL databases, NoSQL database",Windows,It's used unofficially,More productive with fewer developers,Hiring: They worry about not being able to find F# developers,,Don't understand the compiler errors,"Less sophisticated tools for refactoring, etc., Difficulty in troubleshooting problems","Javascript, LLVM, Native",,,,"Books or longer articles explaining full context, Recorded talks from a conference or user group, In-depth online courses (e.g. Pluralsight)",,
19/04/2016 08:35:57,10 or more years,Financial services or similar,"Yes, I enjoy computer science and mathematics",Experienced,"C#, C++, F#, Python, R, Visual Basic",4 or more years,,I use it for hobby or side projects,Windows,Visual Studio 2015 or newer,"Twitter, F# Weekly","Conciseness of code (I can see more at a glance), Correctness (no nulls, it works first time), Great community, Speed of development","Async workflows, Immutability by default, Interactive development, The ""piping"" idiom, Type inference","Quotations, Units of measure","F# books, Links mentioned in F# Weekly, Structured training/workshops",I like theory -- I'm not afraid of monads and other abstractions,More material with real-world examples and war stories,,Open source projects,"Financial services, Games","SQL databases, NoSQL database",Windows,It's used unofficially,"More productive with fewer developers, Faster time to market","Hiring: They worry about not being able to find F# developers, Fad: They have concerns over long term language viability, No buy-in: There is lack of acceptance from other teams",,Not enough real-world code to learn from,Working with C#-centric tooling,None -- I'm happy with the CLR/Mono,,,,"Recorded talks from a conference or user group, In-depth online courses (e.g. Pluralsight)","F# Data, Visual Studio Power Tools, FsPickler, Paket, FAKE",
19/04/2016 08:42:49,10 or more years,Enterprise development,"No, I don't know much theory",Intermediate,"C#, F#, Perl",1-2 years,,I use it at work or for other commercial uses,Windows,Visual Studio 2015 or newer,"Twitter, F# Weekly, fsharp channel on Slack","Better domain modelling with records and unions, Conciseness of code (I can see more at a glance), Correctness (no nulls, it works first time), Speed of development, Perl with types","Easy integration with other .NET libraries, Immutability by default, Interactive development, Type providers, Units of measure, Discriminated unions for a clean domain model","Agents (MailboxProcessor), Async workflows","Links and instructions from fsharp.org, F# books",I'm willing to learn advanced concepts but only if they are relevant and practical,"More material with short ""cookbook"" style information",,Internal enterprise projects,"Utilities and tools, Financial services","Read-only data sources such as feeds, Analytics",Windows,Code on my own and take my own decisions,"Domain modelling: making illegal states unrepresentable, Correctness: fewer bugs and less rework",WPF ,More WPF stuff. Have a saver feeling of using F# with it.,"Don't understand the compiler errors, Tooling errors","Working with C#-centric tooling, Less sophisticated tools for refactoring, etc.",None -- I'm happy with the CLR/Mono,Steep starting point. Too many think of it as a special domain tool.,,,"In-person: In-depth trainings (2 or 3 days), In-person: Shorter workshops focused on a specific topic (1 day), Books or longer articles explaining full context",,
19/04/2016 08:44:05,5-10 years,Commercial software/web development,"Yes, I enjoy computer science and mathematics",Intermediate,C#,1-2 years,,I use it for hobby or side projects,Windows,"Visual Studio 2015 or newer, Sublime Text","Twitter, F# Weekly, F# bloggers","Better domain modelling with records and unions, Conciseness of code (I can see more at a glance), Correctness (no nulls, it works first time), Great community, Having fun again, Learning functional programming in general, Functional but can be tweaked to get high performance","Algebraic types (inc discriminated unions and tuples), Computation expressions, Easy integration with other .NET libraries, Immutability by default, Interactive development, No dependency cycles, Object expressions, Object-oriented features (inc. C# compatibility, conciseness), Simple ""one liner"" type definitions for records and DUs, The ""piping"" idiom, Type inference, Units of measure",Agents (MailboxProcessor),"MSDN, Links and instructions from fsharp.org, F# books, F# bloggers, Answers to Stack Overflow questions, Reading F# code written by experts",I like theory -- I'm not afraid of monads and other abstractions,"More material with in-depth tutorials, More material with short ""cookbook"" style information, More material with real-world examples and war stories",,Internal enterprise projects,Utilities and tools,Not doing data centric apps,Windows,It's officially endorsed in my team for non-critical/non-production code,"Domain modelling: making illegal states unrepresentable, Correctness: fewer bugs and less rework, Better for solving complex problems","Hiring: They worry about not being able to find F# developers, Fad: They have concerns over long term language viability, No buy-in: There is lack of acceptance from other teams",,Not enough real-world code to learn from,"Not being part of the core .NET distribution, Less sophisticated tools for refactoring, etc.",JVM,,,,"Books or longer articles explaining full context, Reference works or documentation with API listings or short tutorials, Recorded talks from a conference or user group",,
19/04/2016 08:52:00,5-10 years,Student,"Yes, I enjoy computer science and mathematics",Intermediate,"C#, F#, Java",Less than a year,,I use it for hobby or side projects,Windows,"Visual Studio 2015 or newer, VS Code (with Ionide)","Twitter, F# Weekly, F# bloggers","Conciseness of code (I can see more at a glance), Learning functional programming in general, Speed of development","Algebraic types (inc discriminated unions and tuples), Computation expressions, Immutability by default, Interactive development, printf that is type checked, Simple ""one liner"" type definitions for records and DUs, The ""piping"" idiom, Type providers, Units of measure","Active Patterns, Agents (MailboxProcessor), Object expressions, Object-oriented compatibility, Quotations","F# books, F# bloggers, Links posted on social media such as Twitter, Reading F# code written by experts, Fsharpforfunandprofit",I like theory -- I'm not afraid of monads and other abstractions,"More material with in-depth tutorials, More interactive tutorials (e.g. like the F# Koans)",It's more that I don't have time than it needing to be easier,"Internal enterprise projects, Not applicable. None of my F# code is used by other people","None - Just playing around, Data analysis/statistics",Read-only data sources such as feeds,"Windows, Linux, Azure",It's used unofficially,"More productive with fewer developers, Faster time to market","Training: They are worried about getting non-F# developers up to speed, Team is reliant on VS, and they would dismiss because experience isn't too hot",Tooling needs to be first class,Getting started (and continuing) with the tooling,"Working with C#-centric tooling, Less sophisticated tools for refactoring, etc.","JVM, Native","Most converts will come from a C# background, where tooling is first class and pretty much essential. I know my colleagues would consider it a bit of a joke language because of that.",,,"In-person: A talks at user groups, Books or longer articles explaining full context, Reference works or documentation with API listings or short tutorials, In-depth online courses (e.g. Pluralsight)","FSharp.Data
Suave.io
Paket",
19/04/2016 09:49:08,5-10 years,Commercial software/web development,"No, I don't know much theory",Intermediate,"C#, F#, Javascript, Typescript",2-3 years,,I use it for hobby or side projects,Windows,"Visual Studio 2015 or newer, Atom (with Ionide), VS Code (with Ionide)","Twitter, F# bloggers","Better domain modelling with records and unions, Correctness (no nulls, it works first time), Great community, Speed of development, Type Providers + Repl for Data analysis","Easy integration with other .NET libraries, Immutability by default, Interactive development, Type inference, Type providers","Static type constraints, Units of measure","F# books, F# bloggers, Structured training/workshops, Videos (e.g. Community for F#), Reading F# code written by experts, Meetups + Conferences",I'm willing to learn advanced concepts but only if they are relevant and practical,More material with real-world examples and war stories,,Commercial products,"Machine learning, Data analysis/statistics, Text analysis/language parsing","SQL databases, NoSQL database, Event sourcing, Analytics",Amazon Web services,It's used unofficially,Interactive development/Data Analysis,Libraries: .Net has fewer data analysis libraries than Python,Encourage F# adoption in Universities. The more libraries we get out of there the better,"Installation process, Opening files. using source directory not obvious and forgettable","Lack of F# friendly libraries, Lack of good wrappers for non-F# libraries",None -- I'm happy with the CLR/Mono,There isn't one. It just needs to jump the gap into mainstream and grow its community. ,,,"In-person: A talks at user groups, In-person: Attending a talks as part of a conference, Books or longer articles explaining full context, Recorded talks from a conference or user group",Fslab + Everything in FsLab,
19/04/2016 10:03:46,1-2 years,Enterprise development,"Yes, I enjoy computer science and mathematics",Intermediate,"C#, F#",1-2 years,,I use it for hobby or side projects,Windows,Visual Studio 2015 or newer,"Twitter, F# Weekly, F# bloggers","Better domain modelling with records and unions, Conciseness of code (I can see more at a glance), Correctness (no nulls, it works first time), Having fun again, Speed of development","Easy integration with other .NET libraries, No dependency cycles, Simple ""one liner"" type definitions for records and DUs, The ""piping"" idiom, Type inference, Type providers","Active Patterns, Agents (MailboxProcessor), Computation expressions, Interactive development, Object expressions, Object-oriented compatibility, Quotations, Static type constraints, Units of measure","F# books, F# bloggers, Videos (e.g. Community for F#), Reading F# code written by experts",,,,,,,,,,,,,,,,,,,,
19/04/2016 11:06:31,10 or more years,Enterprise development,"Yes, I enjoy computer science and mathematics",Learner,"C#, Javascript",Less than a year,,Startup,Linux,Visual Studio 2015 or newer,"Twitter, F# bloggers","Conciseness of code (I can see more at a glance), Correctness (no nulls, it works first time), Learning functional programming in general, Speed of development","Immutability by default, Interactive development, The ""piping"" idiom, Type inference","Agents (MailboxProcessor), Async workflows, Computation expressions, Type providers","F# books, F# bloggers, Pluralsight ",I'm willing to learn advanced concepts but only if they are relevant and practical,"More material with in-depth tutorials, More material with short ""cookbook"" style information, More material with real-world examples and war stories, More short ""live coding"" videos, More podcasts and other audio-only material, More interactive tutorials (e.g. like the F# Koans)",,Startup project,Financial services,Not doing data centric apps,Linux,I don't use F# at work,,"No perceived benefits: They don't understand what benefits F# has over C# or other languages, No buy-in: There is lack of acceptance from other teams",,Not enough real-world code to learn from,Lack of F# friendly libraries,Native,,,,In-depth online courses (e.g. Pluralsight),"Paket, Fake",
19/04/2016 11:07:44,10 or more years,Data or analytics related,"No, I don't know much theory",Learner,"C#, F#, Javascript, Visual Basic, Elm",Less than a year,,I use it for hobby or side projects,"Windows, Mac","Visual Studio 2015 or newer, Atom (with Ionide), VS Code (with Ionide)","Twitter, F# Weekly, HN, Reddit and other programming news sites, F# bloggers, fsharp channel on Slack","Having fun again, Learning functional programming in general","Algebraic types (inc discriminated unions and tuples), Immutability by default, The ""piping"" idiom","Active Patterns, Integration with non-F# libraries, Object-oriented compatibility","F# books, F# bloggers, Links posted on social media such as Twitter, Links mentioned in F# Weekly, Answers to Stack Overflow questions",I'm willing to learn advanced concepts but only if they are relevant and practical,"More material with short ""cookbook"" style information, More material with real-world examples and war stories, More short ""live coding"" videos",Better documentation of libraries and language,Open source projects,"Commercial web site/app, Non-commercial web site/app",SQL databases,"Windows, Mac, Other",I don't use F# at work,,,more and better tools,"Lack of good tutorials/documentation, Installation process, Not enough real-world code to learn from",Difficulty in troubleshooting problems,Javascript,outside VS support,,,"In-person: In-depth trainings (2 or 3 days), Books or longer articles explaining full context",,
19/04/2016 11:34:04,10 or more years,Commercial software/web development,"Yes, I enjoy computer science and mathematics",Experienced,"C#, F#, Elm, Livescript",4 or more years,,I use it at work or for other commercial uses,"Windows, Linux","Visual Studio 2015 or newer, VS Code (with Ionide)","Twitter, F# Weekly, F# bloggers","Better domain modelling with records and unions, Conciseness of code (I can see more at a glance), Correctness (no nulls, it works first time), Great community, Having fun again, Learning functional programming in general, Speed of development, Functional but can be tweaked to get high performance","Algebraic types (inc discriminated unions and tuples), Async workflows, Immutability by default, Quotations, The ""piping"" idiom, Type inference, Type providers",Static type constraints,"F# books, Links posted on social media such as Twitter, Links mentioned in F# Weekly, Personal mentoring, Reading F# code written by experts",I'm willing to learn advanced concepts but only if they are relevant and practical,"More material with in-depth tutorials, More material with real-world examples and war stories",,"Internal enterprise projects, Commercial products, Open source projects","Utilities and tools, Financial services, Machine learning, Commercial web site/app, Mobile apps","SQL databases, NoSQL database, Event sourcing, Read-only data sources such as feeds","Windows, Mac, Linux, iOS, Android, WinPhone, Azure, Amazon Web services",It's officially endorsed in my team for critical/production areas,"Domain modelling: making illegal states unrepresentable, Correctness: fewer bugs and less rework, More productive with fewer developers, Faster time to market, Efficiency/Performance, Easy concurrency with async and agents, Better for solving complex problems","No perceived benefits: They don't understand what benefits F# has over C# or other languages, No buy-in: There is lack of acceptance from other teams",,,"Less sophisticated tools for refactoring, etc., Cross-platform issues","JVM, Javascript, LLVM","Language-wise: Lack of type classes, higher-kinded types, monad transformers.

Commerically: It still feels very much tied to Windows. Hopefully .NET Core will resolve this to some extent but it feels like if F# had been a JVM language it would now be massively more popular.",,,"Books or longer articles explaining full context, Reference works or documentation with API listings or short tutorials, Recorded talks from a conference or user group","Websharper
Chessie
FSharpx
Fake
Paket",
19/04/2016 12:41:36,10 or more years,Commercial software/web development,"Yes, I enjoy computer science and mathematics",Learner,"C#, Java",Less than two months,,I use it for hobby or side projects,Mac,"Visual Studio 2015 or newer, VS Code (with Ionide)",F# Weekly,"Better domain modelling with records and unions, Having fun again, Learning functional programming in general","Easy integration with other .NET libraries, Immutability by default, Quotations, The ""piping"" idiom, Type providers, Units of measure",,,I want to learn functional programming but I don't like academic jargon,"More material with short ""cookbook"" style information",real world c# (OO) versus f# (funtional) examples (not hello world).,Internal enterprise projects,Utilities and tools,,"Windows, Mac, Linux",I don't use F# at work,,"No perceived benefits: They don't understand what benefits F# has over C# or other languages, Hiring: They worry about not being able to find F# developers",,"Don't understand the compiler errors, Real world F# design approaches",Not being part of the core .NET distribution,Native,F# should be more involved in the new .NET core 1.0 work,,,"In-person: In-depth trainings (2 or 3 days), Books or longer articles explaining full context",,
19/04/2016 16:10:42,10 or more years,art,"No, I don't know much theory",Learner,"F#, Rust",4 or more years,,experimental incubator,Windows,"Visual Studio 2012 or 2013, Atom (with Ionide), VS Code (with Ionide)","Twitter, F# Weekly, Google groups, F# bloggers, fsharp channel on Slack, StackOverflow chat, meetups","Great community, Having fun again, Functional but can be tweaked to get high performance, open source fsharp potential to improve fsharp","Async workflows, Computation expressions, Easy integration with other .NET libraries, Units of measure",,"Links and instructions from fsharp.org, F# books, F# bloggers, Links posted on social media such as Twitter, Links mentioned in F# Weekly, Answers to Stack Overflow questions, Videos (e.g. Community for F#), Reading F# code written by experts, F#J FSharp Journal by Jon Harrop",,"More interactive tutorials (e.g. like the F# Koans), It's not so much the kinds, but the material ... I'd like more how to improve F# material","Add rust like 'Fearless Concurrency'  ""ownership"" type .... 

Need 'language' to think about concurrency ... the major challenge of our perfect silcon Bak's sandpile.

FPL's are GR8 at 'recursion' language ... not so much 'concurrency' ... ",Not applicable. None of my F# code is used by other people,"Custom development/specialist markets, Mobile apps, Other",Not doing data centric apps,Other,explore the creative space of functional first,finding it's limits and exploring ways to expand them,"Too Windows-centric: They have concerns over cross-platform issues, Too Microsoft-centric: They think it is too closely linked to Microsoft, not a web platform ... yet","some vision ... work with W3C WebAssembly Community so FSharp can address the opportunity of game changing WebAssembly
i.e compile F# to WASM (Making some progress there fssf just added 'web' channel)

Also add rust like type ""ownership"" ... for memory safety and so I can program without a garbage collector ... Disaster averted. see Aaron Turn and rust etc.

Who said it'd be easy?",F# community and lang is GR8 ... it's connecting with WWW  that is frustrating.,"Lack of F# friendly libraries, Lack of good wrappers for non-F# libraries, lack of web as patform",Game changer -- The web is the platform. Web = native.,"SWOT -- Lack of vision.
F#ture is WebAssembly ... 

Like a parachute ... allow/consider for a moment, since we're reflecting here ... that the web is the platform and web = native, some serious people are real serious about this, ... how does the FSharp community address this? How will FSharp applications be rearchitected? 

Then there's timing. d/dt NE 0. One calendar month is one web year.","Next year add 
- web as a platform choice
- link to a working web fsharp interactive dev site
(does either of the ones at f# snippets work? ) ","Thanks for the survey ... feedback loop systems work best.
F#UN!","Recorded talks from a conference or user group, Yan Cui blog posts does a GR8 job and cross languages",Early on WPF ... not so much now,
19/04/2016 16:51:48,10 or more years,Retired,"Yes, I enjoy computer science and mathematics",Intermediate,"C, F#, Go, Java, Python, Lisp",3-4 years,,I use it for hobby or side projects,Windows,"Visual Studio 2015 or newer, Emacs, Textpad","F# Weekly, StackOverflow chat","Conciseness of code (I can see more at a glance), Correctness (no nulls, it works first time), Having fun again, Learning functional programming in general","Algebraic types (inc discriminated unions and tuples), Easy integration with other .NET libraries, Immutability by default, Interactive development, Object expressions, printf that is type checked, Simple ""one liner"" type definitions for records and DUs, The ""piping"" idiom, Type inference, Type providers","Agents (MailboxProcessor), Computation expressions, Integration with non-F# libraries, Units of measure","F# books, F# bloggers, Links mentioned in F# Weekly, Answers to Stack Overflow questions, Videos (e.g. Community for F#), Reading F# code written by experts",I like theory -- I'm not afraid of monads and other abstractions,"More material with in-depth tutorials, More material with short ""cookbook"" style information, More material with real-world examples and war stories",,Internal enterprise projects,"Utilities and tools, Custom development/specialist markets, Mainstream business & enterprise applications, Research/Teaching, Data analysis/statistics, Text analysis/language parsing",SQL databases,Windows,I am retired,,,,"Don't understand the compiler errors, Not enough real-world code to learn from","Lack of F# friendly libraries, Lack of good wrappers for non-F# libraries","JVM, LLVM",,,,"Books or longer articles explaining full context, Reference works or documentation with API listings or short tutorials, Recorded talks from a conference or user group",,
19/04/2016 16:53:35,2-5 years,Systems engineer,"Yes, I enjoy computer science and mathematics",Beginner,"C#, Python",Less than two months,,I use it for hobby or side projects,"Windows, Linux",Visual Studio 2015 or newer,Twitter,Learning functional programming in general,,,F# books,I want to learn functional programming but I don't like academic jargon,"More material with in-depth tutorials, More material with short ""cookbook"" style information, More short ""live coding"" videos",,Not applicable. None of my F# code is used by other people,"Games, Non-commercial web site/app",Not doing data centric apps,,I don't use F# at work,,Nothing. Everyone loves it.,,Lack of good tutorials/documentation,"Less sophisticated tools for refactoring, etc.","None -- I'm happy with the CLR/Mono, Native",,,,Books or longer articles explaining full context,,
19/04/2016 17:18:55,10 or more years,Commercial software/web development,"Yes, I enjoy computer science and mathematics",Experienced,"C#, F#, Javascript",2-3 years,,I use it at work or for other commercial uses,Windows,Visual Studio 2015 or newer,"Twitter, F# bloggers","Better domain modelling with records and unions, Conciseness of code (I can see more at a glance), Correctness (no nulls, it works first time), Learning functional programming in general, Speed of development, Functional but can be tweaked to get high performance","Algebraic types (inc discriminated unions and tuples), Async workflows, Immutability by default, No dependency cycles, Simple ""one liner"" type definitions for records and DUs, The ""piping"" idiom, Type inference","Type providers, Units of measure","F# bloggers, Answers to Stack Overflow questions, Reading F# code written by experts, Hands on experience and a deadline",I like theory -- I'm not afraid of monads and other abstractions,More material with real-world examples and war stories,,Commercial products,"Custom development/specialist markets, Other",Event sourcing,Azure,It's officially endorsed in my team for critical/production areas,"Domain modelling: making illegal states unrepresentable, Correctness: fewer bugs and less rework, More productive with fewer developers, Faster time to market, Easy concurrency with async and agents, Better for solving complex problems",Nothing. Everyone loves it.,,Visual Studio has areas where it's not a first-class citizen.,"Lack of F# friendly libraries, Less sophisticated tools for refactoring, etc.",Javascript,Would be great to have feature like Haskell's IO monad for isolating pure and impure code.,,,"In-person: Attending a talks as part of a conference, Books or longer articles explaining full context, Reference works or documentation with API listings or short tutorials, Recorded talks from a conference or user group","F# PowerTools
Railway Oriented Programming (not a library per se but close enough)
",
19/04/2016 17:43:07,10 or more years,Enterprise development,"No, I don't know much theory",Intermediate,C#,1-2 years,,Just tinkering,Windows,"Visual Studio 2015 or newer, Visual Studio 2012 or 2013","F# Weekly, F# bloggers","Better domain modelling with records and unions, Conciseness of code (I can see more at a glance), Learning functional programming in general","Active Patterns, Agents (MailboxProcessor), Algebraic types (inc discriminated unions and tuples), Immutability by default, No dependency cycles, Type inference, Type providers","Computation expressions, Quotations, Units of measure","MSDN, F# books, F# bloggers",I'm willing to learn advanced concepts but only if they are relevant and practical,"More material with in-depth tutorials, More material with short ""cookbook"" style information",,Not applicable. None of my F# code is used by other people,None - Just playing around,"Read-only data sources such as feeds, Not doing data centric apps",Windows,I don't use F# at work,,No buy-in: There is lack of acceptance from other teams,,Don't understand the compiler errors,"Less sophisticated tools for refactoring, etc., Difficulty in troubleshooting problems","None -- I'm happy with the CLR/Mono, JVM, Javascript, LLVM, Native",,,,"Books or longer articles explaining full context, In-depth online courses (e.g. Pluralsight)",,
19/04/2016 18:19:37,10 or more years,Commercial software/web development,"Yes, I enjoy computer science and mathematics",Learner,"C, C#, C++, F#, R",3-4 years,,I use it for hobby or side projects,Windows,"Visual Studio 2015 or newer, VS Code (with Ionide)","Twitter, F# bloggers, channel9","Conciseness of code (I can see more at a glance), Having fun again, Learning functional programming in general, Speed of development","Agents (MailboxProcessor), Async workflows, The ""piping"" idiom","Active Patterns, Quotations","MSDN, F# books, F# bloggers, Videos (e.g. Community for F#), Reading F# code written by experts, fsnip.net",I like theory -- I'm not afraid of monads and other abstractions,"More material with in-depth tutorials, More material with real-world examples and war stories",,tools used by colleagues & other teams,"Utilities and tools, Algorithm-heavy business applications (non-financial), Machine learning, Data analysis/statistics, Text analysis/language parsing",Analytics,"Windows, Linux, Azure",It's officially endorsed in my team for non-critical/non-production code,"Correctness: fewer bugs and less rework, More productive with fewer developers, Efficiency/Performance, Easy concurrency with async and agents, Better for solving complex problems",Training: They are worried about getting non-F# developers up to speed,,Not enough real-world code to learn from,"Lack of F# friendly libraries, Lack of good wrappers for non-F# libraries, Working with C#-centric tooling, Difficulty in troubleshooting problems","None -- I'm happy with the CLR/Mono, Native",,,,"Books or longer articles explaining full context, Recorded talks from a conference or user group, In-depth online courses (e.g. Pluralsight)",Fsharp.Data,
19/04/2016 18:22:39,10 or more years,"Academic, research, or related","Yes, I enjoy computer science and mathematics",Experienced,"C, F#, Haskell, Ocaml/SML, Rust, Scala",4 or more years,,I use it for research or academic work,"Windows, Linux",Emacs,"Twitter, F# Weekly, HN, Reddit and other programming news sites","Better domain modelling with records and unions, Conciseness of code (I can see more at a glance), Correctness (no nulls, it works first time), Functional but can be tweaked to get high performance","Agents (MailboxProcessor), Algebraic types (inc discriminated unions and tuples), Async workflows, Computation expressions, Immutability by default, Simple ""one liner"" type definitions for records and DUs, The ""piping"" idiom",,,,,,,,,,,,,,,,,,,,,,
19/04/2016 18:24:51,10 or more years,Open source development,"Yes, I enjoy computer science and mathematics",Expert,"F#, Javascript",4 or more years,,I use it at work or for other commercial uses,"Windows, Mac, Linux","Visual Studio 2015 or newer, Xamarin, Atom (with Ionide)","Twitter, F# Weekly, F# bloggers","Better domain modelling with records and unions, Correctness (no nulls, it works first time), Great community, Having fun again, Speed of development","Algebraic types (inc discriminated unions and tuples), Easy integration with other .NET libraries, Interactive development, Type inference, Type providers",,"F# bloggers, Links posted on social media such as Twitter, Links mentioned in F# Weekly, Reading F# code written by experts",I'm willing to learn advanced concepts but only if they are relevant and practical,,more larger complete sample projects,Open source projects,"Financial services, Research/Teaching",Read-only data sources such as feeds,"Windows, Linux, Azure",It's officially endorsed in my team for critical/production areas,"Correctness: fewer bugs and less rework, More productive with fewer developers, Faster time to market, Better for solving complex problems","Hiring: They worry about not being able to find F# developers, Fad: They have concerns over long term language viability",,"Don't understand the compiler errors, Not enough real-world code to learn from","Lack of F# friendly libraries, FSharp.Core version mismatches",Javascript,,,,,"F# Data
Paket
FAKE
F# Compiler Service
Suave",
19/04/2016 18:30:01,10 or more years,"Academic, research, or related","Yes, I enjoy computer science and mathematics",Experienced,"C, F#, Haskell, Objective-C, R, Rust, Scala",4 or more years,,I use it for research or academic work,"Windows, Linux",Emacs,"Twitter, F# Weekly, HN, Reddit and other programming news sites","Better domain modelling with records and unions, Conciseness of code (I can see more at a glance), Correctness (no nulls, it works first time), Functional but can be tweaked to get high performance","Agents (MailboxProcessor), Algebraic types (inc discriminated unions and tuples), Async workflows, Immutability by default, Simple ""one liner"" type definitions for records and DUs, Type inference","Active Patterns, Object expressions, Object-oriented compatibility, Quotations, Units of measure","Links and instructions from fsharp.org, F# books, F# bloggers, compiler source",I like theory -- I'm not afraid of monads and other abstractions,"More material with in-depth tutorials, More material with short ""cookbook"" style information",,"Internal enterprise projects, Open source projects","Algorithm-heavy business applications (non-financial), Custom development/specialist markets, Non-commercial web site/app, Data analysis/statistics, Text analysis/language parsing","SQL databases, NoSQL database, Read-only data sources such as feeds","Windows, Linux, Android",It's officially endorsed in my team for critical/production areas,"Domain modelling: making illegal states unrepresentable, Correctness: fewer bugs and less rework, More productive with fewer developers, Easy concurrency with async and agents, Better for solving complex problems","Hiring: They worry about not being able to find F# developers, Money: They worry that good F# developers will cost too much, Too Windows-centric: They have concerns over cross-platform issues, Too Microsoft-centric: They think it is too closely linked to Microsoft",,Installation process,"Lack of good wrappers for non-F# libraries, Difficulty in troubleshooting problems, Cross-platform issues","JVM, Javascript, LLVM, Please! Any!",,,,"Books or longer articles explaining full context, Reference works or documentation with API listings or short tutorials, In-depth online courses (e.g. Pluralsight)",,
19/04/2016 18:29:34,5-10 years,Consulting,"No, I don't know much theory",Intermediate,"C#, Java",2-3 years,,I use it for hobby or side projects,"Mac, Linux","Xamarin, VS Code (with Ionide)",Twitter,"Correctness (no nulls, it works first time), Having fun again, Functional but can be tweaked to get high performance","Active Patterns, Agents (MailboxProcessor), Async workflows, Immutability by default, Type inference","Object expressions, Quotations","Links and instructions from fsharp.org, F# books, F# bloggers, Links posted on social media such as Twitter, Reading F# code written by experts",I'm willing to learn advanced concepts but only if they are relevant and practical,"More material with in-depth tutorials, More material with real-world examples and war stories",,"Internal enterprise projects, Open source projects",Non-commercial web site/app,"SQL databases, Event sourcing","Mac, Linux, Azure, Amazon Web services",It's officially endorsed in my team for non-critical/non-production code,"Correctness: fewer bugs and less rework, Efficiency/Performance, Easy concurrency with async and agents",,,"Lack of good tutorials/documentation, Not enough real-world code to learn from","Working with C#-centric tooling, Less sophisticated tools for refactoring, etc.",LLVM,,,,"In-person: Shorter workshops focused on a specific topic (1 day), In-person: A talks at user groups, Books or longer articles explaining full context",,
19/04/2016 18:43:55,10 or more years,Commercial software/web development,"No, I don't know much theory",Intermediate,"C#, Go",Less than two months,,Just tinkering,"Windows, Mac",Visual Studio 2015 or newer,"Twitter, F# bloggers","Better domain modelling with records and unions, Learning functional programming in general","Immutability by default, Type providers","Agents (MailboxProcessor), Object-oriented compatibility","Links and instructions from fsharp.org, F# bloggers",I want to learn functional programming but I don't like academic jargon,"More material with in-depth tutorials, More material with real-world examples and war stories, More short ""live coding"" videos",,,,,,I don't use F# at work,"Domain modelling: making illegal states unrepresentable, Correctness: fewer bugs and less rework",,,,,,,,,,,
19/04/2016 18:54:27,10 or more years,Commercial software/web development,"No, I don't know much theory",Learner,"C#, Javascript, PHP",Less than a year,,Just tinkering,Windows,"Visual Studio 2015 or newer, Atom (with Ionide)",Twitter,"Better domain modelling with records and unions, Conciseness of code (I can see more at a glance), Having fun again, Learning functional programming in general, Speed of development","Algebraic types (inc discriminated unions and tuples), Backtick naming, Easy integration with other .NET libraries, Immutability by default, Simple ""one liner"" type definitions for records and DUs, The ""piping"" idiom, Type inference","Agents (MailboxProcessor), Async workflows, Computation expressions, Units of measure","F# books, F# bloggers, Links mentioned in F# Weekly, Answers to Stack Overflow questions, Reading F# code written by experts",I'm willing to learn advanced concepts but only if they are relevant and practical,"More material with in-depth tutorials, More material with short ""cookbook"" style information, More material with real-world examples and war stories, More podcasts and other audio-only material, More interactive tutorials (e.g. like the F# Koans)",,Not applicable. None of my F# code is used by other people,None - Just playing around,Read-only data sources such as feeds,,I don't use F# at work,,"Hiring: They worry about not being able to find F# developers, Money: They worry that good F# developers will cost too much, Training: They are worried about getting non-F# developers up to speed, No buy-in: There is lack of acceptance from other teams",,"Don't understand the compiler errors, Not enough real-world code to learn from","Working with C#-centric tooling, Difficulty in troubleshooting problems","None -- I'm happy with the CLR/Mono, Javascript",,,,"In-person: In-depth trainings (2 or 3 days), In-person: Shorter workshops focused on a specific topic (1 day), Books or longer articles explaining full context",,
19/04/2016 18:57:36,5-10 years,Enterprise development,"No, I don't know much theory",Intermediate,"C#, F#, Typescript",Less than a year,,I use it at work or for other commercial uses,Windows,"Visual Studio 2015 or newer, Vim","F# Weekly, F# bloggers, fsharp channel on Slack","Better domain modelling with records and unions, Conciseness of code (I can see more at a glance), Correctness (no nulls, it works first time), Great community, Having fun again, Learning functional programming in general","Algebraic types (inc discriminated unions and tuples), Async workflows, Backtick naming, Computation expressions, Easy integration with other .NET libraries, Immutability by default, Interactive development, No dependency cycles, Object-oriented features (inc. C# compatibility, conciseness), printf that is type checked, Simple ""one liner"" type definitions for records and DUs, The ""piping"" idiom, Type inference, Type providers","Agents (MailboxProcessor), Quotations, Units of measure","MSDN, Links and instructions from fsharp.org, F# bloggers, Links mentioned in F# Weekly, Answers to Stack Overflow questions, Slack F# Channel",I'm willing to learn advanced concepts but only if they are relevant and practical,,"Practical, simple, and complete examples.",Internal enterprise projects,"Utilities and tools, Mainstream business & enterprise applications",SQL databases,Windows,It's officially endorsed in my team for critical/production areas,"Correctness: fewer bugs and less rework, More productive with fewer developers, Efficiency/Performance, Easy concurrency with async and agents, Better for solving complex problems",No perceived benefits: They don't understand what benefits F# has over C# or other languages,"Evangelism by individual developers and just use it, damn the consequences! It seems like some people like the idea but are not bold enough to start implementing it at work.",Not enough real-world code to learn from,Understanding good practices in F# for WebAPI,Javascript,Just learning the gotchas and which feature is a good fit for which problem.,,"There are a lot of good tutorials out there but a lot of times they fall short by not showing more realistic examples. Like the latest problem was learning Railway Oriented Programming. Although the tutorial and examples are incredible they didn't include asynchronous code with it. But eventually I figured out how to do it simply. So, I guess, the problem is growing pains while I'm learning. Which would be true for anything when you are learning by yourself. Which makes the FSharp slack channel great. Unfortunately, when using slack it is a closed garden and people will have to ask the same questions over and over instead of using StackOverflow where people can look up solutions that have already been created. It seems lately StackOverflow hasn't been getting the response that it used to have and people are moving to closed gardens. Frustrating.","Books or longer articles explaining full context, Recorded talks from a conference or user group","Visual Studio
VS F# Power Tools (if that is what it is called)",
19/04/2016 19:14:07,10 or more years,Enterprise development,,Learner,"C#, C++, Javascript, Typescript",1-2 years,,Just tinkering,"Windows, Mac","Visual Studio 2015 or newer, VS Code (with Ionide)","Twitter, F# bloggers, fsharp channel on Slack","Conciseness of code (I can see more at a glance), Correctness (no nulls, it works first time), Having fun again, Learning functional programming in general","Active Patterns, Algebraic types (inc discriminated unions and tuples), Computation expressions, Easy integration with other .NET libraries, printf that is type checked, Type inference, Units of measure, Match","Async workflows, Object expressions, Quotations, Static type constraints","F# books, F# bloggers, Links posted on social media such as Twitter, Answers to Stack Overflow questions, Videos (e.g. Community for F#)",I'm willing to learn advanced concepts but only if they are relevant and practical,"More material with in-depth tutorials, More material with real-world examples and war stories, More short ""live coding"" videos, More interactive tutorials (e.g. like the F# Koans)","I wish I could pair-program/apprentice with an experienced F# developer. but alas I probably know F# better than anyone within 100 miles, so there is no opportunity to do that. I'd really like to see how a seasoned F# developer actually approaches and develops on real-world projects.",Internal enterprise projects,"Custom development/specialist markets, Non-commercial web site/app","SQL databases, Event sourcing, Read-only data sources such as feeds",Windows,It's used unofficially,Correctness: fewer bugs and less rework,"No perceived benefits: They don't understand what benefits F# has over C# or other languages, Hiring: They worry about not being able to find F# developers, Training: They are worried about getting non-F# developers up to speed","Tooling and templates for common tasks need to have the same level of availability and support that C# has. It needs to be as easy to create and work with F# as it is with C#. Also documentation for those needs to be prevalent. One obscure blog-post on how to do something that is out of date doesn't help much. In short it needs to be perceived and supported as mainstream. Also educational materials... it needs to be easy to train a programmer new to F#. Talk of Monads and such just scares them away. Integration with existing code could be better too. For instance I'd like F# to connect seamlessly to my code-first EF libraries. Or the SQL type provider needs to be able to take a run-time connection string... stuff like that. But the lack of other developers who know F# is the big deal. Everyone knows C#... ""so why would we use F#""... :/","Lack of good tutorials/documentation, Not enough real-world code to learn from","Lack of F# friendly libraries, Lack of good wrappers for non-F# libraries, Working with C#-centric tooling, Less sophisticated tools for refactoring, etc., Difficulty in troubleshooting problems",Native,"Lack of templates and tooling. Also, you have to use so much .NET that your F# code ends up looking like C#... and the .NET libraries don't act in truly functional ways...

I'd really, really, like to see F# code be able to be used along-side C# code in a VS project. They shouldn't have to be put in different projects. This would help adoption tremendously.

Also Tabs please... I know this is a religious topic, but why not? They're so much easier to edit with.",,"F#/Functional programming is really cool, and learning it has made my code in other languages better. I wish I could use it more and hope that by slowly, somewhat surreptitiously using it at work, and in my own personal tinkering I will be able to help it get traction at work. The ecosystem still needs a lot of work though (it is getting better, but with as long as F# has been on the scene I'd expect it to be farther along). Microsoft really needs to throw more weight behind it with templates, tooling, tutorials, training, etc... that will give it the legitimacy it needs for adoption in enterprise. There should have been multiple sessions at /BUILD in F# for instance.","Books or longer articles explaining full context, Reference works or documentation with API listings or short tutorials, Recorded talks from a conference or user group","Good IDE support. Could still be better in VS... for instance auto-completion needs work. It's not up to par with C# support.
Ionide in Code is cool.",
19/04/2016 19:33:46,10 or more years,Commercial software/web development,"Yes, I enjoy computer science and mathematics",Learner,"C#, C++, F#",Less than a year,,I use it for hobby or side projects,"Windows, Mac","Visual Studio 2015 or newer, Xamarin, Vim","F# Weekly, HN, Reddit and other programming news sites, F# bloggers, fsharp channel on Slack","Better domain modelling with records and unions, Conciseness of code (I can see more at a glance), Learning functional programming in general","Algebraic types (inc discriminated unions and tuples), Interactive development, Simple ""one liner"" type definitions for records and DUs, Type inference","Agents (MailboxProcessor), Quotations","MSDN, Links and instructions from fsharp.org, F# books, F# bloggers, Links mentioned in F# Weekly, Answers to Stack Overflow questions, Videos (e.g. Community for F#), Reading F# code written by experts",I like theory -- I'm not afraid of monads and other abstractions,"More material with real-world examples and war stories, More short ""live coding"" videos, More interactive tutorials (e.g. like the F# Koans)",,Open source projects,"Utilities and tools, Games, Mobile apps",Not doing data centric apps,,It's officially endorsed in my team for critical/production areas,"Domain modelling: making illegal states unrepresentable, More productive with fewer developers",Nothing. Everyone loves it.,,,"Working with C#-centric tooling, Less sophisticated tools for refactoring, etc., Cross-platform issues","LLVM, Native","Some uses of type providers, active patterns, quotations, etc. feel like overly complicated ways to get some of the capabilities of LISP macros. A similar hole is the inability to parameterize types on values, which I gather is a limitation of the CLR.",,,"In-person: A talks at user groups, In-person: Attending a talks as part of a conference, Books or longer articles explaining full context, Reference works or documentation with API listings or short tutorials, Recorded talks from a conference or user group, In-depth online courses (e.g. Pluralsight)","Visual Studio, Xamarin",
19/04/2016 19:35:45,5-10 years,Enterprise development,"Yes, I enjoy computer science and mathematics",Learner,C#,Haven't really used it yet,,Just tinkering,Windows,Visual Studio 2015 or newer,"fsharp channel on Slack, StackOverflow chat",Writing better c#,"Backtick naming, The ""piping"" idiom",,"Videos (e.g. Community for F#), lurking in chats",I'm willing to learn advanced concepts but only if they are relevant and practical,"More short ""live coding"" videos, More interactive tutorials (e.g. like the F# Koans)",Better editor support in Visual Studio.,Open source projects,None - Just playing around,,Windows,I don't use F# at work,,Fad: They have concerns over long term language viability,Force MS to drop VB and make F# .Net language #1.,Editor experience in Visual Studio.,,,,,,"In-person: In-depth trainings (2 or 3 days), Books or longer articles explaining full context, Recorded talks from a conference or user group, In-depth online courses (e.g. Pluralsight)",paket,
19/04/2016 19:36:40,5-10 years,Financial services or similar,"No, I don't know much theory",Learner,C#,Less than a year,,I use it for hobby or side projects,Windows,"Visual Studio 2015 or newer, Atom (with Ionide), VS Code (with Ionide)","F# Weekly, F# bloggers, fsharp channel on Slack","Better domain modelling with records and unions, Conciseness of code (I can see more at a glance), Correctness (no nulls, it works first time), Great community, Learning functional programming in general","Algebraic types (inc discriminated unions and tuples), Backtick naming, Immutability by default, Interactive development, Simple ""one liner"" type definitions for records and DUs, The ""piping"" idiom, Type providers","Active Patterns, Quotations, Static type constraints","F# books, F# bloggers, Links mentioned in F# Weekly, Videos (e.g. Community for F#)",I'm willing to learn advanced concepts but only if they are relevant and practical,"More material with in-depth tutorials, More material with short ""cookbook"" style information, More material with real-world examples and war stories, More short ""live coding"" videos",Better documentation especially on open source libraries with good examples especially for the more advanced functional concepts,"Internal enterprise projects, Open source projects","Utilities and tools, Financial services, Machine learning, Non-commercial web site/app, Data analysis/statistics, Text analysis/language parsing","SQL databases, Event sourcing, Analytics","Windows, Linux",It's officially endorsed in my team for critical/production areas,"Domain modelling: making illegal states unrepresentable, Correctness: fewer bugs and less rework, Better for solving complex problems",Hiring: They worry about not being able to find F# developers,,"Lack of good tutorials/documentation, Not enough real-world code to learn from","Lack of F# friendly libraries, Lack of good wrappers for non-F# libraries, Working with C#-centric tooling, Less sophisticated tools for refactoring, etc.","JVM, Native",,,,"In-person: Shorter workshops focused on a specific topic (1 day), Books or longer articles explaining full context, Reference works or documentation with API listings or short tutorials, Recorded talks from a conference or user group, In-depth online courses (e.g. Pluralsight)","FParsec
FSlab
",
19/04/2016 19:47:47,10 or more years,Enterprise development,"Yes, I enjoy computer science and mathematics",Experienced,"C#, sql",4 or more years,,I use it for hobby or side projects,Windows,Visual Studio 2015 or newer,"Twitter, F# Weekly, F# bloggers","Better domain modelling with records and unions, Conciseness of code (I can see more at a glance), Correctness (no nulls, it works first time), Learning functional programming in general","Algebraic types (inc discriminated unions and tuples), Immutability by default, Interactive development, Object expressions, printf that is type checked, Type inference","Agents (MailboxProcessor), Quotations","MSDN, F# books, Links posted on social media such as Twitter, Answers to Stack Overflow questions, Videos (e.g. Community for F#), Reading F# code written by experts, pluralsight",I like theory -- I'm not afraid of monads and other abstractions,"More material with in-depth tutorials, More material with real-world examples and war stories",,Not applicable. None of my F# code is used by other people,Utilities and tools,SQL databases,Windows,It's used unofficially,"Domain modelling: making illegal states unrepresentable, Correctness: fewer bugs and less rework","Hiring: They worry about not being able to find F# developers, No buy-in: There is lack of acceptance from other teams",,Not enough real-world code to learn from,,"JVM, Javascript",too many devs are happy with what they know already and can't be bothered to learn functional programming,,,"In-person: Attending a talks as part of a conference, Books or longer articles explaining full context, Recorded talks from a conference or user group, In-depth online courses (e.g. Pluralsight)",,
19/04/2016 19:50:12,10 or more years,Commercial software/web development,"Yes, I enjoy computer science and mathematics",Expert,"C#, F#, Java, Objective-C, Scala",4 or more years,,I use it at work or for other commercial uses,Mac,Xamarin,"F# Weekly, F# bloggers, fsharp channel on Slack","Better domain modelling with records and unions, Conciseness of code (I can see more at a glance), Correctness (no nulls, it works first time)","Agents (MailboxProcessor), Algebraic types (inc discriminated unions and tuples), Computation expressions","Quotations, Type providers, Units of measure","F# books, F# bloggers",I like theory -- I'm not afraid of monads and other abstractions,"More material with short ""cookbook"" style information",,Commercial products,"Algorithm-heavy business applications (non-financial), Mainstream business & enterprise applications, Mobile apps","Event sourcing, Read-only data sources such as feeds","iOS, Android",It's officially endorsed in my team for critical/production areas,"Domain modelling: making illegal states unrepresentable, Correctness: fewer bugs and less rework, More productive with fewer developers, Easy concurrency with async and agents, Better for solving complex problems",Nothing. Everyone loves it.,"Well, no one's ever going to use it on the host, but that's a .Net thing; F# (and all of dotnet) is only relevant on iOS and Android.  And we already use it extensively in our mobile apps.

Making F# a first-class citizen in Xamarin Studio for iOS apps would be useful; right now too much stuff happens in C# when XS is building classes from a storyboard.",,"Lack of F# friendly libraries, Lack of good wrappers for non-F# libraries, Working with C#-centric tooling","The only platforms for dotnet, at all, are iOS and Android.  Ditch all the host nonsense, no one cares.","C# developers are insanely conservative.  In the JVM world, Scala is huge and several other languages have serious followings.  In the dotnet world, it's like no one cares about anything other than C#.  It's bizarre, and I have no idea how to fix it.

I'd be afraid that anyone who isn't already a C# dev is completely uninterested in trying .Net, and the people who are already C# devs are only there because they have to be.  Anyone who's curious about anything new or interesting just isn't paying attention to .Net.",,,"Books or longer articles explaining full context, Reference works or documentation with API listings or short tutorials",,
19/04/2016 19:51:19,10 or more years,Commercial software/web development,"No, I don't know much theory",Learner,C#,Less than a year,,I use it for hobby or side projects,"Windows, Linux","Visual Studio 2015 or newer, Atom (with Ionide)",fsharp channel on Slack,"Better domain modelling with records and unions, Conciseness of code (I can see more at a glance), Correctness (no nulls, it works first time), Having fun again, Learning functional programming in general, Speed of development","Algebraic types (inc discriminated unions and tuples), Computation expressions, Easy integration with other .NET libraries, Simple ""one liner"" type definitions for records and DUs, The ""piping"" idiom, Type inference","Agents (MailboxProcessor), Units of measure","MSDN, Links and instructions from fsharp.org, Answers to Stack Overflow questions",I'm willing to learn advanced concepts but only if they are relevant and practical,More material with in-depth tutorials,,Not applicable. None of my F# code is used by other people,"Utilities and tools, Mainstream business & enterprise applications, Commercial web site/app",SQL databases,"Windows, Linux",It's officially endorsed in my team for non-critical/non-production code,,Hiring: They worry about not being able to find F# developers,,,,,,,,,,
19/04/2016 19:51:25,10 or more years,Commercial software/web development,"No, I don't know much theory",Learner,"C#, Javascript",2-3 years,,I use it for hobby or side projects,Windows,"Visual Studio 2015 or newer, Atom (with Ionide)","F# Weekly, F# bloggers","Better domain modelling with records and unions, Correctness (no nulls, it works first time), Great community, Having fun again","Active Patterns, Algebraic types (inc discriminated unions and tuples), Backtick naming, Immutability by default, Simple ""one liner"" type definitions for records and DUs, The ""piping"" idiom, Type inference, Units of measure","Agents (MailboxProcessor), Async workflows, Computation expressions","Links and instructions from fsharp.org, F# books, F# bloggers, Links mentioned in F# Weekly, Videos (e.g. Community for F#)",I'm willing to learn advanced concepts but only if they are relevant and practical,"More material with real-world examples and war stories, More short ""live coding"" videos, More interactive tutorials (e.g. like the F# Koans)",,,,,,I don't use F# at work,,"No perceived benefits: They don't understand what benefits F# has over C# or other languages, Hiring: They worry about not being able to find F# developers, No buy-in: There is lack of acceptance from other teams",,Not enough real-world code to learn from,"Less sophisticated tools for refactoring, etc., Difficulty in troubleshooting problems",Javascript,,,,"In-person: In-depth trainings (2 or 3 days), Books or longer articles explaining full context, Reference works or documentation with API listings or short tutorials, In-depth online courses (e.g. Pluralsight)","FSharp.ViewModule
FSharp.Desktop.UI
FAKE
",
19/04/2016 20:45:19,10 or more years,Commercial software/web development,"Yes, I enjoy computer science and mathematics",Intermediate,"C, C#, F#",4 or more years,,I use it at work or for other commercial uses,Windows,Visual Studio 2015 or newer,"Twitter, F# Weekly, F# bloggers","Better domain modelling with records and unions, Conciseness of code (I can see more at a glance), Correctness (no nulls, it works first time), Great community, Having fun again, Learning functional programming in general","Active Patterns, Agents (MailboxProcessor), Algebraic types (inc discriminated unions and tuples), Async workflows, Backtick naming, Computation expressions, Easy integration with other .NET libraries, Immutability by default, Interactive development, No dependency cycles, Object expressions, Object-oriented features (inc. C# compatibility, conciseness), printf that is type checked, Quotations, Simple ""one liner"" type definitions for records and DUs, The ""piping"" idiom, Type inference, Type providers, Units of measure, learning functional mindset",,"MSDN, Links and instructions from fsharp.org, F# books, F# bloggers, Links posted on social media such as Twitter, Links mentioned in F# Weekly, Answers to Stack Overflow questions, Structured training/workshops, Videos (e.g. Community for F#), Reading F# code written by experts",I like theory -- I'm not afraid of monads and other abstractions,More material with real-world examples and war stories,,commercial still in development,"Utilities and tools, Commercial web site/app",,"Windows, iOS, Android",It's officially endorsed in my team for critical/production areas,"Domain modelling: making illegal states unrepresentable, Correctness: fewer bugs and less rework, More productive with fewer developers, Faster time to market, Efficiency/Performance, Easy concurrency with async and agents, Better for solving complex problems",Nothing. Everyone loves it.,,,,None -- I'm happy with the CLR/Mono,,,,"Books or longer articles explaining full context, Reference works or documentation with API listings or short tutorials, Recorded talks from a conference or user group, In-depth online courses (e.g. Pluralsight)",,
19/04/2016 21:25:22,2-5 years,Student,"No, I don't know much theory",Learner,"C#, Javascript, Typescript",Less than a year,,I use it for hobby or side projects,"Windows, Linux","Visual Studio 2015 or newer, Vim, VS Code (with Ionide)","Twitter, HN, Reddit and other programming news sites","Better domain modelling with records and unions, Having fun again, Learning functional programming in general","Async workflows, Easy integration with other .NET libraries, Immutability by default, Interactive development, Object-oriented features (inc. C# compatibility, conciseness), printf that is type checked, Quotations, Type inference, Type providers",Units of measure,"Links and instructions from fsharp.org, F# bloggers, Answers to Stack Overflow questions",I want to learn functional programming but I don't like academic jargon,,"Better tooling. C# has better intellisense. And I hated the wrong indentation bug, when I did not know by what was it caused.",Not applicable. None of my F# code is used by other people,"Utilities and tools, Data analysis/statistics","NoSQL database, Read-only data sources such as feeds, Analytics","Windows, Linux",It's used unofficially,better for solving simple problems,"No perceived benefits: They don't understand what benefits F# has over C# or other languages, The functional programming is limiting - order of types matters",Make CF# with all the F# features but allow cyclic dependencies and use {} instead of spaces,Don't understand the compiler errors,"Lack of F# friendly libraries, Lack of good wrappers for non-F# libraries, Less sophisticated tools for refactoring, etc., Difficulty in troubleshooting problems, Performance issues",None -- I'm happy with the CLR/Mono,"Performance, too functional",,,"Books or longer articles explaining full context, Recorded talks from a conference or user group, In-depth online courses (e.g. Pluralsight)","Just the FsharoCore and PowerPack
Excel and R type providers",
19/04/2016 21:34:31,5-10 years,Commercial software/web development,"No, I don't know much theory",Intermediate,"C#, F#",1-2 years,,I use it at work or for other commercial uses,Windows,Visual Studio 2015 or newer,"F# Weekly, F# bloggers","Better domain modelling with records and unions, Conciseness of code (I can see more at a glance), Correctness (no nulls, it works first time), Great community, Speed of development","Algebraic types (inc discriminated unions and tuples), Immutability by default, The ""piping"" idiom, Type inference","Agents (MailboxProcessor), Units of measure","F# bloggers, Links mentioned in F# Weekly, Answers to Stack Overflow questions, Reading F# code written by experts",I like theory -- I'm not afraid of monads and other abstractions,More material with in-depth tutorials,,Commercial products,"Utilities and tools, Commercial web site/app","SQL databases, Event sourcing","Windows, Azure",It's officially endorsed in my team for critical/production areas,"Domain modelling: making illegal states unrepresentable, Correctness: fewer bugs and less rework, More productive with fewer developers, Faster time to market, Efficiency/Performance, Easy concurrency with async and agents, Better for solving complex problems",Nothing. Everyone loves it.,,"Not enough real-world code to learn from, More visibility on real world usage","Not being part of the core .NET distribution, Lack of good wrappers for non-F# libraries, Working with C#-centric tooling, Cross-platform issues",,,,,"Books or longer articles explaining full context, Reference works or documentation with API listings or short tutorials, Recorded talks from a conference or user group",F# Powertools,
19/04/2016 22:53:20,10 or more years,Commercial software/web development,"No, I don't know much theory",Intermediate,"C, C#, C++",1-2 years,,I use it for hobby or side projects,"Windows, Linux",Visual Studio 2015 or newer,F# bloggers,"Correctness (no nulls, it works first time), Learning functional programming in general","Algebraic types (inc discriminated unions and tuples), Immutability by default, Type inference",Units of measure,"Links and instructions from fsharp.org, F# books, Answers to Stack Overflow questions",I want to learn functional programming but I don't like academic jargon,"More material with in-depth tutorials, More material with short ""cookbook"" style information, More short ""live coding"" videos",,Not applicable. None of my F# code is used by other people,"None - Just playing around, Games",Not doing data centric apps,"Windows, Azure",I don't use F# at work,,"Hiring: They worry about not being able to find F# developers, Training: They are worried about getting non-F# developers up to speed, No buy-in: There is lack of acceptance from other teams",,Lack of good tutorials/documentation,"Less sophisticated tools for refactoring, etc., Difficulty in troubleshooting problems",None -- I'm happy with the CLR/Mono,,,,"Books or longer articles explaining full context, Reference works or documentation with API listings or short tutorials, In-depth online courses (e.g. Pluralsight)",,
20/04/2016 00:02:37,5-10 years,Commercial software/web development,"No, I don't know much theory",Learner,"C#, Javascript",Less than two months,,I use it for hobby or side projects,Windows,Visual Studio 2015 or newer,"Twitter, F# Weekly, F# bloggers","Better domain modelling with records and unions, Conciseness of code (I can see more at a glance), Correctness (no nulls, it works first time), Great community, Learning functional programming in general","Active Patterns, Immutability by default, No dependency cycles, The ""piping"" idiom, Type inference, Type providers","Agents (MailboxProcessor), Computation expressions, Quotations, Static type constraints, Units of measure","F# books, F# bloggers, Links posted on social media such as Twitter, Links mentioned in F# Weekly, Videos (e.g. Community for F#), Reading F# code written by experts",I'm willing to learn advanced concepts but only if they are relevant and practical,"More material with in-depth tutorials, More material with short ""cookbook"" style information, More material with real-world examples and war stories, More short ""live coding"" videos",,Not applicable. None of my F# code is used by other people,"Custom development/specialist markets, Data analysis/statistics",Read-only data sources such as feeds,"Windows, Mac, Linux",I don't use F# at work,,,,,"Not being part of the core .NET distribution, Working with C#-centric tooling, Less sophisticated tools for refactoring, etc.",,,,,"Reference works or documentation with API listings or short tutorials, Recorded talks from a conference or user group, In-depth online courses (e.g. Pluralsight)","FSharp Data
FSharp PowerTools
FSharp Reactive
Chessie
",
20/04/2016 00:32:56,5-10 years,Commercial software/web development,"Yes, I enjoy computer science and mathematics",Experienced,"C#, F#",1-2 years,,I use it at work or for other commercial uses,Windows,Visual Studio 2015 or newer,"Twitter, F# Weekly","Better domain modelling with records and unions, Conciseness of code (I can see more at a glance), Correctness (no nulls, it works first time), Having fun again, Speed of development","Easy integration with other .NET libraries, Immutability by default, Interactive development, Object expressions, Object-oriented features (inc. C# compatibility, conciseness), Simple ""one liner"" type definitions for records and DUs, The ""piping"" idiom, Type inference, Type providers","Active Patterns, Agents (MailboxProcessor), Async workflows, Quotations, Units of measure","F# books, F# bloggers, Links posted on social media such as Twitter, Links mentioned in F# Weekly",I want to learn functional programming but I don't like academic jargon,,,Commercial products,"Mainstream business & enterprise applications, Commercial web site/app","SQL databases, NoSQL database","Windows, Azure",It's officially endorsed in my team for critical/production areas,"Domain modelling: making illegal states unrepresentable, More productive with fewer developers, Better for solving complex problems",,,,"Not being part of the core .NET distribution, Working with C#-centric tooling, Less sophisticated tools for refactoring, etc., Difficulty in troubleshooting problems",JVM,tooling,,,"In-person: In-depth trainings (2 or 3 days), Books or longer articles explaining full context, In-depth online courses (e.g. Pluralsight)","fake,
various type providers (sql, json, excel, ...),
f# power tools,
",
20/04/2016 02:16:31,10 or more years,Commercial software/web development,"No, I don't know much theory",Experienced,"C#, F#, Typescript",4 or more years,,I use it at work or for other commercial uses,Windows,Visual Studio 2015 or newer,"F# Weekly, Google+, F# bloggers","Better domain modelling with records and unions, Conciseness of code (I can see more at a glance), Correctness (no nulls, it works first time), Having fun again, Learning functional programming in general, Functional but can be tweaked to get high performance","Algebraic types (inc discriminated unions and tuples), Async workflows, Easy integration with other .NET libraries, Immutability by default, Object expressions, Simple ""one liner"" type definitions for records and DUs, The ""piping"" idiom, Type inference, Type providers, Pattern Matching and Destructuring","Static type constraints, Units of measure","F# books, F# bloggers, Answers to Stack Overflow questions, Reading F# code written by experts",I like theory -- I'm not afraid of monads and other abstractions,"More material with in-depth tutorials, More material with real-world examples and war stories, More interactive tutorials (e.g. like the F# Koans), THINGS THAT ARE NOT VIDEOS",,"Internal enterprise projects, Commercial products","Financial services, Data analysis/statistics","SQL databases, Analytics",Windows,It's officially endorsed in my team for critical/production areas,"Domain modelling: making illegal states unrepresentable, Correctness: fewer bugs and less rework, More productive with fewer developers, Easy concurrency with async and agents, Better for solving complex problems","Hiring: They worry about not being able to find F# developers, Training: They are worried about getting non-F# developers up to speed, No buy-in: There is lack of acceptance from other teams",,,"Not being part of the core .NET distribution, Working with C#-centric tooling, Performance issues",LLVM,,,,NO VIDEOS,"F# Power Tools, FSharp.Data, FParsec, Akka.NET, Nessos Streams",
20/04/2016 04:14:39,10 or more years,Enterprise development,"No, I don't know much theory",Intermediate,"C#, Javascript, Python",1-2 years,,I use it for hobby or side projects,Windows,Visual Studio 2015 or newer,"F# Weekly, HN, Reddit and other programming news sites","Better domain modelling with records and unions, Conciseness of code (I can see more at a glance), Great community, Having fun again, Speed of development","Easy integration with other .NET libraries, Immutability by default, Object-oriented features (inc. C# compatibility, conciseness), printf that is type checked, Type providers","Active Patterns, Agents (MailboxProcessor), Async workflows, Computation expressions, Interactive development, Object expressions, Quotations","Links and instructions from fsharp.org, F# bloggers, Links posted on social media such as Twitter, Links mentioned in F# Weekly, Videos (e.g. Community for F#)",I want to learn functional programming but I don't like academic jargon,"More material with in-depth tutorials, More material with real-world examples and war stories",,Internal enterprise projects,"Utilities and tools, Games, Machine learning, Commercial web site/app","SQL databases, Read-only data sources such as feeds",Windows,It's used unofficially,"Domain modelling: making illegal states unrepresentable, Correctness: fewer bugs and less rework",No buy-in: There is lack of acceptance from other teams,,,"Working with C#-centric tooling, Difficulty in troubleshooting problems",None -- I'm happy with the CLR/Mono,,,,"Reference works or documentation with API listings or short tutorials, Recorded talks from a conference or user group",,
20/04/2016 05:19:37,10 or more years,Enterprise development,"Yes, I enjoy computer science and mathematics",Learner,"C#, Javascript, Delphi",Less than a year,Use mostly C# at work. Not much time to play around with F# at home or work at the moment.,Just tinkering,Windows,"Visual Studio 2015 or newer, Visual Studio 2012 or 2013","Twitter, F# Weekly","Better domain modelling with records and unions, Having fun again, Learning functional programming in general","Active Patterns, Algebraic types (inc discriminated unions and tuples), Immutability by default, Interactive development, The ""piping"" idiom, Type providers","Integration with non-F# libraries, Units of measure","Links and instructions from fsharp.org, F# books, F# bloggers, Links posted on social media such as Twitter, Links mentioned in F# Weekly, Videos (e.g. Community for F#), Reading F# code written by experts",I'm willing to learn advanced concepts but only if they are relevant and practical,"More material with in-depth tutorials, More material with short ""cookbook"" style information, More material with real-world examples and war stories, More podcasts and other audio-only material",,Internal enterprise projects,"None - Just playing around, Utilities and tools",Read-only data sources such as feeds,Windows,It's used unofficially,Better for solving complex problems,"No perceived benefits: They don't understand what benefits F# has over C# or other languages, Training: They are worried about getting non-F# developers up to speed, No buy-in: There is lack of acceptance from other teams","More evidence of F# used in businesses. More testimonials to prove that F# is not a niche language and it is a viable solution to use in the workplace. Testimonials from large business that use F# (because managers only listen if it's used by big companies).
",Not enough real-world code to learn from,"Not being part of the core .NET distribution, Lack of good wrappers for non-F# libraries, Working with C#-centric tooling","JVM, Javascript","Lack of awareness from the mainstream of .net developers. Still seen a niche alternative to even VB.net. Many have heard of F# but until Microsoft explicitly states and makes F# a first class citizen next to C#, mainstream dev managers will continue to ignore it.",,,"In-person: A talks at user groups, In-person: Attending a talks as part of a conference, Books or longer articles explaining full context, Recorded talks from a conference or user group, In-depth online courses (e.g. Pluralsight)","F# Power Tools
FSharp.Data
",
20/04/2016 07:43:15,10 or more years,Commercial software/web development,"Yes, I enjoy computer science and mathematics",Intermediate,C#,1-2 years,,I use it for hobby or side projects,"Windows, Linux","Visual Studio 2015 or newer, VS Code (with Ionide)","Twitter, F# Weekly, F# bloggers","Conciseness of code (I can see more at a glance), Correctness (no nulls, it works first time), Great community, Having fun again, Learning functional programming in general","Active Patterns, Async workflows, Computation expressions, Immutability by default, Interactive development, The ""piping"" idiom, Type inference, Type providers","Object-oriented compatibility, Units of measure","MSDN, Links and instructions from fsharp.org, F# books, F# bloggers, Links posted on social media such as Twitter, Links mentioned in F# Weekly, Answers to Stack Overflow questions, Videos (e.g. Community for F#), Reading F# code written by experts",I'm willing to learn advanced concepts but only if they are relevant and practical,"More material with real-world examples and war stories, More interactive tutorials (e.g. like the F# Koans)",,Not applicable. None of my F# code is used by other people,Utilities and tools,Read-only data sources such as feeds,"Windows, Linux",I don't use F# at work,,"No perceived benefits: They don't understand what benefits F# has over C# or other languages, Hiring: They worry about not being able to find F# developers, Money: They worry that good F# developers will cost too much, No buy-in: There is lack of acceptance from other teams",,Don't understand the compiler errors,"Less sophisticated tools for refactoring, etc., Difficulty in troubleshooting problems",None -- I'm happy with the CLR/Mono,Lack of refactoring tools at a Resharper level.,,,"In-person: A talks at user groups, Books or longer articles explaining full context, Reference works or documentation with API listings or short tutorials, In-depth online courses (e.g. Pluralsight)","FSharp.Data
Paket
Fake
WebSharper
",
20/04/2016 07:54:43,10 or more years,Commercial software/web development,"Yes, I enjoy computer science and mathematics",Experienced,"C#, F#, Haskell",4 or more years,,I use it at work or for other commercial uses,Windows,"Visual Studio 2015 or newer, Visual Studio 2012 or 2013","Twitter, F# Weekly, HN, Reddit and other programming news sites","Better domain modelling with records and unions, Conciseness of code (I can see more at a glance), Correctness (no nulls, it works first time), Great community, Having fun again, Speed of development, Functional but can be tweaked to get high performance","Active Patterns, Algebraic types (inc discriminated unions and tuples), Computation expressions, Easy integration with other .NET libraries, Immutability by default, Interactive development, No dependency cycles, Object expressions, Quotations, Simple ""one liner"" type definitions for records and DUs, The ""piping"" idiom, Type inference, Type providers","Agents (MailboxProcessor), Async workflows, Object-oriented compatibility, Type providers, Units of measure","MSDN, F# books, F# bloggers, Links posted on social media such as Twitter, Links mentioned in F# Weekly, Reading F# code written by experts",I like theory -- I'm not afraid of monads and other abstractions,"More material with real-world examples and war stories, More short ""live coding"" videos, More interactive tutorials (e.g. like the F# Koans)",,"Commercial products, Open source projects","Utilities and tools, Algorithm-heavy business applications (non-financial), Research/Teaching",Not doing data centric apps,Windows,It's officially endorsed in my team for critical/production areas,"Domain modelling: making illegal states unrepresentable, Correctness: fewer bugs and less rework, More productive with fewer developers, Better for solving complex problems","No perceived benefits: They don't understand what benefits F# has over C# or other languages, Hiring: They worry about not being able to find F# developers, Training: They are worried about getting non-F# developers up to speed, Fad: They have concerns over long term language viability, No buy-in: There is lack of acceptance from other teams",Publish more success stories related to commercial applications. Especially if endorsed by Microsoft or other big companies. ,,"Not being part of the core .NET distribution, Less sophisticated tools for refactoring, etc.","Javascript, LLVM, Native","Lack of higher-kinded types. Not possible to have a general monad interface, for example. ",,,"Books or longer articles explaining full context, Reference works or documentation with API listings or short tutorials, Recorded talks from a conference or user group, In-depth online courses (e.g. Pluralsight)","Fsharpx
Fparsec",
20/04/2016 07:55:02,10 or more years,Commercial software/web development,"Yes, I enjoy computer science and mathematics",Experienced,"C#, F#, Haskell",4 or more years,,I use it at work or for other commercial uses,Windows,"Visual Studio 2015 or newer, Visual Studio 2012 or 2013","Twitter, F# Weekly, HN, Reddit and other programming news sites","Better domain modelling with records and unions, Conciseness of code (I can see more at a glance), Correctness (no nulls, it works first time), Great community, Having fun again, Speed of development, Functional but can be tweaked to get high performance","Active Patterns, Algebraic types (inc discriminated unions and tuples), Computation expressions, Easy integration with other .NET libraries, Immutability by default, Interactive development, No dependency cycles, Object expressions, Quotations, Simple ""one liner"" type definitions for records and DUs, The ""piping"" idiom, Type inference, Type providers","Agents (MailboxProcessor), Async workflows, Object-oriented compatibility, Type providers, Units of measure","MSDN, F# books, F# bloggers, Links posted on social media such as Twitter, Links mentioned in F# Weekly, Reading F# code written by experts",I like theory -- I'm not afraid of monads and other abstractions,"More material with real-world examples and war stories, More short ""live coding"" videos, More interactive tutorials (e.g. like the F# Koans)",,"Commercial products, Open source projects","Utilities and tools, Algorithm-heavy business applications (non-financial), Research/Teaching",Not doing data centric apps,Windows,It's officially endorsed in my team for critical/production areas,"Domain modelling: making illegal states unrepresentable, Correctness: fewer bugs and less rework, More productive with fewer developers, Better for solving complex problems","No perceived benefits: They don't understand what benefits F# has over C# or other languages, Hiring: They worry about not being able to find F# developers, Training: They are worried about getting non-F# developers up to speed, Fad: They have concerns over long term language viability, No buy-in: There is lack of acceptance from other teams",Publish more success stories related to commercial applications. Especially if endorsed by Microsoft or other big companies. ,,"Not being part of the core .NET distribution, Less sophisticated tools for refactoring, etc.","Javascript, LLVM, Native","Lack of higher-kinded types. Not possible to have a general monad interface, for example. ",,,"Books or longer articles explaining full context, Reference works or documentation with API listings or short tutorials, Recorded talks from a conference or user group, In-depth online courses (e.g. Pluralsight)","Fsharpx
Fparsec",
20/04/2016 09:38:00,10 or more years,Commercial software/web development,"No, I don't know much theory",Experienced,C#,3-4 years,"New company (almost no professional F# work)
Rust (so, currently, almost no hobby F# work)",I use it for hobby or side projects,Windows,Visual Studio 2015 or newer,F# Weekly,"Better domain modelling with records and unions, Conciseness of code (I can see more at a glance), Correctness (no nulls, it works first time), Speed of development, Correctness via Type Providers","Active Patterns, Algebraic types (inc discriminated unions and tuples), Async workflows, Computation expressions, Immutability by default, No dependency cycles, Simple ""one liner"" type definitions for records and DUs, Type inference, Type providers","Agents (MailboxProcessor), Quotations, Units of measure","MSDN, Links and instructions from fsharp.org, Links mentioned in F# Weekly",I'm willing to learn advanced concepts but only if they are relevant and practical,More material with in-depth tutorials,,"Internal enterprise projects, Open source projects, Tests","Utilities and tools, Algorithm-heavy business applications (non-financial), Data analysis/statistics, Other","SQL databases, Read-only data sources such as feeds","Windows, Linux",It's used unofficially,"Domain modelling: making illegal states unrepresentable, Correctness: fewer bugs and less rework, No dependency cycles","Hiring: They worry about not being able to find F# developers, Training: They are worried about getting non-F# developers up to speed, Homogenity Bias - All the code base is C#","Nothing. Productivity and Quality improvement via better programming languages are explicit non-goals. As long as .NET + C# exists, F# is dead.",,"Lack of F# friendly libraries, Lack of good wrappers for non-F# libraries, Working with C#-centric tooling",,"One???

* Inefficient. All the cool things are less efficient then analogue in C# (Linq, Async, Optional/Nullable).
* Operator soup. While |> is easy, =?=> etc. from some libraries is stupid.
* NIH. Tutorials build up build chain with Fake. Really? Besides being F#, this project has negative value for quick startup, and if you need more than basic MSBuild, you'll be smart enough to find it on your own. (But .NET builds are fucked up anyways, so who cares.).",,,"In-person: A talks at user groups, Books or longer articles explaining full context","FSharp.Data
FsCheck",
20/04/2016 10:03:12,10 or more years,Enterprise development,"Yes, I enjoy computer science and mathematics",Expert,"C#, F#",4 or more years,,I use it at work or for other commercial uses,Windows,Visual Studio 2015 or newer,"Twitter, F# Weekly, HN, Reddit and other programming news sites, F# bloggers","Better domain modelling with records and unions, Conciseness of code (I can see more at a glance), Correctness (no nulls, it works first time), Great community, Learning functional programming in general","Algebraic types (inc discriminated unions and tuples), Async workflows, Computation expressions, Easy integration with other .NET libraries, Immutability by default, Interactive development, Simple ""one liner"" type definitions for records and DUs, The ""piping"" idiom, Type inference, Type providers","Object-oriented compatibility, Quotations, Static type constraints, Units of measure","F# bloggers, Links posted on social media such as Twitter, Links mentioned in F# Weekly, Reading F# code written by experts",I'm willing to learn advanced concepts but only if they are relevant and practical,"More material with in-depth tutorials, More material with short ""cookbook"" style information, More material with real-world examples and war stories, More short ""live coding"" videos",,Internal enterprise projects,Mainstream business & enterprise applications,SQL databases,"Windows, Linux",It's officially endorsed in my team for non-critical/non-production code,"Correctness: fewer bugs and less rework, Faster time to market","Hiring: They worry about not being able to find F# developers, Money: They worry that good F# developers will cost too much, Training: They are worried about getting non-F# developers up to speed",,"Lack of good tutorials/documentation, I can't use my knowledge from C# or other imperative languages, Don't understand the compiler errors, Not enough real-world code to learn from","Not being part of the core .NET distribution, Lack of good wrappers for non-F# libraries, Working with C#-centric tooling","Javascript, Native",,,,"Books or longer articles explaining full context, Reference works or documentation with API listings or short tutorials, Recorded talks from a conference or user group","fake, paket, fsharp.data, fparsec, argu",